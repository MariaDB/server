drop table if exists t1;
SET NAMES latin1;
CREATE TABLE t1 (a char(1) character set latin1);
INSERT INTO t1 VALUES (0x00),(0x01),(0x02),(0x03),(0x04),(0x05),(0x06),(0x07);
INSERT INTO t1 VALUES (0x08),(0x09),(0x0A),(0x0B),(0x0C),(0x0D),(0x0E),(0x0F);
INSERT INTO t1 VALUES (0x10),(0x11),(0x12),(0x13),(0x14),(0x15),(0x16),(0x17);
INSERT INTO t1 VALUES (0x18),(0x19),(0x1A),(0x1B),(0x1C),(0x1D),(0x1E),(0x1F);
INSERT INTO t1 VALUES (0x20),(0x21),(0x22),(0x23),(0x24),(0x25),(0x26),(0x27);
INSERT INTO t1 VALUES (0x28),(0x29),(0x2A),(0x2B),(0x2C),(0x2D),(0x2E),(0x2F);
INSERT INTO t1 VALUES (0x30),(0x31),(0x32),(0x33),(0x34),(0x35),(0x36),(0x37);
INSERT INTO t1 VALUES (0x38),(0x39),(0x3A),(0x3B),(0x3C),(0x3D),(0x3E),(0x3F);
INSERT INTO t1 VALUES (0x40),(0x41),(0x42),(0x43),(0x44),(0x45),(0x46),(0x47);
INSERT INTO t1 VALUES (0x48),(0x49),(0x4A),(0x4B),(0x4C),(0x4D),(0x4E),(0x4F);
INSERT INTO t1 VALUES (0x50),(0x51),(0x52),(0x53),(0x54),(0x55),(0x56),(0x57);
INSERT INTO t1 VALUES (0x58),(0x59),(0x5A),(0x5B),(0x5C),(0x5D),(0x5E),(0x5F);
INSERT INTO t1 VALUES (0x60),(0x61),(0x62),(0x63),(0x64),(0x65),(0x66),(0x67);
INSERT INTO t1 VALUES (0x68),(0x69),(0x6A),(0x6B),(0x6C),(0x6D),(0x6E),(0x6F);
INSERT INTO t1 VALUES (0x70),(0x71),(0x72),(0x73),(0x74),(0x75),(0x76),(0x77);
INSERT INTO t1 VALUES (0x78),(0x79),(0x7A),(0x7B),(0x7C),(0x7D),(0x7E),(0x7F);
INSERT INTO t1 VALUES (0x80),(0x81),(0x82),(0x83),(0x84),(0x85),(0x86),(0x87);
INSERT INTO t1 VALUES (0x88),(0x89),(0x8A),(0x8B),(0x8C),(0x8D),(0x8E),(0x8F);
INSERT INTO t1 VALUES (0x90),(0x91),(0x92),(0x93),(0x94),(0x95),(0x96),(0x97);
INSERT INTO t1 VALUES (0x98),(0x99),(0x9A),(0x9B),(0x9C),(0x9D),(0x9E),(0x9F);
INSERT INTO t1 VALUES (0xA0),(0xA1),(0xA2),(0xA3),(0xA4),(0xA5),(0xA6),(0xA7);
INSERT INTO t1 VALUES (0xA8),(0xA9),(0xAA),(0xAB),(0xAC),(0xAD),(0xAE),(0xAF);
INSERT INTO t1 VALUES (0xB0),(0xB1),(0xB2),(0xB3),(0xB4),(0xB5),(0xB6),(0xB7);
INSERT INTO t1 VALUES (0xB8),(0xB9),(0xBA),(0xBB),(0xBC),(0xBD),(0xBE),(0xBF);
INSERT INTO t1 VALUES (0xC0),(0xC1),(0xC2),(0xC3),(0xC4),(0xC5),(0xC6),(0xC7);
INSERT INTO t1 VALUES (0xC8),(0xC9),(0xCA),(0xCB),(0xCC),(0xCD),(0xCE),(0xCF);
INSERT INTO t1 VALUES (0xD0),(0xD1),(0xD2),(0xD3),(0xD4),(0xD5),(0xD6),(0xD7);
INSERT INTO t1 VALUES (0xD8),(0xD9),(0xDA),(0xDB),(0xDC),(0xDD),(0xDE),(0xDF);
INSERT INTO t1 VALUES (0xE0),(0xE1),(0xE2),(0xE3),(0xE4),(0xE5),(0xE6),(0xE7);
INSERT INTO t1 VALUES (0xE8),(0xE9),(0xEA),(0xEB),(0xEC),(0xED),(0xEE),(0xEF);
INSERT INTO t1 VALUES (0xF0),(0xF1),(0xF2),(0xF3),(0xF4),(0xF5),(0xF6),(0xF7);
INSERT INTO t1 VALUES (0xF8),(0xF9),(0xFA),(0xFB),(0xFC),(0xFD),(0xFE),(0xFF);
SELECT 
hex(a), 
hex(@u:=convert(a using utf8)),
hex(@l:=convert(@u using latin1)),
a=@l FROM t1;
hex(a)	hex(@u:=convert(a using utf8))	hex(@l:=convert(@u using latin1))	a=@l
00	00	00	1
01	01	01	1
02	02	02	1
03	03	03	1
04	04	04	1
05	05	05	1
06	06	06	1
07	07	07	1
08	08	08	1
09	09	09	1
0A	0A	0A	1
0B	0B	0B	1
0C	0C	0C	1
0D	0D	0D	1
0E	0E	0E	1
0F	0F	0F	1
10	10	10	1
11	11	11	1
12	12	12	1
13	13	13	1
14	14	14	1
15	15	15	1
16	16	16	1
17	17	17	1
18	18	18	1
19	19	19	1
1A	1A	1A	1
1B	1B	1B	1
1C	1C	1C	1
1D	1D	1D	1
1E	1E	1E	1
1F	1F	1F	1
			1
21	21	21	1
22	22	22	1
23	23	23	1
24	24	24	1
25	25	25	1
26	26	26	1
27	27	27	1
28	28	28	1
29	29	29	1
2A	2A	2A	1
2B	2B	2B	1
2C	2C	2C	1
2D	2D	2D	1
2E	2E	2E	1
2F	2F	2F	1
30	30	30	1
31	31	31	1
32	32	32	1
33	33	33	1
34	34	34	1
35	35	35	1
36	36	36	1
37	37	37	1
38	38	38	1
39	39	39	1
3A	3A	3A	1
3B	3B	3B	1
3C	3C	3C	1
3D	3D	3D	1
3E	3E	3E	1
3F	3F	3F	1
40	40	40	1
41	41	41	1
42	42	42	1
43	43	43	1
44	44	44	1
45	45	45	1
46	46	46	1
47	47	47	1
48	48	48	1
49	49	49	1
4A	4A	4A	1
4B	4B	4B	1
4C	4C	4C	1
4D	4D	4D	1
4E	4E	4E	1
4F	4F	4F	1
50	50	50	1
51	51	51	1
52	52	52	1
53	53	53	1
54	54	54	1
55	55	55	1
56	56	56	1
57	57	57	1
58	58	58	1
59	59	59	1
5A	5A	5A	1
5B	5B	5B	1
5C	5C	5C	1
5D	5D	5D	1
5E	5E	5E	1
5F	5F	5F	1
60	60	60	1
61	61	61	1
62	62	62	1
63	63	63	1
64	64	64	1
65	65	65	1
66	66	66	1
67	67	67	1
68	68	68	1
69	69	69	1
6A	6A	6A	1
6B	6B	6B	1
6C	6C	6C	1
6D	6D	6D	1
6E	6E	6E	1
6F	6F	6F	1
70	70	70	1
71	71	71	1
72	72	72	1
73	73	73	1
74	74	74	1
75	75	75	1
76	76	76	1
77	77	77	1
78	78	78	1
79	79	79	1
7A	7A	7A	1
7B	7B	7B	1
7C	7C	7C	1
7D	7D	7D	1
7E	7E	7E	1
7F	7F	7F	1
80	E282AC	80	1
81	C281	81	1
82	E2809A	82	1
83	C692	83	1
84	E2809E	84	1
85	E280A6	85	1
86	E280A0	86	1
87	E280A1	87	1
88	CB86	88	1
89	E280B0	89	1
8A	C5A0	8A	1
8B	E280B9	8B	1
8C	C592	8C	1
8D	C28D	8D	1
8E	C5BD	8E	1
8F	C28F	8F	1
90	C290	90	1
91	E28098	91	1
92	E28099	92	1
93	E2809C	93	1
94	E2809D	94	1
95	E280A2	95	1
96	E28093	96	1
97	E28094	97	1
98	CB9C	98	1
99	E284A2	99	1
9A	C5A1	9A	1
9B	E280BA	9B	1
9C	C593	9C	1
9D	C29D	9D	1
9E	C5BE	9E	1
9F	C5B8	9F	1
A0	C2A0	A0	1
A1	C2A1	A1	1
A2	C2A2	A2	1
A3	C2A3	A3	1
A4	C2A4	A4	1
A5	C2A5	A5	1
A6	C2A6	A6	1
A7	C2A7	A7	1
A8	C2A8	A8	1
A9	C2A9	A9	1
AA	C2AA	AA	1
AB	C2AB	AB	1
AC	C2AC	AC	1
AD	C2AD	AD	1
AE	C2AE	AE	1
AF	C2AF	AF	1
B0	C2B0	B0	1
B1	C2B1	B1	1
B2	C2B2	B2	1
B3	C2B3	B3	1
B4	C2B4	B4	1
B5	C2B5	B5	1
B6	C2B6	B6	1
B7	C2B7	B7	1
B8	C2B8	B8	1
B9	C2B9	B9	1
BA	C2BA	BA	1
BB	C2BB	BB	1
BC	C2BC	BC	1
BD	C2BD	BD	1
BE	C2BE	BE	1
BF	C2BF	BF	1
C0	C380	C0	1
C1	C381	C1	1
C2	C382	C2	1
C3	C383	C3	1
C4	C384	C4	1
C5	C385	C5	1
C6	C386	C6	1
C7	C387	C7	1
C8	C388	C8	1
C9	C389	C9	1
CA	C38A	CA	1
CB	C38B	CB	1
CC	C38C	CC	1
CD	C38D	CD	1
CE	C38E	CE	1
CF	C38F	CF	1
D0	C390	D0	1
D1	C391	D1	1
D2	C392	D2	1
D3	C393	D3	1
D4	C394	D4	1
D5	C395	D5	1
D6	C396	D6	1
D7	C397	D7	1
D8	C398	D8	1
D9	C399	D9	1
DA	C39A	DA	1
DB	C39B	DB	1
DC	C39C	DC	1
DD	C39D	DD	1
DE	C39E	DE	1
DF	C39F	DF	1
E0	C3A0	E0	1
E1	C3A1	E1	1
E2	C3A2	E2	1
E3	C3A3	E3	1
E4	C3A4	E4	1
E5	C3A5	E5	1
E6	C3A6	E6	1
E7	C3A7	E7	1
E8	C3A8	E8	1
E9	C3A9	E9	1
EA	C3AA	EA	1
EB	C3AB	EB	1
EC	C3AC	EC	1
ED	C3AD	ED	1
EE	C3AE	EE	1
EF	C3AF	EF	1
F0	C3B0	F0	1
F1	C3B1	F1	1
F2	C3B2	F2	1
F3	C3B3	F3	1
F4	C3B4	F4	1
F5	C3B5	F5	1
F6	C3B6	F6	1
F7	C3B7	F7	1
F8	C3B8	F8	1
F9	C3B9	F9	1
FA	C3BA	FA	1
FB	C3BB	FB	1
FC	C3BC	FC	1
FD	C3BD	FD	1
FE	C3BE	FE	1
FF	C3BF	FF	1
DROP TABLE t1;
SELECT 1 as ƒ, 2 as Š, 3 as Œ, 4 as Ž, 5 as š, 6 as œ, 7 as ž, 8 as Ÿ;
ƒ	Š	Œ	Ž	š	œ	ž	Ÿ
1	2	3	4	5	6	7	8
select 'a' regexp 'A' collate latin1_general_ci;
'a' regexp 'A' collate latin1_general_ci
1
select 'a' regexp 'A' collate latin1_general_cs;
'a' regexp 'A' collate latin1_general_cs
0
select 'a' regexp 'A' collate latin1_bin;
'a' regexp 'A' collate latin1_bin
0
SET @test_character_set= 'latin1';
SET @test_collation= 'latin1_swedish_ci';
SET @safe_character_set_server= @@character_set_server;
SET @safe_collation_server= @@collation_server;
SET @safe_character_set_client= @@character_set_client;
SET @safe_character_set_results= @@character_set_results;
SET character_set_server= @test_character_set;
SET collation_server= @test_collation;
CREATE DATABASE d1;
USE d1;
CREATE TABLE t1 (c CHAR(10), KEY(c));
SHOW FULL COLUMNS FROM t1;
Field	Type	Collation	Null	Key	Default	Extra	Privileges	Comment
c	char(10)	latin1_swedish_ci	YES	MUL	NULL			
INSERT INTO t1 VALUES ('aaa'),('aaaa'),('aaaaa');
SELECT c as want3results FROM t1 WHERE c LIKE 'aaa%';
want3results
aaa
aaaa
aaaaa
DROP TABLE t1;
CREATE TABLE t1 (c1 varchar(15), KEY c1 (c1(2)));
SHOW FULL COLUMNS FROM t1;
Field	Type	Collation	Null	Key	Default	Extra	Privileges	Comment
c1	varchar(15)	latin1_swedish_ci	YES	MUL	NULL			
INSERT INTO t1 VALUES ('location'),('loberge'),('lotre'),('boabab');
SELECT c1 as want3results from t1 where c1 like 'l%';
want3results
location
loberge
lotre
SELECT c1 as want3results from t1 where c1 like 'lo%';
want3results
location
loberge
lotre
SELECT c1 as want1result  from t1 where c1 like 'loc%';
want1result
location
SELECT c1 as want1result  from t1 where c1 like 'loca%';
want1result
location
SELECT c1 as want1result  from t1 where c1 like 'locat%';
want1result
location
SELECT c1 as want1result  from t1 where c1 like 'locati%';
want1result
location
SELECT c1 as want1result  from t1 where c1 like 'locatio%';
want1result
location
SELECT c1 as want1result  from t1 where c1 like 'location%';
want1result
location
DROP TABLE t1;
create table t1 (a set('a') not null);
insert ignore into t1 values (),();
Warnings:
Warning	1364	Field 'a' doesn't have a default value
select cast(a as char(1)) from t1;
cast(a as char(1))


select a sounds like a from t1;
a sounds like a
1
1
select 1 from t1 order by cast(a as char(1));
1
1
1
drop table t1;
#
# MDEV-6134 SUBSTRING_INDEX returns wrong result for 8bit character sets when delimiter is not found
#
SET character_set_client=latin1;
SET character_set_connection= @test_character_set;
SET collation_connection= @test_collation;
SELECT COLLATION('.'), SUBSTRING_INDEX('.wwwmysqlcom', '.', -2) AS c1;
COLLATION('.')	c1
latin1_swedish_ci	.wwwmysqlcom
set names utf8;
create table t1 (
name varchar(10),
level smallint unsigned);
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `name` varchar(10) DEFAULT NULL,
  `level` smallint(5) unsigned DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
insert into t1 values ('string',1);
select concat(name,space(level)), concat(name, repeat(' ',level)) from t1;
concat(name,space(level))	concat(name, repeat(' ',level))
string 	string 
drop table t1;
DROP DATABASE d1;
USE test;
SET character_set_server= @safe_character_set_server;
SET collation_server= @safe_collation_server;
SET character_set_client= @safe_character_set_client;
SET character_set_results= @safe_character_set_results;
SET collation_connection='latin1_swedish_ci';
create table t1 select repeat('a',4000) a;
delete from t1;
insert into t1 values ('a'), ('a '), ('a\t');
select collation(a),hex(a) from t1 order by a;
collation(a)	hex(a)
latin1_swedish_ci	6109
latin1_swedish_ci	61
latin1_swedish_ci	6120
drop table t1;
#
# MDEV-5453 Assertion `src' fails in my_strnxfrm_unicode on GROUP BY MID(..) WITH ROLLUP
#
SELECT @@collation_connection;
@@collation_connection
latin1_swedish_ci
CREATE TABLE t1 (i INT) ENGINE=MyISAM;
INSERT INTO t1 VALUES (1),(2);
SELECT * FROM t1 GROUP BY MID(CURRENT_USER,0) WITH ROLLUP;
i
1
1
SELECT * FROM t1 GROUP BY MID('test',0) WITH ROLLUP;
i
1
1
DROP TABLE t1;
#
# MDEV-6170 Incorrect ordering with utf8_bin and utf8mb4_bin collations
#
SELECT @@collation_connection;
@@collation_connection
latin1_swedish_ci
CREATE TABLE t1 ENGINE=MEMORY AS SELECT REPEAT('a',5) AS a LIMIT 0;
INSERT INTO t1 (a) VALUES ("a");
INSERT INTO t1 (a) VALUES ("b");
INSERT INTO t1 (a) VALUES ("c");
INSERT INTO t1 (a) VALUES ("d");
INSERT INTO t1 (a) VALUES ("e");
INSERT INTO t1 (a) VALUES ("f");
INSERT INTO t1 (a) VALUES ("g");
INSERT INTO t1 (a) VALUES ("h");
INSERT INTO t1 (a) VALUES ("i");
INSERT INTO t1 (a) VALUES ("j");
INSERT INTO t1 (a) VALUES ("k");
INSERT INTO t1 (a) VALUES ("l");
INSERT INTO t1 (a) VALUES ("m");
SELECT * FROM t1 ORDER BY LOWER(a);
a
a
b
c
d
e
f
g
h
i
j
k
l
m
SELECT * FROM t1 ORDER BY LOWER(a) DESC;
a
m
l
k
j
i
h
g
f
e
d
c
b
a
DROP TABLE t1;
select @@collation_connection;
@@collation_connection
latin1_swedish_ci
create table t1 ROW_FORMAT=DYNAMIC select repeat('a',50) as c1 ;
insert into t1 values('abcdef');
insert into t1 values('_bcdef');
insert into t1 values('a_cdef');
insert into t1 values('ab_def');
insert into t1 values('abc_ef');
insert into t1 values('abcd_f');
insert into t1 values('abcde_');
select c1 as c1u from t1 where c1 like 'ab\_def';
c1u
ab_def
select c1 as c2h from t1 where c1 like 'ab#_def' escape '#';
c2h
ab_def
drop table t1;
#
# MDEV-4842 STR_TO_DATE does not work with UCS2/UTF16/UTF32
#
SELECT @@character_set_connection, HEX(CAST(_utf8'Ã·' AS CHAR));
@@character_set_connection	HEX(CAST(_utf8'Ã·' AS CHAR))
latin1	F7
SELECT STR_TO_DATE(CAST(_utf8'2001Ã·01Ã·01' AS CHAR),CAST(_utf8'%YÃ·%mÃ·%d' AS CHAR));
STR_TO_DATE(CAST(_utf8'2001Ã·01Ã·01' AS CHAR),CAST(_utf8'%YÃ·%mÃ·%d' AS CHAR))
2001-01-01
CREATE TABLE t1 AS SELECT REPEAT(' ', 64) AS subject, REPEAT(' ',64) AS pattern LIMIT 0;
SHOW COLUMNS FROM t1;
Field	Type	Null	Key	Default	Extra
subject	varchar(64)	YES		NULL	
pattern	varchar(64)	YES		NULL	
INSERT INTO t1 VALUES (_utf8'2001Ã·01Ã·01',_utf8'%YÃ·%mÃ·%d');
SELECT HEX(subject),HEX(pattern),STR_TO_DATE(subject, pattern) FROM t1;
HEX(subject)	HEX(pattern)	STR_TO_DATE(subject, pattern)
32303031F73031F73031	2559F7256DF72564	2001-01-01 00:00:00.000000
DROP TABLE t1;
SELECT strcmp('a','a '),   strcmp('a ','a');
strcmp('a','a ')	strcmp('a ','a')
0	0
SELECT strcmp('a\0','a' ), strcmp('a','a\0');
strcmp('a\0','a' )	strcmp('a','a\0')
-1	1
SELECT strcmp('a\0','a '), strcmp('a ','a\0');
strcmp('a\0','a ')	strcmp('a ','a\0')
-1	1
SELECT strcmp('a\t','a' ), strcmp('a', 'a\t');
strcmp('a\t','a' )	strcmp('a', 'a\t')
-1	1
SELECT strcmp('a\t','a '), strcmp('a ', 'a\t');
strcmp('a\t','a ')	strcmp('a ', 'a\t')
-1	1
SET collation_connection='latin1_bin';
create table t1 select repeat('a',4000) a;
delete from t1;
insert into t1 values ('a'), ('a '), ('a\t');
select collation(a),hex(a) from t1 order by a;
collation(a)	hex(a)
latin1_bin	6109
latin1_bin	61
latin1_bin	6120
drop table t1;
#
# MDEV-5453 Assertion `src' fails in my_strnxfrm_unicode on GROUP BY MID(..) WITH ROLLUP
#
SELECT @@collation_connection;
@@collation_connection
latin1_bin
CREATE TABLE t1 (i INT) ENGINE=MyISAM;
INSERT INTO t1 VALUES (1),(2);
SELECT * FROM t1 GROUP BY MID(CURRENT_USER,0) WITH ROLLUP;
i
1
1
SELECT * FROM t1 GROUP BY MID('test',0) WITH ROLLUP;
i
1
1
DROP TABLE t1;
#
# MDEV-6170 Incorrect ordering with utf8_bin and utf8mb4_bin collations
#
SELECT @@collation_connection;
@@collation_connection
latin1_bin
CREATE TABLE t1 ENGINE=MEMORY AS SELECT REPEAT('a',5) AS a LIMIT 0;
INSERT INTO t1 (a) VALUES ("a");
INSERT INTO t1 (a) VALUES ("b");
INSERT INTO t1 (a) VALUES ("c");
INSERT INTO t1 (a) VALUES ("d");
INSERT INTO t1 (a) VALUES ("e");
INSERT INTO t1 (a) VALUES ("f");
INSERT INTO t1 (a) VALUES ("g");
INSERT INTO t1 (a) VALUES ("h");
INSERT INTO t1 (a) VALUES ("i");
INSERT INTO t1 (a) VALUES ("j");
INSERT INTO t1 (a) VALUES ("k");
INSERT INTO t1 (a) VALUES ("l");
INSERT INTO t1 (a) VALUES ("m");
SELECT * FROM t1 ORDER BY LOWER(a);
a
a
b
c
d
e
f
g
h
i
j
k
l
m
SELECT * FROM t1 ORDER BY LOWER(a) DESC;
a
m
l
k
j
i
h
g
f
e
d
c
b
a
DROP TABLE t1;
select @@collation_connection;
@@collation_connection
latin1_bin
create table t1 ROW_FORMAT=DYNAMIC select repeat('a',50) as c1 ;
insert into t1 values('abcdef');
insert into t1 values('_bcdef');
insert into t1 values('a_cdef');
insert into t1 values('ab_def');
insert into t1 values('abc_ef');
insert into t1 values('abcd_f');
insert into t1 values('abcde_');
select c1 as c1u from t1 where c1 like 'ab\_def';
c1u
ab_def
select c1 as c2h from t1 where c1 like 'ab#_def' escape '#';
c2h
ab_def
drop table t1;
SELECT strcmp('a','a '),   strcmp('a ','a');
strcmp('a','a ')	strcmp('a ','a')
0	0
SELECT strcmp('a\0','a' ), strcmp('a','a\0');
strcmp('a\0','a' )	strcmp('a','a\0')
-1	1
SELECT strcmp('a\0','a '), strcmp('a ','a\0');
strcmp('a\0','a ')	strcmp('a ','a\0')
-1	1
SELECT strcmp('a\t','a' ), strcmp('a', 'a\t');
strcmp('a\t','a' )	strcmp('a', 'a\t')
-1	1
SELECT strcmp('a\t','a '), strcmp('a ', 'a\t');
strcmp('a\t','a ')	strcmp('a ', 'a\t')
-1	1
CREATE TABLE „a (a int);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '„a (a int)' at line 1
SELECT '„a' as str;
str
„a
set @str= _latin1 'ABC €°§ß²³µ~ äöüÄÖÜ áéíóú ÀÈÌÒÙ @ abc';
SELECT convert(@str collate latin1_bin using utf8);
convert(@str collate latin1_bin using utf8)
ABC €°§ß²³µ~ äöüÄÖÜ áéíóú ÀÈÌÒÙ @ abc
SELECT convert(@str collate latin1_general_ci using utf8);
convert(@str collate latin1_general_ci using utf8)
ABC €°§ß²³µ~ äöüÄÖÜ áéíóú ÀÈÌÒÙ @ abc
SELECT convert(@str collate latin1_german1_ci using utf8);
convert(@str collate latin1_german1_ci using utf8)
ABC €°§ß²³µ~ äöüÄÖÜ áéíóú ÀÈÌÒÙ @ abc
SELECT convert(@str collate latin1_danish_ci using utf8);
convert(@str collate latin1_danish_ci using utf8)
ABC €°§ß²³µ~ äöüÄÖÜ áéíóú ÀÈÌÒÙ @ abc
SELECT convert(@str collate latin1_spanish_ci using utf8);
convert(@str collate latin1_spanish_ci using utf8)
ABC €°§ß²³µ~ äöüÄÖÜ áéíóú ÀÈÌÒÙ @ abc
SELECT convert(@str collate latin1_german2_ci using utf8);
convert(@str collate latin1_german2_ci using utf8)
ABC €°§ß²³µ~ äöüÄÖÜ áéíóú ÀÈÌÒÙ @ abc
SELECT convert(@str collate latin1_swedish_ci using utf8);
convert(@str collate latin1_swedish_ci using utf8)
ABC €°§ß²³µ~ äöüÄÖÜ áéíóú ÀÈÌÒÙ @ abc
SET NAMES latin1;
DROP TABLE IF EXISTS `abcÿdef`;
CREATE TABLE `abcÿdef` (i int);
INSERT INTO `abcÿdef` VALUES (1);
INSERT INTO abcÿdef VALUES (2);
SELECT * FROM `abcÿdef`;
i
1
2
SELECT * FROM abcÿdef;
i
1
2
DROP TABLE `abcÿdef`;
select hex(cast(_ascii 0x7f as char(1) character set latin1));
hex(cast(_ascii 0x7f as char(1) character set latin1))
7F
End of 5.0 tests
#
# Bug#58022 ... like ... escape export_set ( ... ) crashes when export_set returns warnings
#
SELECT '' LIKE '' ESCAPE EXPORT_SET(1, 1, 1, 1, '');
'' LIKE '' ESCAPE EXPORT_SET(1, 1, 1, 1, '')
1
Warnings:
Warning	1292	Truncated incorrect INTEGER value: ''
End of 5.1 tests
#
# Start of 5.5 tests
#
SET TIME_ZONE = _latin1 '+03:00';
#
# Start of WL#2649 Number-to-string conversions
#
select hex(concat(1));
hex(concat(1))
31
create table t1 as select concat(1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select hex(c1) from t1;
hex(c1)
31
drop table t1;
select hex(concat(18446744073709551615));
hex(concat(18446744073709551615))
3138343436373434303733373039353531363135
create table t1 as select concat(18446744073709551615) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(20) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select hex(c1) from t1;
hex(c1)
3138343436373434303733373039353531363135
drop table t1;
select hex(concat(1.1));
hex(concat(1.1))
312E31
create table t1 as select concat(1.1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select hex(c1) from t1;
hex(c1)
312E31
drop table t1;
select hex(concat('a', 1+2)), charset(concat(1+2));
hex(concat('a', 1+2))	charset(concat(1+2))
6133	latin1
create table t1 as select concat(1+2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(1-2));
hex(concat(1-2))
2D31
create table t1 as select concat(1-2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(1*2));
hex(concat(1*2))
32
create table t1 as select concat(1*2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(1/2));
hex(concat(1/2))
302E35303030
create table t1 as select concat(1/2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(7) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(1 div 2));
hex(concat(1 div 2))
30
create table t1 as select concat(1 div 2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(1 % 2));
hex(concat(1 % 2))
31
create table t1 as select concat(1 % 2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(-1));
hex(concat(-1))
2D31
create table t1 as select concat(-1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(-(1+2)));
hex(concat(-(1+2)))
2D33
create table t1 as select concat(-(1+2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(1|2));
hex(concat(1|2))
33
create table t1 as select concat(1|2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(1&2));
hex(concat(1&2))
30
create table t1 as select concat(1&2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(bit_count(12)));
hex(concat(bit_count(12)))
32
create table t1 as select concat(bit_count(12)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(2<<1));
hex(concat(2<<1))
34
create table t1 as select concat(2<<1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(2>>1));
hex(concat(2>>1))
31
create table t1 as select concat(2>>1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(~0));
hex(concat(~0))
3138343436373434303733373039353531363135
create table t1 as select concat(~0) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(3^2));
hex(concat(3^2))
31
create table t1 as select concat(3^2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(abs(-2)));
hex(concat(abs(-2)))
32
create table t1 as select concat(abs(-2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(exp(2)),1));
hex(left(concat(exp(2)),1))
37
create table t1 as select concat(exp(2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(log(2)),1));
hex(left(concat(log(2)),1))
30
create table t1 as select concat(log(2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(log2(2)),1));
hex(left(concat(log2(2)),1))
31
create table t1 as select concat(log2(2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(log10(2)),1));
hex(left(concat(log10(2)),1))
30
create table t1 as select concat(log10(2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(sqrt(2)),1));
hex(left(concat(sqrt(2)),1))
31
create table t1 as select concat(sqrt(2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(pow(2,2)),1));
hex(left(concat(pow(2,2)),1))
34
create table t1 as select concat(pow(2,2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(acos(0.5)),1));
hex(left(concat(acos(0.5)),1))
31
create table t1 as select concat(acos(0.5)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(asin(0.5)),1));
hex(left(concat(asin(0.5)),1))
30
create table t1 as select concat(asin(0.5)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(atan(0.5)),1));
hex(left(concat(atan(0.5)),1))
30
create table t1 as select concat(atan(0.5)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(cos(0.5)),1));
hex(left(concat(cos(0.5)),1))
30
create table t1 as select concat(cos(0.5)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(sin(0.5)),1));
hex(left(concat(sin(0.5)),1))
30
create table t1 as select concat(sin(0.5)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(tan(0.5)),1));
hex(left(concat(tan(0.5)),1))
30
create table t1 as select concat(tan(0.5)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(degrees(0)));
hex(concat(degrees(0)))
30
create table t1 as select concat(degrees(0)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(radians(0)));
hex(concat(radians(0)))
30
create table t1 as select concat(radians(0)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(ceiling(0.5)));
hex(concat(ceiling(0.5)))
31
create table t1 as select concat(ceiling(0.5)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(floor(0.5)));
hex(concat(floor(0.5)))
30
create table t1 as select concat(floor(0.5)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(round(0.5)));
hex(concat(round(0.5)))
31
create table t1 as select concat(round(0.5)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(sign(0.5)));
hex(concat(sign(0.5)))
31
create table t1 as select concat(sign(0.5)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(rand()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(length('a')));
hex(concat(length('a')))
31
create table t1 as select concat(length('a')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(char_length('a')));
hex(concat(char_length('a')))
31
create table t1 as select concat(char_length('a')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(bit_length('a')));
hex(concat(bit_length('a')))
38
create table t1 as select concat(bit_length('a')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(coercibility('a')));
hex(concat(coercibility('a')))
34
create table t1 as select concat(coercibility('a')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(locate('a','a')));
hex(concat(locate('a','a')))
31
create table t1 as select concat(locate('a','a')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(field('c','a','b','c')));
hex(concat(field('c','a','b','c')))
33
create table t1 as select concat(field('c','a','b','c')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(ascii(61)));
hex(concat(ascii(61)))
3534
create table t1 as select concat(ascii(61)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(ord(61)));
hex(concat(ord(61)))
3534
create table t1 as select concat(ord(61)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(find_in_set('b','a,b,c,d')));
hex(concat(find_in_set('b','a,b,c,d')))
32
create table t1 as select concat(find_in_set('b','a,b,c,d')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select md5('a'), hex(md5('a'));
md5('a')	hex(md5('a'))
0cc175b9c0f1b6a831c399e269772661	3063633137356239633066316236613833316333393965323639373732363631
create table t1 as select md5('a') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(32) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select old_password('a'), hex(old_password('a'));
old_password('a')	hex(old_password('a'))
60671c896665c3fa	36303637316338393636363563336661
create table t1 as select old_password('a') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(16) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select password('a'), hex(password('a'));
password('a')	hex(password('a'))
*667F407DE7C6AD07358FA38DAED7828A72014B4E	2A36363746343037444537433641443037333538464133384441454437383238413732303134423445
create table t1 as select password('a') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(41) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select sha('a'), hex(sha('a'));
sha('a')	hex(sha('a'))
86f7e437faa5a7fce15d1ddcb9eaeaea377667b8	38366637653433376661613561376663653135643164646362396561656165613337373636376238
create table t1 as select sha('a') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(40) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select sha1('a'), hex(sha1('a'));
sha1('a')	hex(sha1('a'))
86f7e437faa5a7fce15d1ddcb9eaeaea377667b8	38366637653433376661613561376663653135643164646362396561656165613337373636376238
create table t1 as select sha1('a') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(40) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(cast('-1' as signed)));
hex(concat(cast('-1' as signed)))
2D31
create table t1 as select concat(cast('-1' as signed)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(cast('1' as unsigned)));
hex(concat(cast('1' as unsigned)))
31
create table t1 as select concat(cast('1' as unsigned)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(cast(1/2 as decimal(5,5))));
hex(concat(cast(1/2 as decimal(5,5))))
302E3530303030
create table t1 as select concat(cast(1/2 as decimal(5,5))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(7) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(cast('2001-01-02 03:04:05' as date)));
hex(concat(cast('2001-01-02 03:04:05' as date)))
323030312D30312D3032
create table t1 as select concat(cast('2001-01-02 03:04:05' as date)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select * from t1;
c1
2001-01-02
drop table t1;
select hex(concat(cast('2001-01-02 03:04:05' as time)));
hex(concat(cast('2001-01-02 03:04:05' as time)))
30333A30343A3035
create table t1 as select concat(cast('2001-01-02 03:04:05' as time)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select * from t1;
c1
03:04:05
drop table t1;
select hex(concat(cast('2001-01-02' as datetime)));
hex(concat(cast('2001-01-02' as datetime)))
323030312D30312D30322030303A30303A3030
create table t1 as select concat(cast('2001-01-02' as datetime)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(19) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select * from t1;
c1
2001-01-02 00:00:00
drop table t1;
select hex(concat(least(1,2)));
hex(concat(least(1,2)))
31
create table t1 as select concat(least(1,2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(greatest(1,2)));
hex(concat(greatest(1,2)))
32
create table t1 as select concat(greatest(1,2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(case when 11 then 22 else 33 end));
hex(concat(case when 11 then 22 else 33 end))
3232
create table t1 as select concat(case when 11 then 22 else 33 end) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(coalesce(1,2)));
hex(concat(coalesce(1,2)))
31
create table t1 as select concat(coalesce(1,2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat_ws(1,2,3));
hex(concat_ws(1,2,3))
323133
create table t1 as select concat_ws(1,2,3) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(group_concat(1,2,3));
hex(group_concat(1,2,3))
313233
create table t1 as select group_concat(1,2,3) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` mediumtext DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select 1 as c1 union select 'a';
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) NOT NULL DEFAULT ''
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select hex(c1) from t1 order by c1;
hex(c1)
31
61
drop table t1;
create table t1 as select concat(last_insert_id()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(benchmark(0,0)));
hex(concat(benchmark(0,0)))
30
create table t1 as select concat(benchmark(0,0)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(sleep(0)));
hex(concat(sleep(0)))
30
create table t1 as select concat(sleep(0)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(is_free_lock('xxxx')));
hex(concat(is_free_lock('xxxx')))
31
create table t1 as select concat(is_free_lock('xxxx')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(is_used_lock('a')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(release_lock('a')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(crc32('')));
hex(concat(crc32('')))
30
create table t1 as select concat(crc32('')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(uncompressed_length('')));
hex(concat(uncompressed_length('')))
30
create table t1 as select concat(uncompressed_length('')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(connection_id()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(inet_aton('127.1.1.1')));
hex(concat(inet_aton('127.1.1.1')))
32313330373732323235
create table t1 as select concat(inet_aton('127.1.1.1')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(inet_ntoa(2130772225)));
hex(concat(inet_ntoa(2130772225)))
3132372E312E312E31
create table t1 as select concat(inet_ntoa(2130772225)) as c1;
select * from t1;
c1
127.1.1.1
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(31) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select 1;
1
1
select hex(concat(row_count()));
hex(concat(row_count()))
2D31
create table t1 as select concat(row_count()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(found_rows()));
hex(concat(found_rows()))
30
create table t1 as select concat(found_rows()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(uuid_short()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(uuid()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(36) CHARACTER SET utf8 DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select coercibility(uuid()), coercibility(cast('a' as char character set latin1));
coercibility(uuid())	coercibility(cast('a' as char character set latin1))
4	2
select charset(concat(uuid(), cast('a' as char character set latin1)));
charset(concat(uuid(), cast('a' as char character set latin1)))
latin1
create table t1 as select concat(uuid(), cast('a' as char character set latin1)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(37) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(master_pos_wait('non-existent',0,2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(@a1:=1));
hex(concat(@a1:=1))
31
create table t1 as select concat(@a2:=2) as c1, @a3:=3 as c2;
select hex(c1) from t1;
hex(c1)
32
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL,
  `c2` int(1) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
set @a2=1;
select hex(concat(@a2));
hex(concat(@a2))
31
create table t1 as select concat(@a2) as c1, @a2 as c2;
select hex(c1) from t1;
hex(c1)
31
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(20) DEFAULT NULL,
  `c2` bigint(20) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(@a1:=sqrt(1)));
hex(concat(@a1:=sqrt(1)))
31
create table t1 as select concat(@a2:=sqrt(1)) as c1, @a3:=sqrt(1) as c2;
select hex(c1) from t1;
hex(c1)
31
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL,
  `c2` double DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
set @a2=sqrt(1);
select hex(concat(@a2));
hex(concat(@a2))
31
create table t1 as select concat(@a2) as c1, @a2 as c2;
select hex(c1) from t1;
hex(c1)
31
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL,
  `c2` double DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(@a1:=1.1));
hex(concat(@a1:=1.1))
312E31
create table t1 as select concat(@a2:=1.1) as c1, @a3:=1.1 as c2;
select hex(c1) from t1;
hex(c1)
312E31
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(4) DEFAULT NULL,
  `c2` decimal(2,1) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
set @a2=1.1;
select hex(concat(@a2));
hex(concat(@a2))
312E31
create table t1 as select concat(@a2) as c1, @a2 as c2;
select hex(c1) from t1;
hex(c1)
312E31
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(83) DEFAULT NULL,
  `c2` decimal(65,38) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(@@ft_max_word_len));
hex(concat(@@ft_max_word_len))
3834
create table t1 as select concat(@@ft_max_word_len) as c1;
select hex(c1) from t1;
hex(c1)
3834
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat('a'='a' IS TRUE));
hex(concat('a'='a' IS TRUE))
31
create table t1 as select concat('a'='a' IS TRUE) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat('a'='a' IS NOT TRUE));
hex(concat('a'='a' IS NOT TRUE))
30
create table t1 as select concat('a'='a' IS NOT TRUE) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(NOT 'a'='a'));
hex(concat(NOT 'a'='a'))
30
create table t1 as select concat(NOT 'a'='a') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat('a' IS NULL));
hex(concat('a' IS NULL))
30
create table t1 as select concat('a' IS NULL) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat('a' IS NOT NULL));
hex(concat('a' IS NOT NULL))
31
create table t1 as select concat('a' IS NOT NULL) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat('a' rlike 'a'));
hex(concat('a' rlike 'a'))
31
create table t1 as select concat('a' IS NOT NULL) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(strcmp('a','b')));
hex(concat(strcmp('a','b')))
2D31
create table t1 as select concat(strcmp('a','b')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat('a' like 'a'));
hex(concat('a' like 'a'))
31
create table t1 as select concat('a' like 'b') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat('a' between 'b' and 'c'));
hex(concat('a' between 'b' and 'c'))
30
create table t1 as select concat('a' between 'b' and 'c') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat('a' in ('a','b')));
hex(concat('a' in ('a','b')))
31
create table t1 as select concat('a' in ('a','b')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(interval(23, 1, 15, 17, 30, 44, 200)));
hex(concat(interval(23, 1, 15, 17, 30, 44, 200)))
33
create table t1 as select concat(interval(23, 1, 15, 17, 30, 44, 200)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 (a varchar(10), fulltext key(a));
insert into t1 values ('a');
select hex(concat(match (a) against ('a'))) from t1;
hex(concat(match (a) against ('a')))
30
create table t2 as select concat(match (a) against ('a')) as a from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `a` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
select hex(ifnull(1,'a'));
hex(ifnull(1,'a'))
31
create table t1 as select ifnull(1,'a') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(ifnull(1,1)));
hex(concat(ifnull(1,1)))
31
create table t1 as select concat(ifnull(1,1)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(ifnull(1.1,1.1)));
hex(concat(ifnull(1.1,1.1)))
312E31
create table t1 as select concat(ifnull(1.1,1.1)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(if(1,'b',1));
hex(if(1,'b',1))
62
create table t1 as select if(1,'b',1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(if(1,1,'b'));
hex(if(1,1,'b'))
31
create table t1 as select if(1,1,'b') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(if(1,1,1)));
hex(concat(if(1,1,1)))
31
create table t1 as select concat(if(1,1,1)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(nullif(1,2)));
hex(concat(nullif(1,2)))
31
create table t1 as select concat(nullif(1,2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(Dimension(GeomFromText('LINESTRING(0 0,10 10)'))));
hex(concat(Dimension(GeomFromText('LINESTRING(0 0,10 10)'))))
31
create table t1 as select concat(Dimension(GeomFromText('LINSTRING(0 0,10 10)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(NumGeometries(MultiPointFromText('MULTIPOINT(0 0,10 10)'))));
hex(concat(NumGeometries(MultiPointFromText('MULTIPOINT(0 0,10 10)'))))
32
create table t1 as select concat(NumGeometries(MultiPointFromText('MULTIPOINT(0 0,10 10)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(NumPoints(MultiPointFromText('LINESTRING(0 0,10 10)'))));
hex(concat(NumPoints(MultiPointFromText('LINESTRING(0 0,10 10)'))))
32
create table t1 as select concat(NumPoints(MultiPointFromText('LINESTRING(0 0,10 10)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(SRID(MultiPointFromText('MULTIPOINT(0 0,10 10)'))));
hex(concat(SRID(MultiPointFromText('MULTIPOINT(0 0,10 10)'))))
30
create table t1 as select concat(SRID(MultiPointFromText('MULTIPOINT(0 0,10 10)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(NumInteriorRings(PolygonFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10 20,10 10))'))));
hex(concat(NumInteriorRings(PolygonFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10 20,10 10))'))))
31
create table t1 as select concat(NumInteriorRings(PolygonFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10 20,10 10))'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(IsEmpty(GeomFromText('POINT(1 1)'))));
hex(concat(IsEmpty(GeomFromText('POINT(1 1)'))))
30
create table t1 as select concat(IsEmpty(GeomFromText('Point(1 1)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(IsSimple(GeomFromText('POINT(1 1)'))));
hex(concat(IsSimple(GeomFromText('POINT(1 1)'))))
31
create table t1 as select concat(IsSimple(GeomFromText('Point(1 1)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(IsClosed(GeomFromText('LineString(1 1,2 2)'))));
hex(concat(IsClosed(GeomFromText('LineString(1 1,2 2)'))))
30
create table t1 as select concat(IsClosed(GeomFromText('LineString(1 1,2 2)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(Equals(GeomFromText('Point(1 1)'),GeomFromText('Point(1 1)'))));
hex(concat(Equals(GeomFromText('Point(1 1)'),GeomFromText('Point(1 1)'))))
31
create table t1 as select concat(Equals(GeomFromText('Point(1 1)'),GeomFromText('Point(1 1)'))) as c1;
drop table t1;
select hex(concat(x(GeomFromText('Point(1 2)'))));
hex(concat(x(GeomFromText('Point(1 2)'))))
31
create table t1 as select concat(x(GeomFromText('Point(1 2)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(y(GeomFromText('Point(1 2)'))));
hex(concat(y(GeomFromText('Point(1 2)'))))
32
create table t1 as select concat(x(GeomFromText('Point(1 2)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(GLength(GeomFromText('LineString(1 2,2 2)'))));
hex(concat(GLength(GeomFromText('LineString(1 2,2 2)'))))
31
create table t1 as select concat(GLength(GeomFromText('LineString(1 2, 2 2)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(Area(GeomFromText('Polygon((0 0,1 0,1 1,0 1,0 0))'))));
hex(concat(Area(GeomFromText('Polygon((0 0,1 0,1 1,0 1,0 0))'))))
31
create table t1 as select concat(Area(GeomFromText('Polygon((0 0,1 0,1 1,0 1,0 0))'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(23) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(GeometryType(GeomFromText('Point(1 2)'))));
hex(concat(GeometryType(GeomFromText('Point(1 2)'))))
504F494E54
create table t1 as select concat(GeometryType(GeomFromText('Point(1 2)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(20) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(AsText(GeomFromText('Point(1 2)'))));
hex(concat(AsText(GeomFromText('Point(1 2)'))))
504F494E542831203229
create table t1 as select concat(AsText(GeomFromText('Point(1 2)'))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` longtext DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(period_add(200902, 2)));
hex(concat(period_add(200902, 2)))
323030393034
create table t1 as select concat(period_add(200902, 2)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(6) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(period_diff(200902, 200802)));
hex(concat(period_diff(200902, 200802)))
3132
SET STATEMENT sql_mode = 'NO_ENGINE_SUBSTITUTION' FOR
create table t1 as select concat(period_add(200902, 200802)) as c1;
Warnings:
Warning	1265	Data truncated for column 'c1' at row 1
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(6) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(to_days(20090224)));
hex(concat(to_days(20090224)))
373333383237
create table t1 as select concat(to_days(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(6) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(dayofmonth(20090224)));
hex(concat(dayofmonth(20090224)))
3234
create table t1 as select concat(dayofmonth(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(dayofyear(20090224)));
hex(concat(dayofyear(20090224)))
3535
create table t1 as select concat(dayofyear(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(hour('10:11:12')));
hex(concat(hour('10:11:12')))
3130
create table t1 as select concat(hour('10:11:12')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(minute('10:11:12')));
hex(concat(minute('10:11:12')))
3131
create table t1 as select concat(minute('10:11:12')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(second('10:11:12')));
hex(concat(second('10:11:12')))
3132
create table t1 as select concat(second('10:11:12')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(quarter(20090224)));
hex(concat(quarter(20090224)))
31
create table t1 as select concat(quarter(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(week(20090224)));
hex(concat(week(20090224)))
38
create table t1 as select concat(week(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(yearweek(20090224)));
hex(concat(yearweek(20090224)))
323030393038
create table t1 as select concat(yearweek(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(6) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(year(20090224)));
hex(concat(year(20090224)))
32303039
create table t1 as select concat(year(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(weekday(20090224)));
hex(concat(weekday(20090224)))
31
create table t1 as select concat(weekday(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(dayofweek(20090224)));
hex(concat(dayofweek(20090224)))
33
create table t1 as select concat(dayofweek(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(unix_timestamp(20090224)));
hex(concat(unix_timestamp(20090224)))
31323335343232383030
create table t1 as select concat(unix_timestamp(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(17) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(time_to_sec('10:11:12')));
hex(concat(time_to_sec('10:11:12')))
3336363732
create table t1 as select concat(time_to_sec('10:11:12')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(17) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(extract(year from 20090702)));
hex(concat(extract(year from 20090702)))
32303039
create table t1 as select concat(extract(year from 20090702)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(microsecond('12:00:00.123456')));
hex(concat(microsecond('12:00:00.123456')))
313233343536
create table t1 as select concat(microsecond('12:00:00.123456')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(21) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(month(20090224)));
hex(concat(month(20090224)))
32
create table t1 as select concat(month(20090224)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(last_day('2003-02-05')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select c1, hex(c1) from t1;
c1	hex(c1)
2003-02-28	323030332D30322D3238
drop table t1;
create table t1 as select concat(from_days(730669)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select c1, hex(c1) from t1;
c1	hex(c1)
2000-07-03	323030302D30372D3033
drop table t1;
create table t1 as select concat(curdate()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(utc_date()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(curtime()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select repeat('a',20) as c1 limit 0;
set timestamp=1216359724;
insert into t1 values (current_date);
insert into t1 values (current_time);
select c1, hex(c1) from t1;
c1	hex(c1)
2008-07-18	323030382D30372D3138
08:42:04	30383A34323A3034
drop table t1;
create table t1 as select concat(utc_time()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(sec_to_time(2378)));
hex(concat(sec_to_time(2378)))
30303A33393A3338
create table t1 as select concat(sec_to_time(2378)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(timediff('2001-01-02 00:00:00', '2001-01-01 00:00:00')));
hex(concat(timediff('2001-01-02 00:00:00', '2001-01-01 00:00:00')))
32343A30303A3030
create table t1 as select concat(timediff('2001-01-02 00:00:00', '2001-01-01 00:00:00')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(maketime(10,11,12)));
hex(concat(maketime(10,11,12)))
31303A31313A3132
create table t1 as select concat(maketime(10,11,12)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(get_format(DATE,'USA'));
hex(get_format(DATE,'USA'))
256D2E25642E2559
create table t1 as select get_format(DATE,'USA') as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(17) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(concat(from_unixtime(1111885200)),4));
hex(left(concat(from_unixtime(1111885200)),4))
32303035
create table t1 as select concat(from_unixtime(1111885200)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(19) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(convert_tz('2004-01-01 12:00:00','+10:00','-6:00')));
hex(concat(convert_tz('2004-01-01 12:00:00','+10:00','-6:00')))
323030332D31322D33312032303A30303A3030
create table t1 as select concat(convert_tz('2004-01-01 12:00:00','+10:00','-6:00')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(19) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(date_add('2004-01-01 12:00:00', interval 1 day)));
hex(concat(date_add('2004-01-01 12:00:00', interval 1 day)))
323030342D30312D30322031323A30303A3030
create table t1 as select concat(date_add('2004-01-01 12:00:00', interval 1 day)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(19) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select * from t1;
c1
2004-01-02 12:00:00
drop table t1;
select hex(concat(makedate(2009,1)));
hex(concat(makedate(2009,1)))
323030392D30312D3031
create table t1 as select concat(makedate(2009,1)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
select * from t1;
c1
2009-01-01
drop table t1;
create table t1 as select concat(now()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(19) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(utc_timestamp()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(19) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(sysdate()) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(19) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(addtime('00:00:00','11:22:33')));
hex(concat(addtime('00:00:00','11:22:33')))
31313A32323A3333
create table t1 as select concat(addtime('00:00:00','11:22:33')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(26) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(concat(subtime('23:59:59','11:22:33')));
hex(concat(subtime('23:59:59','11:22:33')))
31323A33373A3236
create table t1 as select concat(subtime('23:59:59','11:22:33')) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(26) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(elt(1,2,3));
hex(elt(1,2,3))
32
create table t1 as select elt(1,2,3) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(export_set(1,2,3,4,2));
hex(export_set(1,2,3,4,2))
323433
create table t1 as select export_set(1,2,3,4,2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(127) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(insert(1133,3,0,22));
hex(insert(1133,3,0,22))
313132323333
create table t1 as select insert(1133,3,0,22) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(6) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(lcase(123));
hex(lcase(123))
313233
create table t1 as select lcase(123) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(left(123,1));
hex(left(123,1))
31
create table t1 as select left(123,1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(lower(123));
hex(lower(123))
313233
create table t1 as select lower(123) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(lpad(1,2,0));
hex(lpad(1,2,0))
3031
create table t1 as select lpad(1,2,0) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(ltrim(1));
hex(ltrim(1))
31
create table t1 as select ltrim(1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(mid(1,1,1));
hex(mid(1,1,1))
31
create table t1 as select mid(1,1,1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(repeat(1,2));
hex(repeat(1,2))
3131
create table t1 as select repeat(1,2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(replace(1,1,2));
hex(replace(1,1,2))
32
create table t1 as select replace(1,1,2) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(reverse(12));
hex(reverse(12))
3231
create table t1 as select reverse(12) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(right(123,1));
hex(right(123,1))
33
create table t1 as select right(123,1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(rpad(1,2,0));
hex(rpad(1,2,0))
3130
create table t1 as select rpad(1,2,0) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(rtrim(1));
hex(rtrim(1))
31
create table t1 as select rtrim(1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(soundex(1));
hex(soundex(1))

create table t1 as select soundex(1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(substring(1,1,1));
hex(substring(1,1,1))
31
create table t1 as select substring(1,1,1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(trim(1));
hex(trim(1))
31
create table t1 as select trim(1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(ucase(1));
hex(ucase(1))
31
create table t1 as select ucase(1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
select hex(upper(1));
hex(upper(1))
31
create table t1 as select upper(1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select repeat(' ', 64) as a limit 0;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(64) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
insert into t1 values ("1.1"), ("2.1");
select a, hex(a) from t1;
a	hex(a)
1.1	312E31
2.1	322E31
update t1 set a= a + 0.1;
select a, hex(a) from t1;
a	hex(a)
1.2000000000000002	312E32303030303030303030303030303032
2.2	322E32
drop table t1;
create table t1 (a tinyint);
insert into t1 values (1);
select hex(concat(a)) from t1;
hex(concat(a))
31
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a tinyint zerofill);
insert into t1 values (1), (10), (100);
select hex(concat(a)), a from t1;
hex(concat(a))	a
303031	001
303130	010
313030	100
drop table t1;
create table t1 (a tinyint(4) zerofill);
insert into t1 values (1), (10), (100);
select hex(concat(a)), a from t1;
hex(concat(a))	a
30303031	0001
30303130	0010
30313030	0100
drop table t1;
create table t1 (a decimal(10,2));
insert into t1 values (123.45);
select hex(concat(a)) from t1;
hex(concat(a))
3132332E3435
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(12) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a smallint);
insert into t1 values (1);
select hex(concat(a)) from t1;
hex(concat(a))
31
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(6) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a smallint zerofill);
insert into t1 values (1), (10), (100), (1000), (10000);
select hex(concat(a)), a from t1;
hex(concat(a))	a
3030303031	00001
3030303130	00010
3030313030	00100
3031303030	01000
3130303030	10000
drop table t1;
create table t1 (a mediumint);
insert into t1 values (1);
select hex(concat(a)) from t1;
hex(concat(a))
31
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(9) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a mediumint zerofill);
insert into t1 values (1), (10), (100), (1000), (10000);
select hex(concat(a)), a from t1;
hex(concat(a))	a
3030303030303031	00000001
3030303030303130	00000010
3030303030313030	00000100
3030303031303030	00001000
3030303130303030	00010000
drop table t1;
create table t1 (a int);
insert into t1 values (1);
select hex(concat(a)) from t1;
hex(concat(a))
31
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a int zerofill);
insert into t1 values (1), (10), (100), (1000), (10000);
select hex(concat(a)), a from t1;
hex(concat(a))	a
30303030303030303031	0000000001
30303030303030303130	0000000010
30303030303030313030	0000000100
30303030303031303030	0000001000
30303030303130303030	0000010000
drop table t1;
create table t1 (a bigint);
insert into t1 values (1);
select hex(concat(a)) from t1;
hex(concat(a))
31
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(20) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a bigint zerofill);
insert into t1 values (1), (10), (100), (1000), (10000);
select hex(concat(a)), a from t1;
hex(concat(a))	a
3030303030303030303030303030303030303031	00000000000000000001
3030303030303030303030303030303030303130	00000000000000000010
3030303030303030303030303030303030313030	00000000000000000100
3030303030303030303030303030303031303030	00000000000000001000
3030303030303030303030303030303130303030	00000000000000010000
drop table t1;
create table t1 (a float);
insert into t1 values (123.456);
select hex(concat(a)) from t1;
hex(concat(a))
3132332E343536
select concat(a) from t1;
concat(a)
123.456
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(12) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a float zerofill);
insert into t1 values (1.1), (10.1), (100.1), (1000.1), (10000.1);
select hex(concat(a)), a from t1;
hex(concat(a))	a
303030303030303030312E31	0000000001.1
303030303030303031302E31	0000000010.1
303030303030303130302E31	0000000100.1
303030303030313030302E31	0000001000.1
303030303031303030302E31	0000010000.1
drop table t1;
create table t1 (a double);
insert into t1 values (123.456);
select hex(concat(a)) from t1;
hex(concat(a))
3132332E343536
select concat(a) from t1;
concat(a)
123.456
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(22) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a double zerofill);
insert into t1 values (1.1), (10.1), (100.1), (1000.1), (10000.1);
select hex(concat(a)), a from t1;
hex(concat(a))	a
30303030303030303030303030303030303030312E31	00000000000000000001.1
30303030303030303030303030303030303031302E31	00000000000000000010.1
30303030303030303030303030303030303130302E31	00000000000000000100.1
30303030303030303030303030303030313030302E31	00000000000000001000.1
30303030303030303030303030303031303030302E31	00000000000000010000.1
drop table t1;
create table t1 (a year(2));
Warnings:
Note	1287	'YEAR(2)' is deprecated and will be removed in a future release. Please use YEAR(4) instead
insert into t1 values (1);
select hex(concat(a)) from t1;
hex(concat(a))
3031
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a year);
insert into t1 values (1);
select hex(concat(a)) from t1;
hex(concat(a))
32303031
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a bit(64));
insert into t1 values (1);
select hex(concat(a)) from t1;
hex(concat(a))
0000000000000001
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varbinary(64) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);
insert into t1 values (0);
insert into t1 values (20010203040506);
insert into t1 values (19800203040506);
insert into t1 values ('2001-02-03 04:05:06');
select hex(concat(a)) from t1;
hex(concat(a))
303030302D30302D30302030303A30303A3030
323030312D30322D30332030343A30353A3036
313938302D30322D30332030343A30353A3036
323030312D30322D30332030343A30353A3036
select concat(a) from t1;
concat(a)
0000-00-00 00:00:00
2001-02-03 04:05:06
1980-02-03 04:05:06
2001-02-03 04:05:06
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(19) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a date);
insert into t1 values ('2001-02-03');
insert into t1 values (20010203);
select hex(concat(a)) from t1;
hex(concat(a))
323030312D30322D3033
323030312D30322D3033
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a time);
insert into t1 values (1);
insert into t1 values ('01:02:03');
select hex(concat(a)) from t1;
hex(concat(a))
30303A30303A3031
30313A30323A3033
select concat(a) from t1;
concat(a)
00:00:01
01:02:03
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a datetime);
insert into t1 values ('2001-02-03 04:05:06');
insert into t1 values (20010203040506);
select hex(concat(a)) from t1;
hex(concat(a))
323030312D30322D30332030343A30353A3036
323030312D30322D30332030343A30353A3036
create table t2 as select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(19) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1 (a tinyint);
insert into t1 values (1);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(4)	YES		NULL	
select hex(a) from v1;
hex(a)
31
drop table t1;
drop view v1;
create table t1 (a tinyint zerofill);
insert into t1 values (1), (10), (100);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(3)	YES		NULL	
select hex(a) from v1;
hex(a)
303031
303130
313030
drop table t1;
drop view v1;
create table t1 (a tinyint(30) zerofill);
insert into t1 values (1), (10), (100);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(30)	YES		NULL	
select hex(a) from v1;
hex(a)
303030303030303030303030303030303030303030303030303030303031
303030303030303030303030303030303030303030303030303030303130
303030303030303030303030303030303030303030303030303030313030
drop table t1;
drop view v1;
create table t1 (a decimal(10,2));
insert into t1 values (123.45);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(12)	YES		NULL	
select hex(a) from v1;
hex(a)
3132332E3435
drop table t1;
drop view v1;
create table t1 (a smallint);
insert into t1 values (1);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(6)	YES		NULL	
select hex(a) from v1;
hex(a)
31
drop table t1;
drop view v1;
create table t1 (a smallint zerofill);
insert into t1 values (1), (10), (100), (1000), (10000);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(5)	YES		NULL	
select hex(a) from v1;
hex(a)
3030303031
3030303130
3030313030
3031303030
3130303030
drop table t1;
drop view v1;
create table t1 (a mediumint);
insert into t1 values (1);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(9)	YES		NULL	
select hex(a) from v1;
hex(a)
31
drop table t1;
drop view v1;
create table t1 (a mediumint zerofill);
insert into t1 values (1), (10), (100), (1000), (10000);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(8)	YES		NULL	
select hex(a) from v1;
hex(a)
3030303030303031
3030303030303130
3030303030313030
3030303031303030
3030303130303030
drop table t1;
drop view v1;
create table t1 (a int);
insert into t1 values (1);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(11)	YES		NULL	
select hex(a) from v1;
hex(a)
31
drop table t1;
drop view v1;
create table t1 (a int zerofill);
insert into t1 values (1), (10), (100), (1000), (10000);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(10)	YES		NULL	
select hex(a) from v1;
hex(a)
30303030303030303031
30303030303030303130
30303030303030313030
30303030303031303030
30303030303130303030
drop table t1;
drop view v1;
create table t1 (a bigint);
insert into t1 values (1);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(20)	YES		NULL	
select hex(a) from v1;
hex(a)
31
drop table t1;
drop view v1;
create table t1 (a bigint zerofill);
insert into t1 values (1), (10), (100), (1000), (10000);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(20)	YES		NULL	
select hex(a) from v1;
hex(a)
3030303030303030303030303030303030303031
3030303030303030303030303030303030303130
3030303030303030303030303030303030313030
3030303030303030303030303030303031303030
3030303030303030303030303030303130303030
drop table t1;
drop view v1;
create table t1 (a float);
insert into t1 values (123.456);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(12)	YES		NULL	
select hex(a) from v1;
hex(a)
3132332E343536
drop table t1;
drop view v1;
create table t1 (a float zerofill);
insert into t1 values (1.1), (10.1), (100.1), (1000.1), (10000.1);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(12)	YES		NULL	
select hex(a) from v1;
hex(a)
303030303030303030312E31
303030303030303031302E31
303030303030303130302E31
303030303030313030302E31
303030303031303030302E31
drop table t1;
drop view v1;
create table t1 (a double);
insert into t1 values (123.456);
select concat(a) from t1;
concat(a)
123.456
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(22)	YES		NULL	
select hex(a) from v1;
hex(a)
3132332E343536
drop table t1;
drop view v1;
create table t1 (a double zerofill);
insert into t1 values (1.1), (10.1), (100.1), (1000.1), (10000.1);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(22)	YES		NULL	
select hex(a) from v1;
hex(a)
30303030303030303030303030303030303030312E31
30303030303030303030303030303030303031302E31
30303030303030303030303030303030303130302E31
30303030303030303030303030303030313030302E31
30303030303030303030303030303031303030302E31
drop table t1;
drop view v1;
create table t1 (a year(2));
Warnings:
Note	1287	'YEAR(2)' is deprecated and will be removed in a future release. Please use YEAR(4) instead
insert into t1 values (1);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(2)	YES		NULL	
select hex(a) from v1;
hex(a)
3031
drop table t1;
drop view v1;
create table t1 (a year);
insert into t1 values (1);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(4)	YES		NULL	
select hex(a) from v1;
hex(a)
32303031
drop table t1;
drop view v1;
create table t1 (a bit(64));
insert into t1 values (1);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varbinary(64)	YES		NULL	
select hex(a) from v1;
hex(a)
0000000000000001
drop table t1;
drop view v1;
create table t1 (a timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);
insert into t1 values (0);
insert into t1 values (20010203040506);
insert into t1 values (19800203040506);
insert into t1 values ('2001-02-03 04:05:06');
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(19)	YES		NULL	
select hex(a) from v1;
hex(a)
303030302D30302D30302030303A30303A3030
323030312D30322D30332030343A30353A3036
313938302D30322D30332030343A30353A3036
323030312D30322D30332030343A30353A3036
drop table t1;
drop view v1;
create table t1 (a date);
insert into t1 values ('2001-02-03');
insert into t1 values (20010203);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(10)	YES		NULL	
select hex(a) from v1;
hex(a)
323030312D30322D3033
323030312D30322D3033
drop table t1;
drop view v1;
create table t1 (a time);
insert into t1 values (1);
insert into t1 values ('01:02:03');
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(10)	YES		NULL	
select hex(a) from v1;
hex(a)
30303A30303A3031
30313A30323A3033
drop table t1;
drop view v1;
create table t1 (a datetime);
insert into t1 values ('2001-02-03 04:05:06');
insert into t1 values (20010203040506);
create view v1(a) as select concat(a) from t1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
a	varchar(19)	YES		NULL	
select hex(a) from v1;
hex(a)
323030312D30322D30332030343A30353A3036
323030312D30322D30332030343A30353A3036
drop table t1;
drop view v1;
create function f1 (par1 int) returns int
begin
return concat(par1);
end|
set @a= f1(1);
select hex(@a);
hex(@a)
1
select hex(concat(f1(1)));
hex(concat(f1(1)))
31
create table t1 as select f1(1) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(f1(1)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
create view v1 as select concat(f1(1)) as c1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
c1	varchar(11)	YES		NULL	
drop table t1;
drop view v1;
drop function f1;
create function f1 (par1 decimal(18,2)) returns decimal(18,2)
begin
return concat(par1);
end|
set @a= f1(123.45);
select hex(@a);
hex(@a)
7B
select hex(concat(f1(123.45)));
hex(concat(f1(123.45)))
3132332E3435
create table t1 as select f1(123.45) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` decimal(18,2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(f1(123.45)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(20) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
create view v1 as select concat(f1(123.45)) as c1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
c1	varchar(20)	YES		NULL	
drop table t1;
drop view v1;
drop function f1;
create function f1 (par1 float) returns float
begin
return concat(par1);
end|
set @a= f1(123.45);
select hex(@a);
hex(@a)
7B
select hex(concat(f1(123.45)));
hex(concat(f1(123.45)))
3132332E3435
create table t1 as select f1(123.45) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` float DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(f1(123.45)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(12) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
create view v1 as select concat(f1(123.45)) as c1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
c1	varchar(12)	YES		NULL	
drop table t1;
drop view v1;
drop function f1;
create function f1 (par1 date) returns date
begin
return concat(par1);
end|
set @a= f1(cast('2001-01-02' as date));
select hex(@a);
hex(@a)
323030312D30312D3032
select hex(concat(f1(cast('2001-01-02' as date))));
hex(concat(f1(cast('2001-01-02' as date))))
323030312D30312D3032
create table t1 as select f1(cast('2001-01-02' as date)) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` date DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 as select concat(f1(cast('2001-01-02' as date))) as c1;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
create view v1 as select concat(f1(cast('2001-01-02' as date))) as c1;
show columns from v1;
Field	Type	Null	Key	Default	Extra
c1	varchar(10)	YES		NULL	
drop table t1;
drop view v1;
drop function f1;
#
# End of WL#2649 Number-to-string conversions
#
#
# Bug#54668 User variable assignments get wrong type
#
SET @x=md5('a');
SELECT charset(@x), collation(@x);
charset(@x)	collation(@x)
latin1	latin1_swedish_ci
SET @x=old_password('a');
SELECT charset(@x), collation(@x);
charset(@x)	collation(@x)
latin1	latin1_swedish_ci
SET @x=password('a');
SELECT charset(@x), collation(@x);
charset(@x)	collation(@x)
latin1	latin1_swedish_ci
SET @x=sha('a');
SELECT charset(@x), collation(@x);
charset(@x)	collation(@x)
latin1	latin1_swedish_ci
SET @x=sha1('a');
SELECT charset(@x), collation(@x);
charset(@x)	collation(@x)
latin1	latin1_swedish_ci
SET @x=astext(point(1,2));
SELECT charset(@x), collation(@x);
charset(@x)	collation(@x)
latin1	latin1_swedish_ci
SET @x=aswkt(point(1,2));
SELECT charset(@x), collation(@x);
charset(@x)	collation(@x)
latin1	latin1_swedish_ci
#
# Bug#54916 GROUP_CONCAT + IFNULL truncates output
#
SELECT @@collation_connection;
@@collation_connection
latin1_swedish_ci
CREATE TABLE t1 (a MEDIUMINT NULL) ENGINE=MYISAM;
INSERT INTO t1 VALUES (1234567);
SELECT GROUP_CONCAT(IFNULL(a,'')) FROM t1;
GROUP_CONCAT(IFNULL(a,''))
1234567
SELECT GROUP_CONCAT(IF(a,a,'')) FROM t1;
GROUP_CONCAT(IF(a,a,''))
1234567
SELECT GROUP_CONCAT(CASE WHEN a THEN a ELSE '' END) FROM t1;
GROUP_CONCAT(CASE WHEN a THEN a ELSE '' END)
1234567
SELECT COALESCE(a,'') FROM t1 GROUP BY 1;
Catalog	Database	Table	Table_alias	Column	Column_alias	Type	Length	Max length	Is_null	Flags	Decimals	Charsetnr
def					COALESCE(a,'')	253	9	7	Y	0	39	8
COALESCE(a,'')
1234567
# All columns must be VARCHAR(9) with the same length:
CREATE TABLE t2 AS
SELECT
CONCAT(a),
IFNULL(a,''),
IF(a,a,''),
CASE WHEN a THEN a ELSE '' END,
COALESCE(a,'')
FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `CONCAT(a)` varchar(9) DEFAULT NULL,
  `IFNULL(a,'')` varchar(9) NOT NULL,
  `IF(a,a,'')` varchar(9) DEFAULT NULL,
  `CASE WHEN a THEN a ELSE '' END` varchar(9) DEFAULT NULL,
  `COALESCE(a,'')` varchar(9) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT CONCAT_WS(1,2,3) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `CONCAT_WS(1,2,3)` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT INSERT(1133,3,0,22) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `INSERT(1133,3,0,22)` varchar(6) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT LCASE(a) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `LCASE(a)` varchar(9) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT UCASE(a) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `UCASE(a)` varchar(9) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT REPEAT(1,2) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `REPEAT(1,2)` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT LEFT(123,2) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `LEFT(123,2)` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT RIGHT(123,2) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `RIGHT(123,2)` varchar(2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT LTRIM(123) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `LTRIM(123)` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT RTRIM(123) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `RTRIM(123)` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT ELT(1,111,222,333) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ELT(1,111,222,333)` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT REPLACE(111,2,3) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `REPLACE(111,2,3)` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT SUBSTRING_INDEX(111,111,1) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `SUBSTRING_INDEX(111,111,1)` varchar(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT MAKE_SET(111,222,3) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `MAKE_SET(111,222,3)` varchar(5) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT SOUNDEX(1) FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `SOUNDEX(1)` varchar(4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
CREATE TABLE t2 AS SELECT EXPORT_SET(1,'Y','N','',8);
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `EXPORT_SET(1,'Y','N','',8)` varchar(64) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t2;
DROP TABLE t1;
#
# End of Bug#54916
#
#
# Bug#58190 BETWEEN no longer uses indexes for date or datetime fields
#
SELECT @@collation_connection;
@@collation_connection
latin1_swedish_ci
CREATE TABLE t1 (
id INT(11) DEFAULT NULL,
date_column DATE DEFAULT NULL,
KEY(date_column));
INSERT INTO t1 VALUES (1,'2010-09-01'),(2,'2010-10-01');
EXPLAIN SELECT * FROM t1 WHERE date_column BETWEEN '2010-09-01' AND '2010-10-01';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	date_column	date_column	4	NULL	1	Using index condition
ALTER TABLE t1 MODIFY date_column DATETIME DEFAULT NULL;
EXPLAIN SELECT * FROM t1 WHERE date_column BETWEEN '2010-09-01' AND '2010-10-01';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	date_column	date_column	6	NULL	1	Using index condition
DROP TABLE t1;
#
# Bug #31384 	DATE_ADD() and DATE_SUB() return binary data
#
SELECT @@collation_connection, @@character_set_results;
@@collation_connection	@@character_set_results
latin1_swedish_ci	latin1
SELECT
CHARSET(DATE_SUB('2007-08-03', INTERVAL 1 MINUTE)) AS field_str1,
CHARSET(DATE_SUB('2007-08-03 17:33:00', INTERVAL 1 MINUTE)) AS field_str2,
CHARSET(DATE_SUB(DATE('2007-08-03'), INTERVAL 1 DAY)) AS field_date,
CHARSET(DATE_SUB(CAST('2007-08-03 17:33:00' AS DATETIME), INTERVAL 1 MINUTE)) AS field_datetime;
field_str1	field_str2	field_date	field_datetime
latin1	latin1	binary	binary
CREATE TABLE t1 AS
SELECT
DATE_SUB('2007-08-03', INTERVAL 1 MINUTE) AS field_str1,
DATE_SUB('2007-08-03 17:33:00', INTERVAL 1 MINUTE) AS field1_str2,
DATE_SUB(DATE('2007-08-03'), INTERVAL 1 DAY) AS field_date,
DATE_SUB(CAST('2007-08-03 17:33:00' AS DATETIME), INTERVAL 1 MINUTE) AS field_datetime;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `field_str1` varchar(19) DEFAULT NULL,
  `field1_str2` varchar(19) DEFAULT NULL,
  `field_date` date DEFAULT NULL,
  `field_datetime` datetime DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t1;
SELECT
DATE_SUB('2007-08-03', INTERVAL 1 DAY) AS field_str1,
DATE_SUB('2007-08-03 17:33:00', INTERVAL 1 MINUTE) AS field1_str2,
DATE_SUB(DATE('2007-08-03'), INTERVAL 1 DAY) AS field_date,
DATE_SUB(CAST('2007-08-03 17:33:00' AS DATETIME), INTERVAL 1 MINUTE) AS field_datetime;
Catalog	Database	Table	Table_alias	Column	Column_alias	Type	Length	Max length	Is_null	Flags	Decimals	Charsetnr
def					field_str1	254	19	10	Y	0	0	8
def					field1_str2	254	19	19	Y	0	0	8
def					field_date	10	10	10	Y	128	0	63
def					field_datetime	12	19	19	Y	128	0	63
field_str1	field1_str2	field_date	field_datetime
2007-08-02	2007-08-03 17:32:00	2007-08-02	2007-08-03 17:32:00
SELECT
HEX(DATE_SUB('2007-08-03', INTERVAL 1 MINUTE)) AS field_str1,
HEX(DATE_SUB('2007-08-03 17:33:00', INTERVAL 1 MINUTE)) AS field1_str2,
HEX(DATE_SUB(DATE('2007-08-03'), INTERVAL 1 DAY)) AS field_date,
HEX(DATE_SUB(CAST('2007-08-03 17:33:00' AS DATETIME), INTERVAL 1 MINUTE)) AS field_datetime;
field_str1	field1_str2	field_date	field_datetime
323030372D30382D30322032333A35393A3030	323030372D30382D30332031373A33323A3030	323030372D30382D3032	323030372D30382D30332031373A33323A3030
#
# MDEV-4841 Wrong character set of ADDTIME() and DATE_ADD()
#
SELECT @@collation_connection, @@character_set_results;
@@collation_connection	@@character_set_results
latin1_swedish_ci	latin1
SELECT
CHARSET(ADDTIME(_latin1'10:01:01',_latin1'10:00:00')) AS addtime1,
CHARSET(ADDTIME('10:01:01','10:00:00')) AS addtime2,
CHARSET(DATE_ADD(_latin1'2001-01-01 10:01:01',interval 10 second)) AS date_add1,
CHARSET(DATE_ADD('2001-01-01 10:01:01',interval 10 second)) AS date_add2;
addtime1	addtime2	date_add1	date_add2
latin1	latin1	latin1	latin1
CREATE TABLE t1 AS
SELECT
ADDTIME(_latin1'10:01:01',_latin1'10:00:00') AS addtime1,
ADDTIME('10:01:01','10:00:00') AS addtime2,
DATE_ADD(_latin1'2001-01-01 10:01:01',interval 10 second) AS date_add1,
DATE_ADD('2001-01-01 10:01:01',interval 10 second) AS date_add2;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `addtime1` varchar(26) DEFAULT NULL,
  `addtime2` varchar(26) DEFAULT NULL,
  `date_add1` varchar(19) DEFAULT NULL,
  `date_add2` varchar(19) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT * FROM t1;
addtime1	addtime2	date_add1	date_add2
20:01:01	20:01:01	2001-01-01 10:01:11	2001-01-01 10:01:11
DROP TABLE t1;
#
# Bug#11926811 / Bug#60625 Illegal mix of collations
#
SELECT @@collation_connection;
@@collation_connection
latin1_swedish_ci
CREATE PROCEDURE p1()
BEGIN
DECLARE v_LastPaymentDate DATETIME DEFAULT NULL;
SELECT v_LastPaymentDate < NOW();
EXPLAIN EXTENDED SELECT v_LastPaymentDate < NOW();
SHOW WARNINGS;
EXPLAIN EXTENDED SELECT CONCAT(v_LastPaymentDate, NOW());
END//
CALL p1;
v_LastPaymentDate < NOW()
NULL
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Level	Code	Message
Note	1003	select v_LastPaymentDate@0 < current_timestamp() AS `v_LastPaymentDate < NOW()`
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	select concat(v_LastPaymentDate@0,current_timestamp()) AS `CONCAT(v_LastPaymentDate, NOW())`
DROP PROCEDURE p1;
#
# Bug#52159 returning time type from function and empty left join causes debug assertion
#
CREATE FUNCTION f1() RETURNS TIME RETURN 1;
CREATE TABLE t1 (b INT);
INSERT INTO t1 VALUES (0);
SELECT f1() FROM t1 LEFT JOIN (SELECT 1 AS a FROM t1 LIMIT 0) AS d ON 1 GROUP BY a;
f1()
00:00:01
DROP FUNCTION f1;
DROP TABLE t1;
#
# MDEV-9662 Assertion `precision || !scale' failed in my_decimal_precision_to_length_no_truncation(uint, uint8, bool)
#
SELECT @@collation_connection;
@@collation_connection
latin1_swedish_ci
SELECT CASE 1 WHEN 2 THEN ( - '3' ) END;
CASE 1 WHEN 2 THEN ( - '3' ) END
NULL
#
# MDEV-5702 Incorrect results are returned with NULLIF()
#
CREATE TABLE t1 (d DATE);
INSERT INTO t1 VALUES ('1999-11-11'),('2014-02-04');
SELECT DISTINCT d, CAST(d AS CHAR), NULLIF(d,"2000-01-01") AS bad, NULLIF(CAST(d AS CHAR),"2000-01-01") AS good FROM t1;
d	CAST(d AS CHAR)	bad	good
1999-11-11	1999-11-11	1999-11-11	1999-11-11
2014-02-04	2014-02-04	2014-02-04	2014-02-04
CREATE TABLE t2 AS SELECT DISTINCT d, NULLIF(d,'2000-01-01') AS bad FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `d` date DEFAULT NULL,
  `bad` date DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
DROP TABLE t1, t2;
SET NAMES latin1;
SET sql_mode='';
CREATE TABLE t1(a char(215) CHARACTER SET utf8 NOT NULL DEFAULT '', KEY(a));
INSERT INTO t1 VALUES ();
SELECT maketime(`a`,`a`,`a`) FROM t1 GROUP BY 1;
maketime(`a`,`a`,`a`)
00:00:00.000000
DROP TABLE t1;
SET sql_mode=default;
#
# Bug#11764503 (Bug#57341) Query in EXPLAIN EXTENDED shows wrong characters
#
SET NAMES utf8;
EXPLAIN EXTENDED SELECT 'abcdÃ³', _latin1'abcdÃ³', _utf8'abcdÃ³';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	select 'abcdÃ³' AS `abcdÃ³`,_latin1'abcd\xC3\xB3' AS `abcdÃƒÂ³`,_utf8'abcd\xC3\xB3' AS `abcdÃ³`
SET NAMES latin1;
EXPLAIN EXTENDED SELECT 'abcdÃ³', _latin1'abcdÃ³', _utf8'abcdÃ³';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	select 'abcdÃ³' AS `abcdÃ³`,_latin1'abcd\xC3\xB3' AS `abcdÃ³`,_utf8'abcd\xC3\xB3' AS `abcdó`
#
# End of 5.5 tests
#
#
# Start of 5.6 tests
#
#
# WL#3664 WEIGHT_STRING
#
set @@collation_connection=latin1_swedish_ci;
select @@collation_connection;
@@collation_connection
latin1_swedish_ci
CREATE TABLE t1 AS SELECT 'a' AS a;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(1) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a)) FROM t1;
HEX(WEIGHT_STRING(a))
41
SELECT HEX(ws) FROM t2;
HEX(ws)
41
DROP TABLE t2;
DROP TABLE t1;
CREATE TABLE t1 AS SELECT REPEAT('a',5) AS a;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(5) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(5) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a)) FROM t1;
HEX(WEIGHT_STRING(a))
4141414141
SELECT HEX(ws) FROM t2;
HEX(ws)
4141414141
DROP TABLE t2;
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a AS CHAR(3)) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a AS CHAR(3))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(3)))
414141
SELECT HEX(ws) FROM t2;
HEX(ws)
414141
DROP TABLE t2;
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a AS CHAR(10)) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a AS CHAR(10))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(10)))
41414141412020202020
SELECT HEX(ws) FROM t2;
HEX(ws)
41414141412020202020
DROP TABLE t2;
DROP TABLE t1;
select hex(weight_string('a'));
hex(weight_string('a'))
41
select hex(weight_string('A'));
hex(weight_string('A'))
41
select hex(weight_string('abc'));
hex(weight_string('abc'))
414243
select hex(weight_string('abc' as char(2)));
hex(weight_string('abc' as char(2)))
4142
select hex(weight_string('abc' as char(3)));
hex(weight_string('abc' as char(3)))
414243
select hex(weight_string('abc' as char(5)));
hex(weight_string('abc' as char(5)))
4142432020
select hex(weight_string('abc', 1, 2, 0xC0));
hex(weight_string('abc', 1, 2, 0xC0))
41
select hex(weight_string('abc', 2, 2, 0xC0));
hex(weight_string('abc', 2, 2, 0xC0))
4142
select hex(weight_string('abc', 3, 2, 0xC0));
hex(weight_string('abc', 3, 2, 0xC0))
414220
select hex(weight_string('abc', 4, 2, 0xC0));
hex(weight_string('abc', 4, 2, 0xC0))
41422020
select hex(weight_string('abc', 5, 2, 0xC0));
hex(weight_string('abc', 5, 2, 0xC0))
4142202020
select hex(weight_string('abc',25, 2, 0xC0));
hex(weight_string('abc',25, 2, 0xC0))
41422020202020202020202020202020202020202020202020
select hex(weight_string('abc', 1, 3, 0xC0));
hex(weight_string('abc', 1, 3, 0xC0))
41
select hex(weight_string('abc', 2, 3, 0xC0));
hex(weight_string('abc', 2, 3, 0xC0))
4142
select hex(weight_string('abc', 3, 3, 0xC0));
hex(weight_string('abc', 3, 3, 0xC0))
414243
select hex(weight_string('abc', 4, 3, 0xC0));
hex(weight_string('abc', 4, 3, 0xC0))
41424320
select hex(weight_string('abc', 5, 3, 0xC0));
hex(weight_string('abc', 5, 3, 0xC0))
4142432020
select hex(weight_string('abc',25, 3, 0xC0));
hex(weight_string('abc',25, 3, 0xC0))
41424320202020202020202020202020202020202020202020
select hex(weight_string('abc', 1, 4, 0xC0));
hex(weight_string('abc', 1, 4, 0xC0))
41
select hex(weight_string('abc', 2, 4, 0xC0));
hex(weight_string('abc', 2, 4, 0xC0))
4142
select hex(weight_string('abc', 3, 4, 0xC0));
hex(weight_string('abc', 3, 4, 0xC0))
414243
select hex(weight_string('abc', 4, 4, 0xC0));
hex(weight_string('abc', 4, 4, 0xC0))
41424320
select hex(weight_string('abc', 5, 4, 0xC0));
hex(weight_string('abc', 5, 4, 0xC0))
4142432020
select hex(weight_string('abc',25, 4, 0xC0));
hex(weight_string('abc',25, 4, 0xC0))
41424320202020202020202020202020202020202020202020
select @@collation_connection;
@@collation_connection
latin1_swedish_ci
select hex(weight_string(cast(_latin1 0x80 as char)));
hex(weight_string(cast(_latin1 0x80 as char)))
80
select hex(weight_string(cast(_latin1 0x808080 as char)));
hex(weight_string(cast(_latin1 0x808080 as char)))
808080
select hex(weight_string(cast(_latin1 0x808080 as char) as char(2)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(2)))
8080
select hex(weight_string(cast(_latin1 0x808080 as char) as char(3)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(3)))
808080
select hex(weight_string(cast(_latin1 0x808080 as char) as char(5)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(5)))
8080802020
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 2, 0xC0))
80
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 2, 0xC0))
8080
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 2, 0xC0))
808020
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 2, 0xC0))
80802020
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 2, 0xC0))
8080202020
select hex(weight_string(cast(_latin1 0x808080 as char),25, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 2, 0xC0))
80802020202020202020202020202020202020202020202020
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 3, 0xC0))
80
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 3, 0xC0))
8080
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 3, 0xC0))
808080
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 3, 0xC0))
80808020
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 3, 0xC0))
8080802020
select hex(weight_string(cast(_latin1 0x808080 as char),25, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 3, 0xC0))
80808020202020202020202020202020202020202020202020
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 4, 0xC0))
80
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 4, 0xC0))
8080
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 4, 0xC0))
808080
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 4, 0xC0))
80808020
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 4, 0xC0))
8080802020
select hex(weight_string(cast(_latin1 0x808080 as char),25, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 4, 0xC0))
80808020202020202020202020202020202020202020202020
select @@collation_connection;
@@collation_connection
latin1_swedish_ci
select hex(weight_string('a' LEVEL 1));
hex(weight_string('a' LEVEL 1))
41
select hex(weight_string('A' LEVEL 1));
hex(weight_string('A' LEVEL 1))
41
select hex(weight_string('abc' LEVEL 1));
hex(weight_string('abc' LEVEL 1))
414243
select hex(weight_string('abc' as char(2) LEVEL 1));
hex(weight_string('abc' as char(2) LEVEL 1))
4142
select hex(weight_string('abc' as char(3) LEVEL 1));
hex(weight_string('abc' as char(3) LEVEL 1))
414243
select hex(weight_string('abc' as char(5) LEVEL 1));
hex(weight_string('abc' as char(5) LEVEL 1))
4142432020
select hex(weight_string('abc' as char(5) LEVEL 1 REVERSE));
hex(weight_string('abc' as char(5) LEVEL 1 REVERSE))
2020434241
select hex(weight_string('abc' as char(5) LEVEL 1 DESC));
hex(weight_string('abc' as char(5) LEVEL 1 DESC))
BEBDBCDFDF
select hex(weight_string('abc' as char(5) LEVEL 1 DESC REVERSE));
hex(weight_string('abc' as char(5) LEVEL 1 DESC REVERSE))
DFDFBCBDBE
set @@collation_connection=latin1_bin;
select @@collation_connection;
@@collation_connection
latin1_bin
CREATE TABLE t1 AS SELECT 'a' AS a;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(1) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a)) FROM t1;
HEX(WEIGHT_STRING(a))
61
SELECT HEX(ws) FROM t2;
HEX(ws)
61
DROP TABLE t2;
DROP TABLE t1;
CREATE TABLE t1 AS SELECT REPEAT('a',5) AS a;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(5) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(5) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a)) FROM t1;
HEX(WEIGHT_STRING(a))
6161616161
SELECT HEX(ws) FROM t2;
HEX(ws)
6161616161
DROP TABLE t2;
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a AS CHAR(3)) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a AS CHAR(3))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(3)))
616161
SELECT HEX(ws) FROM t2;
HEX(ws)
616161
DROP TABLE t2;
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a AS CHAR(10)) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a AS CHAR(10))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(10)))
61616161612020202020
SELECT HEX(ws) FROM t2;
HEX(ws)
61616161612020202020
DROP TABLE t2;
DROP TABLE t1;
select hex(weight_string('a'));
hex(weight_string('a'))
61
select hex(weight_string('A'));
hex(weight_string('A'))
41
select hex(weight_string('abc'));
hex(weight_string('abc'))
616263
select hex(weight_string('abc' as char(2)));
hex(weight_string('abc' as char(2)))
6162
select hex(weight_string('abc' as char(3)));
hex(weight_string('abc' as char(3)))
616263
select hex(weight_string('abc' as char(5)));
hex(weight_string('abc' as char(5)))
6162632020
select hex(weight_string('abc', 1, 2, 0xC0));
hex(weight_string('abc', 1, 2, 0xC0))
61
select hex(weight_string('abc', 2, 2, 0xC0));
hex(weight_string('abc', 2, 2, 0xC0))
6162
select hex(weight_string('abc', 3, 2, 0xC0));
hex(weight_string('abc', 3, 2, 0xC0))
616220
select hex(weight_string('abc', 4, 2, 0xC0));
hex(weight_string('abc', 4, 2, 0xC0))
61622020
select hex(weight_string('abc', 5, 2, 0xC0));
hex(weight_string('abc', 5, 2, 0xC0))
6162202020
select hex(weight_string('abc',25, 2, 0xC0));
hex(weight_string('abc',25, 2, 0xC0))
61622020202020202020202020202020202020202020202020
select hex(weight_string('abc', 1, 3, 0xC0));
hex(weight_string('abc', 1, 3, 0xC0))
61
select hex(weight_string('abc', 2, 3, 0xC0));
hex(weight_string('abc', 2, 3, 0xC0))
6162
select hex(weight_string('abc', 3, 3, 0xC0));
hex(weight_string('abc', 3, 3, 0xC0))
616263
select hex(weight_string('abc', 4, 3, 0xC0));
hex(weight_string('abc', 4, 3, 0xC0))
61626320
select hex(weight_string('abc', 5, 3, 0xC0));
hex(weight_string('abc', 5, 3, 0xC0))
6162632020
select hex(weight_string('abc',25, 3, 0xC0));
hex(weight_string('abc',25, 3, 0xC0))
61626320202020202020202020202020202020202020202020
select hex(weight_string('abc', 1, 4, 0xC0));
hex(weight_string('abc', 1, 4, 0xC0))
61
select hex(weight_string('abc', 2, 4, 0xC0));
hex(weight_string('abc', 2, 4, 0xC0))
6162
select hex(weight_string('abc', 3, 4, 0xC0));
hex(weight_string('abc', 3, 4, 0xC0))
616263
select hex(weight_string('abc', 4, 4, 0xC0));
hex(weight_string('abc', 4, 4, 0xC0))
61626320
select hex(weight_string('abc', 5, 4, 0xC0));
hex(weight_string('abc', 5, 4, 0xC0))
6162632020
select hex(weight_string('abc',25, 4, 0xC0));
hex(weight_string('abc',25, 4, 0xC0))
61626320202020202020202020202020202020202020202020
select @@collation_connection;
@@collation_connection
latin1_bin
select hex(weight_string(cast(_latin1 0x80 as char)));
hex(weight_string(cast(_latin1 0x80 as char)))
80
select hex(weight_string(cast(_latin1 0x808080 as char)));
hex(weight_string(cast(_latin1 0x808080 as char)))
808080
select hex(weight_string(cast(_latin1 0x808080 as char) as char(2)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(2)))
8080
select hex(weight_string(cast(_latin1 0x808080 as char) as char(3)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(3)))
808080
select hex(weight_string(cast(_latin1 0x808080 as char) as char(5)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(5)))
8080802020
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 2, 0xC0))
80
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 2, 0xC0))
8080
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 2, 0xC0))
808020
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 2, 0xC0))
80802020
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 2, 0xC0))
8080202020
select hex(weight_string(cast(_latin1 0x808080 as char),25, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 2, 0xC0))
80802020202020202020202020202020202020202020202020
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 3, 0xC0))
80
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 3, 0xC0))
8080
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 3, 0xC0))
808080
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 3, 0xC0))
80808020
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 3, 0xC0))
8080802020
select hex(weight_string(cast(_latin1 0x808080 as char),25, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 3, 0xC0))
80808020202020202020202020202020202020202020202020
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 4, 0xC0))
80
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 4, 0xC0))
8080
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 4, 0xC0))
808080
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 4, 0xC0))
80808020
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 4, 0xC0))
8080802020
select hex(weight_string(cast(_latin1 0x808080 as char),25, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 4, 0xC0))
80808020202020202020202020202020202020202020202020
select @@collation_connection;
@@collation_connection
latin1_bin
select hex(weight_string('a' LEVEL 1));
hex(weight_string('a' LEVEL 1))
61
select hex(weight_string('A' LEVEL 1));
hex(weight_string('A' LEVEL 1))
41
select hex(weight_string('abc' LEVEL 1));
hex(weight_string('abc' LEVEL 1))
616263
select hex(weight_string('abc' as char(2) LEVEL 1));
hex(weight_string('abc' as char(2) LEVEL 1))
6162
select hex(weight_string('abc' as char(3) LEVEL 1));
hex(weight_string('abc' as char(3) LEVEL 1))
616263
select hex(weight_string('abc' as char(5) LEVEL 1));
hex(weight_string('abc' as char(5) LEVEL 1))
6162632020
select hex(weight_string('abc' as char(5) LEVEL 1 REVERSE));
hex(weight_string('abc' as char(5) LEVEL 1 REVERSE))
2020636261
select hex(weight_string('abc' as char(5) LEVEL 1 DESC));
hex(weight_string('abc' as char(5) LEVEL 1 DESC))
9E9D9CDFDF
select hex(weight_string('abc' as char(5) LEVEL 1 DESC REVERSE));
hex(weight_string('abc' as char(5) LEVEL 1 DESC REVERSE))
DFDF9C9D9E
set @@collation_connection=latin1_general_cs;
select @@collation_connection;
@@collation_connection
latin1_general_cs
CREATE TABLE t1 AS SELECT 'a' AS a;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(1) CHARACTER SET latin1 COLLATE latin1_general_cs NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a)) FROM t1;
HEX(WEIGHT_STRING(a))
42
SELECT HEX(ws) FROM t2;
HEX(ws)
42
DROP TABLE t2;
DROP TABLE t1;
CREATE TABLE t1 AS SELECT REPEAT('a',5) AS a;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(5) CHARACTER SET latin1 COLLATE latin1_general_cs DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(5) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a)) FROM t1;
HEX(WEIGHT_STRING(a))
4242424242
SELECT HEX(ws) FROM t2;
HEX(ws)
4242424242
DROP TABLE t2;
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a AS CHAR(3)) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a AS CHAR(3))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(3)))
424242
SELECT HEX(ws) FROM t2;
HEX(ws)
424242
DROP TABLE t2;
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a AS CHAR(10)) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a AS CHAR(10))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(10)))
42424242422020202020
SELECT HEX(ws) FROM t2;
HEX(ws)
42424242422020202020
DROP TABLE t2;
DROP TABLE t1;
select hex(weight_string('a'));
hex(weight_string('a'))
42
select hex(weight_string('A'));
hex(weight_string('A'))
41
select hex(weight_string('abc'));
hex(weight_string('abc'))
425254
select hex(weight_string('abc' as char(2)));
hex(weight_string('abc' as char(2)))
4252
select hex(weight_string('abc' as char(3)));
hex(weight_string('abc' as char(3)))
425254
select hex(weight_string('abc' as char(5)));
hex(weight_string('abc' as char(5)))
4252542020
select hex(weight_string('abc', 1, 2, 0xC0));
hex(weight_string('abc', 1, 2, 0xC0))
42
select hex(weight_string('abc', 2, 2, 0xC0));
hex(weight_string('abc', 2, 2, 0xC0))
4252
select hex(weight_string('abc', 3, 2, 0xC0));
hex(weight_string('abc', 3, 2, 0xC0))
425220
select hex(weight_string('abc', 4, 2, 0xC0));
hex(weight_string('abc', 4, 2, 0xC0))
42522020
select hex(weight_string('abc', 5, 2, 0xC0));
hex(weight_string('abc', 5, 2, 0xC0))
4252202020
select hex(weight_string('abc',25, 2, 0xC0));
hex(weight_string('abc',25, 2, 0xC0))
42522020202020202020202020202020202020202020202020
select hex(weight_string('abc', 1, 3, 0xC0));
hex(weight_string('abc', 1, 3, 0xC0))
42
select hex(weight_string('abc', 2, 3, 0xC0));
hex(weight_string('abc', 2, 3, 0xC0))
4252
select hex(weight_string('abc', 3, 3, 0xC0));
hex(weight_string('abc', 3, 3, 0xC0))
425254
select hex(weight_string('abc', 4, 3, 0xC0));
hex(weight_string('abc', 4, 3, 0xC0))
42525420
select hex(weight_string('abc', 5, 3, 0xC0));
hex(weight_string('abc', 5, 3, 0xC0))
4252542020
select hex(weight_string('abc',25, 3, 0xC0));
hex(weight_string('abc',25, 3, 0xC0))
42525420202020202020202020202020202020202020202020
select hex(weight_string('abc', 1, 4, 0xC0));
hex(weight_string('abc', 1, 4, 0xC0))
42
select hex(weight_string('abc', 2, 4, 0xC0));
hex(weight_string('abc', 2, 4, 0xC0))
4252
select hex(weight_string('abc', 3, 4, 0xC0));
hex(weight_string('abc', 3, 4, 0xC0))
425254
select hex(weight_string('abc', 4, 4, 0xC0));
hex(weight_string('abc', 4, 4, 0xC0))
42525420
select hex(weight_string('abc', 5, 4, 0xC0));
hex(weight_string('abc', 5, 4, 0xC0))
4252542020
select hex(weight_string('abc',25, 4, 0xC0));
hex(weight_string('abc',25, 4, 0xC0))
42525420202020202020202020202020202020202020202020
select @@collation_connection;
@@collation_connection
latin1_general_cs
select hex(weight_string(cast(_latin1 0x80 as char)));
hex(weight_string(cast(_latin1 0x80 as char)))
C0
select hex(weight_string(cast(_latin1 0x808080 as char)));
hex(weight_string(cast(_latin1 0x808080 as char)))
C0C0C0
select hex(weight_string(cast(_latin1 0x808080 as char) as char(2)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(2)))
C0C0
select hex(weight_string(cast(_latin1 0x808080 as char) as char(3)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(3)))
C0C0C0
select hex(weight_string(cast(_latin1 0x808080 as char) as char(5)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(5)))
C0C0C02020
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 2, 0xC0))
C0
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 2, 0xC0))
C0C0
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 2, 0xC0))
C0C020
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 2, 0xC0))
C0C02020
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 2, 0xC0))
C0C0202020
select hex(weight_string(cast(_latin1 0x808080 as char),25, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 2, 0xC0))
C0C02020202020202020202020202020202020202020202020
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 3, 0xC0))
C0
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 3, 0xC0))
C0C0
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 3, 0xC0))
C0C0C0
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 3, 0xC0))
C0C0C020
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 3, 0xC0))
C0C0C02020
select hex(weight_string(cast(_latin1 0x808080 as char),25, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 3, 0xC0))
C0C0C020202020202020202020202020202020202020202020
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 4, 0xC0))
C0
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 4, 0xC0))
C0C0
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 4, 0xC0))
C0C0C0
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 4, 0xC0))
C0C0C020
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 4, 0xC0))
C0C0C02020
select hex(weight_string(cast(_latin1 0x808080 as char),25, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 4, 0xC0))
C0C0C020202020202020202020202020202020202020202020
select @@collation_connection;
@@collation_connection
latin1_general_cs
select hex(weight_string('a' LEVEL 1));
hex(weight_string('a' LEVEL 1))
42
select hex(weight_string('A' LEVEL 1));
hex(weight_string('A' LEVEL 1))
41
select hex(weight_string('abc' LEVEL 1));
hex(weight_string('abc' LEVEL 1))
425254
select hex(weight_string('abc' as char(2) LEVEL 1));
hex(weight_string('abc' as char(2) LEVEL 1))
4252
select hex(weight_string('abc' as char(3) LEVEL 1));
hex(weight_string('abc' as char(3) LEVEL 1))
425254
select hex(weight_string('abc' as char(5) LEVEL 1));
hex(weight_string('abc' as char(5) LEVEL 1))
4252542020
select hex(weight_string('abc' as char(5) LEVEL 1 REVERSE));
hex(weight_string('abc' as char(5) LEVEL 1 REVERSE))
2020545242
select hex(weight_string('abc' as char(5) LEVEL 1 DESC));
hex(weight_string('abc' as char(5) LEVEL 1 DESC))
BDADABDFDF
select hex(weight_string('abc' as char(5) LEVEL 1 DESC REVERSE));
hex(weight_string('abc' as char(5) LEVEL 1 DESC REVERSE))
DFDFABADBD
set @@collation_connection=binary;
select @@collation_connection;
@@collation_connection
binary
CREATE TABLE t1 AS SELECT 'a' AS a;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varbinary(1) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(1) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a)) FROM t1;
HEX(WEIGHT_STRING(a))
61
SELECT HEX(ws) FROM t2;
HEX(ws)
61
DROP TABLE t2;
DROP TABLE t1;
CREATE TABLE t1 AS SELECT REPEAT('a',5) AS a;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varbinary(5) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(5) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a)) FROM t1;
HEX(WEIGHT_STRING(a))
6161616161
SELECT HEX(ws) FROM t2;
HEX(ws)
6161616161
DROP TABLE t2;
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a AS CHAR(3)) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(3) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a AS CHAR(3))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(3)))
616161
SELECT HEX(ws) FROM t2;
HEX(ws)
616161
DROP TABLE t2;
CREATE TABLE t2 AS SELECT WEIGHT_STRING(a AS CHAR(10)) AS ws FROM t1;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `ws` varbinary(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SELECT HEX(WEIGHT_STRING(a AS CHAR(10))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(10)))
61616161610000000000
SELECT HEX(ws) FROM t2;
HEX(ws)
61616161610000000000
DROP TABLE t2;
DROP TABLE t1;
select hex(weight_string('a'));
hex(weight_string('a'))
61
select hex(weight_string('A'));
hex(weight_string('A'))
41
select hex(weight_string('abc'));
hex(weight_string('abc'))
616263
select hex(weight_string('abc' as char(2)));
hex(weight_string('abc' as char(2)))
6162
select hex(weight_string('abc' as char(3)));
hex(weight_string('abc' as char(3)))
616263
select hex(weight_string('abc' as char(5)));
hex(weight_string('abc' as char(5)))
6162630000
select hex(weight_string('abc', 1, 2, 0xC0));
hex(weight_string('abc', 1, 2, 0xC0))
61
select hex(weight_string('abc', 2, 2, 0xC0));
hex(weight_string('abc', 2, 2, 0xC0))
6162
select hex(weight_string('abc', 3, 2, 0xC0));
hex(weight_string('abc', 3, 2, 0xC0))
616200
select hex(weight_string('abc', 4, 2, 0xC0));
hex(weight_string('abc', 4, 2, 0xC0))
61620000
select hex(weight_string('abc', 5, 2, 0xC0));
hex(weight_string('abc', 5, 2, 0xC0))
6162000000
select hex(weight_string('abc',25, 2, 0xC0));
hex(weight_string('abc',25, 2, 0xC0))
61620000000000000000000000000000000000000000000000
select hex(weight_string('abc', 1, 3, 0xC0));
hex(weight_string('abc', 1, 3, 0xC0))
61
select hex(weight_string('abc', 2, 3, 0xC0));
hex(weight_string('abc', 2, 3, 0xC0))
6162
select hex(weight_string('abc', 3, 3, 0xC0));
hex(weight_string('abc', 3, 3, 0xC0))
616263
select hex(weight_string('abc', 4, 3, 0xC0));
hex(weight_string('abc', 4, 3, 0xC0))
61626300
select hex(weight_string('abc', 5, 3, 0xC0));
hex(weight_string('abc', 5, 3, 0xC0))
6162630000
select hex(weight_string('abc',25, 3, 0xC0));
hex(weight_string('abc',25, 3, 0xC0))
61626300000000000000000000000000000000000000000000
select hex(weight_string('abc', 1, 4, 0xC0));
hex(weight_string('abc', 1, 4, 0xC0))
61
select hex(weight_string('abc', 2, 4, 0xC0));
hex(weight_string('abc', 2, 4, 0xC0))
6162
select hex(weight_string('abc', 3, 4, 0xC0));
hex(weight_string('abc', 3, 4, 0xC0))
616263
select hex(weight_string('abc', 4, 4, 0xC0));
hex(weight_string('abc', 4, 4, 0xC0))
61626300
select hex(weight_string('abc', 5, 4, 0xC0));
hex(weight_string('abc', 5, 4, 0xC0))
6162630000
select hex(weight_string('abc',25, 4, 0xC0));
hex(weight_string('abc',25, 4, 0xC0))
61626300000000000000000000000000000000000000000000
select @@collation_connection;
@@collation_connection
binary
select hex(weight_string(cast(_latin1 0x80 as char)));
hex(weight_string(cast(_latin1 0x80 as char)))
80
select hex(weight_string(cast(_latin1 0x808080 as char)));
hex(weight_string(cast(_latin1 0x808080 as char)))
808080
select hex(weight_string(cast(_latin1 0x808080 as char) as char(2)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(2)))
8080
select hex(weight_string(cast(_latin1 0x808080 as char) as char(3)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(3)))
808080
select hex(weight_string(cast(_latin1 0x808080 as char) as char(5)));
hex(weight_string(cast(_latin1 0x808080 as char) as char(5)))
8080800000
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 2, 0xC0))
80
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 2, 0xC0))
8080
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 2, 0xC0))
808000
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 2, 0xC0))
80800000
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 2, 0xC0))
8080000000
select hex(weight_string(cast(_latin1 0x808080 as char),25, 2, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 2, 0xC0))
80800000000000000000000000000000000000000000000000
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 3, 0xC0))
80
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 3, 0xC0))
8080
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 3, 0xC0))
808080
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 3, 0xC0))
80808000
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 3, 0xC0))
8080800000
select hex(weight_string(cast(_latin1 0x808080 as char),25, 3, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 3, 0xC0))
80808000000000000000000000000000000000000000000000
select hex(weight_string(cast(_latin1 0x808080 as char), 1, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 1, 4, 0xC0))
80
select hex(weight_string(cast(_latin1 0x808080 as char), 2, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 2, 4, 0xC0))
8080
select hex(weight_string(cast(_latin1 0x808080 as char), 3, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 3, 4, 0xC0))
808080
select hex(weight_string(cast(_latin1 0x808080 as char), 4, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 4, 4, 0xC0))
80808000
select hex(weight_string(cast(_latin1 0x808080 as char), 5, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char), 5, 4, 0xC0))
8080800000
select hex(weight_string(cast(_latin1 0x808080 as char),25, 4, 0xC0));
hex(weight_string(cast(_latin1 0x808080 as char),25, 4, 0xC0))
80808000000000000000000000000000000000000000000000
select @@collation_connection;
@@collation_connection
binary
select hex(weight_string('a' LEVEL 1));
hex(weight_string('a' LEVEL 1))
61
select hex(weight_string('A' LEVEL 1));
hex(weight_string('A' LEVEL 1))
41
select hex(weight_string('abc' LEVEL 1));
hex(weight_string('abc' LEVEL 1))
616263
select hex(weight_string('abc' as char(2) LEVEL 1));
hex(weight_string('abc' as char(2) LEVEL 1))
6162
select hex(weight_string('abc' as char(3) LEVEL 1));
hex(weight_string('abc' as char(3) LEVEL 1))
616263
select hex(weight_string('abc' as char(5) LEVEL 1));
hex(weight_string('abc' as char(5) LEVEL 1))
6162630000
select hex(weight_string('abc' as char(5) LEVEL 1 REVERSE));
hex(weight_string('abc' as char(5) LEVEL 1 REVERSE))
0000636261
select hex(weight_string('abc' as char(5) LEVEL 1 DESC));
hex(weight_string('abc' as char(5) LEVEL 1 DESC))
9E9D9CFFFF
select hex(weight_string('abc' as char(5) LEVEL 1 DESC REVERSE));
hex(weight_string('abc' as char(5) LEVEL 1 DESC REVERSE))
FFFF9C9D9E
set names latin1;
#
# End of 5.6 tests
#
#
# Start of 10.0 tests
#
# Start of ctype_unescape.inc
SET sql_mode = '';
SET @query=_binary'SELECT CHARSET(\'test\'),@@character_set_client,@@character_set_connection';
PREPARE stmt FROM @query;
EXECUTE stmt;
CHARSET('test')	@@character_set_client	@@character_set_connection
latin1	latin1	latin1
DEALLOCATE PREPARE stmt;
CREATE TABLE allbytes (a VARBINARY(10));
# Using selected bytes combinations
CREATE TABLE halfs (a INT);
INSERT INTO halfs VALUES (0x00),(0x01),(0x02),(0x03),(0x04),(0x05),(0x06),(0x07);
INSERT INTO halfs VALUES (0x08),(0x09),(0x0A),(0x0B),(0x0C),(0x0D),(0x0E),(0x0F);
CREATE TEMPORARY TABLE bytes (a BINARY(1), KEY(a)) ENGINE=MyISAM;
INSERT INTO bytes SELECT CHAR((t1.a << 4) | t2.a USING BINARY) FROM halfs t1, halfs t2;
DROP TABLE halfs;
CREATE TABLE selected_bytes (a VARBINARY(10));
INSERT INTO selected_bytes (a) VALUES ('\0'),('\b'),('\t'),('\r'),('\n'),('\Z');
INSERT INTO selected_bytes (a) VALUES ('0'),('b'),('t'),('r'),('n'),('Z');
INSERT INTO selected_bytes (a) VALUES ('\\'),('_'),('%'),(0x22),(0x27);
INSERT INTO selected_bytes (a) VALUES ('a');
INSERT INTO selected_bytes (a) VALUES
(0x3F), # 7bit
(0x40), # 7bit          mbtail
(0x7E), # 7bit          mbtail  nonascii-8bit
(0x7F), # 7bit                  nonascii-8bit
(0x80), #               mbtail                 bad-mb
(0x81), #       mbhead  mbtail
(0x9F), #       mbhead  mbtail                 bad-mb
(0xA0), #       mbhead  mbtail                 bad-mb
(0xA1), #       mbhead  mbtail  nonascii-8bit
(0xE0), #       mbhead  mbtai
(0xEF), #       mbhead  mbtail
(0xF9), #       mbhead  mbtail
(0xFA), #       mbhead  mbtail                 bad-mb
(0xFC), #       mbhead  mbtail                 bad-mb
(0xFD), #       mbhead  mbtail                 bad-mb
(0xFE), #       mbhead  mbtial                 bad-mb
(0xFF);
INSERT INTO allbytes (a) SELECT a FROM bytes;
INSERT INTO allbytes (a) SELECT CONCAT(t1.a,t2.a) FROM selected_bytes t1,selected_bytes t2;
INSERT INTO allbytes (a) SELECT CONCAT(0x5C,t1.a,t2.a) FROM selected_bytes t1,selected_bytes t2;
INSERT INTO allbytes (a) SELECT CONCAT(0x5C,t1.a,0x5C,t2.a) FROM selected_bytes t1,selected_bytes t2;
DROP TABLE selected_bytes;
DELETE FROM allbytes WHERE
OCTET_LENGTH(a)>1 AND
LOCATE(0x5C,a)=0 AND
a NOT LIKE '%\'%' AND
  a NOT LIKE '%"%';
CREATE PROCEDURE p1(val VARBINARY(10))
BEGIN
DECLARE EXIT HANDLER FOR SQLSTATE '42000' INSERT INTO t1 (a,b) VALUES(val,NULL);
SET @query=CONCAT(_binary"INSERT INTO t1 (a,b) VALUES (0x",HEX(val),",'",val,"')");
PREPARE stmt FROM @query;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END//
CREATE PROCEDURE p2()
BEGIN
DECLARE val VARBINARY(10);
DECLARE done INT DEFAULT FALSE;
DECLARE stmt CURSOR FOR SELECT a FROM allbytes;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=TRUE;
OPEN stmt;
read_loop1: LOOP
FETCH stmt INTO val;
IF done THEN
LEAVE read_loop1;
END IF;
CALL p1(val);
END LOOP;  
CLOSE stmt;
END//
CREATE FUNCTION iswellformed(a VARBINARY(256)) RETURNS INT RETURN a=BINARY CONVERT(a USING latin1);//
CREATE FUNCTION unescape(a VARBINARY(256)) RETURNS VARBINARY(256)
BEGIN
# We need to do it in a way to avoid producing new escape sequences
# First, enclose all known escsape sequences to '{{xx}}'
  # - Backslash not followed by a LIKE pattern characters _ and %
# - Double escapes
# This uses PCRE Branch Reset Groups: (?|(alt1)|(alt2)|(alt3)).
# So '\\1' in the last argument always means the match, no matter
# which alternative it came from.
SET a=REGEXP_REPLACE(a,'(?|(\\\\[^_%])|(\\x{27}\\x{27}))','{{\\1}}');
# Now unescape all enclosed standard escape sequences
SET a=REPLACE(a,'{{\\0}}', '\0');
SET a=REPLACE(a,'{{\\b}}', '\b');
SET a=REPLACE(a,'{{\\t}}', '\t');
SET a=REPLACE(a,'{{\\r}}', '\r');
SET a=REPLACE(a,'{{\\n}}', '\n');
SET a=REPLACE(a,'{{\\Z}}', '\Z');
SET a=REPLACE(a,'{{\\\'}}', '\'');
# Unescape double quotes
SET a=REPLACE(a,'{{\'\'}}', '\'');
  # Unescape the rest: all other \x sequences mean just 'x'
  SET a=REGEXP_REPLACE(a, '{{\\\\(.|\\R)}}', '\\1');
  RETURN a;
END//
CREATE FUNCTION unescape_type(a VARBINARY(256),b VARBINARY(256)) RETURNS VARBINARY(256)
BEGIN
RETURN CASE
WHEN b IS NULL THEN '[SyntErr]'
  WHEN a=b THEN CASE
WHEN OCTET_LENGTH(a)=1 THEN '[Preserve]'
    WHEN a RLIKE '\\\\[_%]' THEN '[Preserve][LIKE]'
    WHEN a RLIKE '^[[:ascii:]]+$' THEN '[Preserve][ASCII]'
    ELSE '[Preserv][MB]' END
WHEN REPLACE(a,0x5C,'')=b THEN '[Trivial]'
  WHEN UNESCAPE(a)=b THEN '[Regular]'
  ELSE '[Special]' END;
END//
CREATE FUNCTION wellformedness(a VARBINARY(256), b VARBINARY(256))
RETURNS VARBINARY(256)
BEGIN
RETURN CASE
WHEN b IS NULL THEN ''
  WHEN NOT iswellformed(a) AND iswellformed(b) THEN '[FIXED]'
  WHEN iswellformed(a) AND NOT iswellformed(b) THEN '[BROKE]'
  WHEN NOT iswellformed(a) AND NOT iswellformed(b) THEN '[ILSEQ]'
  ELSE ''
  END;
END//
CREATE FUNCTION mysql_real_escape_string_generated(a VARBINARY(256))
RETURNS VARBINARY(256)
BEGIN
DECLARE a1 BINARY(1) DEFAULT SUBSTR(a,1,1);
DECLARE a2 BINARY(1) DEFAULT SUBSTR(a,2,1);
DECLARE a3 BINARY(1) DEFAULT SUBSTR(a,3,1);
DECLARE a4 BINARY(1) DEFAULT SUBSTR(a,4,1);
DECLARE a2a4 BINARY(2) DEFAULT CONCAT(a2,a4);
RETURN CASE
WHEN (a1=0x5C) AND 
(a3=0x5C) AND
(a2>0x7F) AND
(a4 NOT IN ('_','%','0','t','r','n','Z')) AND
iswellformed(a2a4) THEN '[USER]'
  ELSE ''
  END;
END//
CREATE TABLE t1 (a VARBINARY(10),b VARBINARY(10));
CALL p2();
SELECT HEX(a),HEX(b),
CONCAT(unescape_type(a,b),
wellformedness(a,b),
mysql_real_escape_string_generated(a),
IF(UNESCAPE(a)<>b,CONCAT('[BAD',HEX(UNESCAPE(a)),']'),'')) AS comment
FROM t1 ORDER BY LENGTH(a),a;
HEX(a)	HEX(b)	comment
00	00	[Preserve]
01	01	[Preserve]
02	02	[Preserve]
03	03	[Preserve]
04	04	[Preserve]
05	05	[Preserve]
06	06	[Preserve]
07	07	[Preserve]
08	08	[Preserve]
09	09	[Preserve]
0A	0A	[Preserve]
0B	0B	[Preserve]
0C	0C	[Preserve]
0D	0D	[Preserve]
0E	0E	[Preserve]
0F	0F	[Preserve]
10	10	[Preserve]
11	11	[Preserve]
12	12	[Preserve]
13	13	[Preserve]
14	14	[Preserve]
15	15	[Preserve]
16	16	[Preserve]
17	17	[Preserve]
18	18	[Preserve]
19	19	[Preserve]
1A	1A	[Preserve]
1B	1B	[Preserve]
1C	1C	[Preserve]
1D	1D	[Preserve]
1E	1E	[Preserve]
1F	1F	[Preserve]
20	20	[Preserve]
21	21	[Preserve]
22	22	[Preserve]
23	23	[Preserve]
24	24	[Preserve]
25	25	[Preserve]
26	26	[Preserve]
27	NULL	[SyntErr]
28	28	[Preserve]
29	29	[Preserve]
2A	2A	[Preserve]
2B	2B	[Preserve]
2C	2C	[Preserve]
2D	2D	[Preserve]
2E	2E	[Preserve]
2F	2F	[Preserve]
30	30	[Preserve]
31	31	[Preserve]
32	32	[Preserve]
33	33	[Preserve]
34	34	[Preserve]
35	35	[Preserve]
36	36	[Preserve]
37	37	[Preserve]
38	38	[Preserve]
39	39	[Preserve]
3A	3A	[Preserve]
3B	3B	[Preserve]
3C	3C	[Preserve]
3D	3D	[Preserve]
3E	3E	[Preserve]
3F	3F	[Preserve]
40	40	[Preserve]
41	41	[Preserve]
42	42	[Preserve]
43	43	[Preserve]
44	44	[Preserve]
45	45	[Preserve]
46	46	[Preserve]
47	47	[Preserve]
48	48	[Preserve]
49	49	[Preserve]
4A	4A	[Preserve]
4B	4B	[Preserve]
4C	4C	[Preserve]
4D	4D	[Preserve]
4E	4E	[Preserve]
4F	4F	[Preserve]
50	50	[Preserve]
51	51	[Preserve]
52	52	[Preserve]
53	53	[Preserve]
54	54	[Preserve]
55	55	[Preserve]
56	56	[Preserve]
57	57	[Preserve]
58	58	[Preserve]
59	59	[Preserve]
5A	5A	[Preserve]
5B	5B	[Preserve]
5C	NULL	[SyntErr]
5D	5D	[Preserve]
5E	5E	[Preserve]
5F	5F	[Preserve]
60	60	[Preserve]
61	61	[Preserve]
62	62	[Preserve]
63	63	[Preserve]
64	64	[Preserve]
65	65	[Preserve]
66	66	[Preserve]
67	67	[Preserve]
68	68	[Preserve]
69	69	[Preserve]
6A	6A	[Preserve]
6B	6B	[Preserve]
6C	6C	[Preserve]
6D	6D	[Preserve]
6E	6E	[Preserve]
6F	6F	[Preserve]
70	70	[Preserve]
71	71	[Preserve]
72	72	[Preserve]
73	73	[Preserve]
74	74	[Preserve]
75	75	[Preserve]
76	76	[Preserve]
77	77	[Preserve]
78	78	[Preserve]
79	79	[Preserve]
7A	7A	[Preserve]
7B	7B	[Preserve]
7C	7C	[Preserve]
7D	7D	[Preserve]
7E	7E	[Preserve]
7F	7F	[Preserve]
80	80	[Preserve]
81	81	[Preserve]
82	82	[Preserve]
83	83	[Preserve]
84	84	[Preserve]
85	85	[Preserve]
86	86	[Preserve]
87	87	[Preserve]
88	88	[Preserve]
89	89	[Preserve]
8A	8A	[Preserve]
8B	8B	[Preserve]
8C	8C	[Preserve]
8D	8D	[Preserve]
8E	8E	[Preserve]
8F	8F	[Preserve]
90	90	[Preserve]
91	91	[Preserve]
92	92	[Preserve]
93	93	[Preserve]
94	94	[Preserve]
95	95	[Preserve]
96	96	[Preserve]
97	97	[Preserve]
98	98	[Preserve]
99	99	[Preserve]
9A	9A	[Preserve]
9B	9B	[Preserve]
9C	9C	[Preserve]
9D	9D	[Preserve]
9E	9E	[Preserve]
9F	9F	[Preserve]
A0	A0	[Preserve]
A1	A1	[Preserve]
A2	A2	[Preserve]
A3	A3	[Preserve]
A4	A4	[Preserve]
A5	A5	[Preserve]
A6	A6	[Preserve]
A7	A7	[Preserve]
A8	A8	[Preserve]
A9	A9	[Preserve]
AA	AA	[Preserve]
AB	AB	[Preserve]
AC	AC	[Preserve]
AD	AD	[Preserve]
AE	AE	[Preserve]
AF	AF	[Preserve]
B0	B0	[Preserve]
B1	B1	[Preserve]
B2	B2	[Preserve]
B3	B3	[Preserve]
B4	B4	[Preserve]
B5	B5	[Preserve]
B6	B6	[Preserve]
B7	B7	[Preserve]
B8	B8	[Preserve]
B9	B9	[Preserve]
BA	BA	[Preserve]
BB	BB	[Preserve]
BC	BC	[Preserve]
BD	BD	[Preserve]
BE	BE	[Preserve]
BF	BF	[Preserve]
C0	C0	[Preserve]
C1	C1	[Preserve]
C2	C2	[Preserve]
C3	C3	[Preserve]
C4	C4	[Preserve]
C5	C5	[Preserve]
C6	C6	[Preserve]
C7	C7	[Preserve]
C8	C8	[Preserve]
C9	C9	[Preserve]
CA	CA	[Preserve]
CB	CB	[Preserve]
CC	CC	[Preserve]
CD	CD	[Preserve]
CE	CE	[Preserve]
CF	CF	[Preserve]
D0	D0	[Preserve]
D1	D1	[Preserve]
D2	D2	[Preserve]
D3	D3	[Preserve]
D4	D4	[Preserve]
D5	D5	[Preserve]
D6	D6	[Preserve]
D7	D7	[Preserve]
D8	D8	[Preserve]
D9	D9	[Preserve]
DA	DA	[Preserve]
DB	DB	[Preserve]
DC	DC	[Preserve]
DD	DD	[Preserve]
DE	DE	[Preserve]
DF	DF	[Preserve]
E0	E0	[Preserve]
E1	E1	[Preserve]
E2	E2	[Preserve]
E3	E3	[Preserve]
E4	E4	[Preserve]
E5	E5	[Preserve]
E6	E6	[Preserve]
E7	E7	[Preserve]
E8	E8	[Preserve]
E9	E9	[Preserve]
EA	EA	[Preserve]
EB	EB	[Preserve]
EC	EC	[Preserve]
ED	ED	[Preserve]
EE	EE	[Preserve]
EF	EF	[Preserve]
F0	F0	[Preserve]
F1	F1	[Preserve]
F2	F2	[Preserve]
F3	F3	[Preserve]
F4	F4	[Preserve]
F5	F5	[Preserve]
F6	F6	[Preserve]
F7	F7	[Preserve]
F8	F8	[Preserve]
F9	F9	[Preserve]
FA	FA	[Preserve]
FB	FB	[Preserve]
FC	FC	[Preserve]
FD	FD	[Preserve]
FE	FE	[Preserve]
FF	FF	[Preserve]
0022	0022	[Preserve][ASCII]
0027	NULL	[SyntErr]
005C	NULL	[SyntErr]
0822	0822	[Preserve][ASCII]
0827	NULL	[SyntErr]
085C	NULL	[SyntErr]
0922	0922	[Preserve][ASCII]
0927	NULL	[SyntErr]
095C	NULL	[SyntErr]
0A22	0A22	[Preserve][ASCII]
0A27	NULL	[SyntErr]
0A5C	NULL	[SyntErr]
0D22	0D22	[Preserve][ASCII]
0D27	NULL	[SyntErr]
0D5C	NULL	[SyntErr]
1A22	1A22	[Preserve][ASCII]
1A27	NULL	[SyntErr]
1A5C	NULL	[SyntErr]
2200	2200	[Preserve][ASCII]
2208	2208	[Preserve][ASCII]
2209	2209	[Preserve][ASCII]
220A	220A	[Preserve][ASCII]
220D	220D	[Preserve][ASCII]
221A	221A	[Preserve][ASCII]
2222	2222	[Preserve][ASCII]
2225	2225	[Preserve][ASCII]
2227	NULL	[SyntErr]
2230	2230	[Preserve][ASCII]
223F	223F	[Preserve][ASCII]
2240	2240	[Preserve][ASCII]
225A	225A	[Preserve][ASCII]
225C	NULL	[SyntErr]
225F	225F	[Preserve][ASCII]
2261	2261	[Preserve][ASCII]
2262	2262	[Preserve][ASCII]
226E	226E	[Preserve][ASCII]
2272	2272	[Preserve][ASCII]
2274	2274	[Preserve][ASCII]
227E	227E	[Preserve][ASCII]
227F	227F	[Preserve][ASCII]
2280	2280	[Preserv][MB]
2281	2281	[Preserv][MB]
229F	229F	[Preserv][MB]
22A0	22A0	[Preserv][MB]
22A1	22A1	[Preserv][MB]
22E0	22E0	[Preserv][MB]
22EF	22EF	[Preserv][MB]
22F9	22F9	[Preserv][MB]
22FA	22FA	[Preserv][MB]
22FC	22FC	[Preserv][MB]
22FD	22FD	[Preserv][MB]
22FE	22FE	[Preserv][MB]
22FF	22FF	[Preserv][MB]
2522	2522	[Preserve][ASCII]
2527	NULL	[SyntErr]
255C	NULL	[SyntErr]
2700	NULL	[SyntErr]
2708	NULL	[SyntErr]
2709	NULL	[SyntErr]
270A	NULL	[SyntErr]
270D	NULL	[SyntErr]
271A	NULL	[SyntErr]
2722	NULL	[SyntErr]
2725	NULL	[SyntErr]
2727	27	[Regular]
2730	NULL	[SyntErr]
273F	NULL	[SyntErr]
2740	NULL	[SyntErr]
275A	NULL	[SyntErr]
275C	NULL	[SyntErr]
275F	NULL	[SyntErr]
2761	NULL	[SyntErr]
2762	NULL	[SyntErr]
276E	NULL	[SyntErr]
2772	NULL	[SyntErr]
2774	NULL	[SyntErr]
277E	NULL	[SyntErr]
277F	NULL	[SyntErr]
2780	NULL	[SyntErr]
2781	NULL	[SyntErr]
279F	NULL	[SyntErr]
27A0	NULL	[SyntErr]
27A1	NULL	[SyntErr]
27E0	NULL	[SyntErr]
27EF	NULL	[SyntErr]
27F9	NULL	[SyntErr]
27FA	NULL	[SyntErr]
27FC	NULL	[SyntErr]
27FD	NULL	[SyntErr]
27FE	NULL	[SyntErr]
27FF	NULL	[SyntErr]
3022	3022	[Preserve][ASCII]
3027	NULL	[SyntErr]
305C	NULL	[SyntErr]
3F22	3F22	[Preserve][ASCII]
3F27	NULL	[SyntErr]
3F5C	NULL	[SyntErr]
4022	4022	[Preserve][ASCII]
4027	NULL	[SyntErr]
405C	NULL	[SyntErr]
5A22	5A22	[Preserve][ASCII]
5A27	NULL	[SyntErr]
5A5C	NULL	[SyntErr]
5C00	00	[Trivial]
5C08	08	[Trivial]
5C09	09	[Trivial]
5C0A	0A	[Trivial]
5C0D	0D	[Trivial]
5C1A	1A	[Trivial]
5C22	22	[Trivial]
5C25	5C25	[Preserve][LIKE]
5C27	27	[Trivial]
5C30	00	[Regular]
5C3F	3F	[Trivial]
5C40	40	[Trivial]
5C5A	1A	[Regular]
5C5C	5C	[Regular]
5C5F	5C5F	[Preserve][LIKE]
5C61	61	[Trivial]
5C62	08	[Regular]
5C6E	0A	[Regular]
5C72	0D	[Regular]
5C74	09	[Regular]
5C7E	7E	[Trivial]
5C7F	7F	[Trivial]
5C80	80	[Trivial]
5C81	81	[Trivial]
5C9F	9F	[Trivial]
5CA0	A0	[Trivial]
5CA1	A1	[Trivial]
5CE0	E0	[Trivial]
5CEF	EF	[Trivial]
5CF9	F9	[Trivial]
5CFA	FA	[Trivial]
5CFC	FC	[Trivial]
5CFD	FD	[Trivial]
5CFE	FE	[Trivial]
5CFF	FF	[Trivial]
5F22	5F22	[Preserve][ASCII]
5F27	NULL	[SyntErr]
5F5C	NULL	[SyntErr]
6122	6122	[Preserve][ASCII]
6127	NULL	[SyntErr]
615C	NULL	[SyntErr]
6222	6222	[Preserve][ASCII]
6227	NULL	[SyntErr]
625C	NULL	[SyntErr]
6E22	6E22	[Preserve][ASCII]
6E27	NULL	[SyntErr]
6E5C	NULL	[SyntErr]
7222	7222	[Preserve][ASCII]
7227	NULL	[SyntErr]
725C	NULL	[SyntErr]
7422	7422	[Preserve][ASCII]
7427	NULL	[SyntErr]
745C	NULL	[SyntErr]
7E22	7E22	[Preserve][ASCII]
7E27	NULL	[SyntErr]
7E5C	NULL	[SyntErr]
7F22	7F22	[Preserve][ASCII]
7F27	NULL	[SyntErr]
7F5C	NULL	[SyntErr]
8022	8022	[Preserv][MB]
8027	NULL	[SyntErr]
805C	NULL	[SyntErr]
8122	8122	[Preserv][MB]
8127	NULL	[SyntErr]
815C	NULL	[SyntErr]
9F22	9F22	[Preserv][MB]
9F27	NULL	[SyntErr]
9F5C	NULL	[SyntErr]
A022	A022	[Preserv][MB]
A027	NULL	[SyntErr]
A05C	NULL	[SyntErr]
A122	A122	[Preserv][MB]
A127	NULL	[SyntErr]
A15C	NULL	[SyntErr]
E022	E022	[Preserv][MB]
E027	NULL	[SyntErr]
E05C	NULL	[SyntErr]
EF22	EF22	[Preserv][MB]
EF27	NULL	[SyntErr]
EF5C	NULL	[SyntErr]
F922	F922	[Preserv][MB]
F927	NULL	[SyntErr]
F95C	NULL	[SyntErr]
FA22	FA22	[Preserv][MB]
FA27	NULL	[SyntErr]
FA5C	NULL	[SyntErr]
FC22	FC22	[Preserv][MB]
FC27	NULL	[SyntErr]
FC5C	NULL	[SyntErr]
FD22	FD22	[Preserv][MB]
FD27	NULL	[SyntErr]
FD5C	NULL	[SyntErr]
FE22	FE22	[Preserv][MB]
FE27	NULL	[SyntErr]
FE5C	NULL	[SyntErr]
FF22	FF22	[Preserv][MB]
FF27	NULL	[SyntErr]
FF5C	NULL	[SyntErr]
5C0000	0000	[Trivial]
5C0008	0008	[Trivial]
5C0009	0009	[Trivial]
5C000A	000A	[Trivial]
5C000D	000D	[Trivial]
5C001A	001A	[Trivial]
5C0022	0022	[Trivial]
5C0025	0025	[Trivial]
5C0027	NULL	[SyntErr]
5C0030	0030	[Trivial]
5C003F	003F	[Trivial]
5C0040	0040	[Trivial]
5C005A	005A	[Trivial]
5C005C	NULL	[SyntErr]
5C005F	005F	[Trivial]
5C0061	0061	[Trivial]
5C0062	0062	[Trivial]
5C006E	006E	[Trivial]
5C0072	0072	[Trivial]
5C0074	0074	[Trivial]
5C007E	007E	[Trivial]
5C007F	007F	[Trivial]
5C0080	0080	[Trivial]
5C0081	0081	[Trivial]
5C009F	009F	[Trivial]
5C00A0	00A0	[Trivial]
5C00A1	00A1	[Trivial]
5C00E0	00E0	[Trivial]
5C00EF	00EF	[Trivial]
5C00F9	00F9	[Trivial]
5C00FA	00FA	[Trivial]
5C00FC	00FC	[Trivial]
5C00FD	00FD	[Trivial]
5C00FE	00FE	[Trivial]
5C00FF	00FF	[Trivial]
5C0800	0800	[Trivial]
5C0808	0808	[Trivial]
5C0809	0809	[Trivial]
5C080A	080A	[Trivial]
5C080D	080D	[Trivial]
5C081A	081A	[Trivial]
5C0822	0822	[Trivial]
5C0825	0825	[Trivial]
5C0827	NULL	[SyntErr]
5C0830	0830	[Trivial]
5C083F	083F	[Trivial]
5C0840	0840	[Trivial]
5C085A	085A	[Trivial]
5C085C	NULL	[SyntErr]
5C085F	085F	[Trivial]
5C0861	0861	[Trivial]
5C0862	0862	[Trivial]
5C086E	086E	[Trivial]
5C0872	0872	[Trivial]
5C0874	0874	[Trivial]
5C087E	087E	[Trivial]
5C087F	087F	[Trivial]
5C0880	0880	[Trivial]
5C0881	0881	[Trivial]
5C089F	089F	[Trivial]
5C08A0	08A0	[Trivial]
5C08A1	08A1	[Trivial]
5C08E0	08E0	[Trivial]
5C08EF	08EF	[Trivial]
5C08F9	08F9	[Trivial]
5C08FA	08FA	[Trivial]
5C08FC	08FC	[Trivial]
5C08FD	08FD	[Trivial]
5C08FE	08FE	[Trivial]
5C08FF	08FF	[Trivial]
5C0900	0900	[Trivial]
5C0908	0908	[Trivial]
5C0909	0909	[Trivial]
5C090A	090A	[Trivial]
5C090D	090D	[Trivial]
5C091A	091A	[Trivial]
5C0922	0922	[Trivial]
5C0925	0925	[Trivial]
5C0927	NULL	[SyntErr]
5C0930	0930	[Trivial]
5C093F	093F	[Trivial]
5C0940	0940	[Trivial]
5C095A	095A	[Trivial]
5C095C	NULL	[SyntErr]
5C095F	095F	[Trivial]
5C0961	0961	[Trivial]
5C0962	0962	[Trivial]
5C096E	096E	[Trivial]
5C0972	0972	[Trivial]
5C0974	0974	[Trivial]
5C097E	097E	[Trivial]
5C097F	097F	[Trivial]
5C0980	0980	[Trivial]
5C0981	0981	[Trivial]
5C099F	099F	[Trivial]
5C09A0	09A0	[Trivial]
5C09A1	09A1	[Trivial]
5C09E0	09E0	[Trivial]
5C09EF	09EF	[Trivial]
5C09F9	09F9	[Trivial]
5C09FA	09FA	[Trivial]
5C09FC	09FC	[Trivial]
5C09FD	09FD	[Trivial]
5C09FE	09FE	[Trivial]
5C09FF	09FF	[Trivial]
5C0A00	0A00	[Trivial]
5C0A08	0A08	[Trivial]
5C0A09	0A09	[Trivial]
5C0A0A	0A0A	[Trivial]
5C0A0D	0A0D	[Trivial]
5C0A1A	0A1A	[Trivial]
5C0A22	0A22	[Trivial]
5C0A25	0A25	[Trivial]
5C0A27	NULL	[SyntErr]
5C0A30	0A30	[Trivial]
5C0A3F	0A3F	[Trivial]
5C0A40	0A40	[Trivial]
5C0A5A	0A5A	[Trivial]
5C0A5C	NULL	[SyntErr]
5C0A5F	0A5F	[Trivial]
5C0A61	0A61	[Trivial]
5C0A62	0A62	[Trivial]
5C0A6E	0A6E	[Trivial]
5C0A72	0A72	[Trivial]
5C0A74	0A74	[Trivial]
5C0A7E	0A7E	[Trivial]
5C0A7F	0A7F	[Trivial]
5C0A80	0A80	[Trivial]
5C0A81	0A81	[Trivial]
5C0A9F	0A9F	[Trivial]
5C0AA0	0AA0	[Trivial]
5C0AA1	0AA1	[Trivial]
5C0AE0	0AE0	[Trivial]
5C0AEF	0AEF	[Trivial]
5C0AF9	0AF9	[Trivial]
5C0AFA	0AFA	[Trivial]
5C0AFC	0AFC	[Trivial]
5C0AFD	0AFD	[Trivial]
5C0AFE	0AFE	[Trivial]
5C0AFF	0AFF	[Trivial]
5C0D00	0D00	[Trivial]
5C0D08	0D08	[Trivial]
5C0D09	0D09	[Trivial]
5C0D0A	0D0A	[Trivial]
5C0D0D	0D0D	[Trivial]
5C0D1A	0D1A	[Trivial]
5C0D22	0D22	[Trivial]
5C0D25	0D25	[Trivial]
5C0D27	NULL	[SyntErr]
5C0D30	0D30	[Trivial]
5C0D3F	0D3F	[Trivial]
5C0D40	0D40	[Trivial]
5C0D5A	0D5A	[Trivial]
5C0D5C	NULL	[SyntErr]
5C0D5F	0D5F	[Trivial]
5C0D61	0D61	[Trivial]
5C0D62	0D62	[Trivial]
5C0D6E	0D6E	[Trivial]
5C0D72	0D72	[Trivial]
5C0D74	0D74	[Trivial]
5C0D7E	0D7E	[Trivial]
5C0D7F	0D7F	[Trivial]
5C0D80	0D80	[Trivial]
5C0D81	0D81	[Trivial]
5C0D9F	0D9F	[Trivial]
5C0DA0	0DA0	[Trivial]
5C0DA1	0DA1	[Trivial]
5C0DE0	0DE0	[Trivial]
5C0DEF	0DEF	[Trivial]
5C0DF9	0DF9	[Trivial]
5C0DFA	0DFA	[Trivial]
5C0DFC	0DFC	[Trivial]
5C0DFD	0DFD	[Trivial]
5C0DFE	0DFE	[Trivial]
5C0DFF	0DFF	[Trivial]
5C1A00	1A00	[Trivial]
5C1A08	1A08	[Trivial]
5C1A09	1A09	[Trivial]
5C1A0A	1A0A	[Trivial]
5C1A0D	1A0D	[Trivial]
5C1A1A	1A1A	[Trivial]
5C1A22	1A22	[Trivial]
5C1A25	1A25	[Trivial]
5C1A27	NULL	[SyntErr]
5C1A30	1A30	[Trivial]
5C1A3F	1A3F	[Trivial]
5C1A40	1A40	[Trivial]
5C1A5A	1A5A	[Trivial]
5C1A5C	NULL	[SyntErr]
5C1A5F	1A5F	[Trivial]
5C1A61	1A61	[Trivial]
5C1A62	1A62	[Trivial]
5C1A6E	1A6E	[Trivial]
5C1A72	1A72	[Trivial]
5C1A74	1A74	[Trivial]
5C1A7E	1A7E	[Trivial]
5C1A7F	1A7F	[Trivial]
5C1A80	1A80	[Trivial]
5C1A81	1A81	[Trivial]
5C1A9F	1A9F	[Trivial]
5C1AA0	1AA0	[Trivial]
5C1AA1	1AA1	[Trivial]
5C1AE0	1AE0	[Trivial]
5C1AEF	1AEF	[Trivial]
5C1AF9	1AF9	[Trivial]
5C1AFA	1AFA	[Trivial]
5C1AFC	1AFC	[Trivial]
5C1AFD	1AFD	[Trivial]
5C1AFE	1AFE	[Trivial]
5C1AFF	1AFF	[Trivial]
5C2200	2200	[Trivial]
5C2208	2208	[Trivial]
5C2209	2209	[Trivial]
5C220A	220A	[Trivial]
5C220D	220D	[Trivial]
5C221A	221A	[Trivial]
5C2222	2222	[Trivial]
5C2225	2225	[Trivial]
5C2227	NULL	[SyntErr]
5C2230	2230	[Trivial]
5C223F	223F	[Trivial]
5C2240	2240	[Trivial]
5C225A	225A	[Trivial]
5C225C	NULL	[SyntErr]
5C225F	225F	[Trivial]
5C2261	2261	[Trivial]
5C2262	2262	[Trivial]
5C226E	226E	[Trivial]
5C2272	2272	[Trivial]
5C2274	2274	[Trivial]
5C227E	227E	[Trivial]
5C227F	227F	[Trivial]
5C2280	2280	[Trivial]
5C2281	2281	[Trivial]
5C229F	229F	[Trivial]
5C22A0	22A0	[Trivial]
5C22A1	22A1	[Trivial]
5C22E0	22E0	[Trivial]
5C22EF	22EF	[Trivial]
5C22F9	22F9	[Trivial]
5C22FA	22FA	[Trivial]
5C22FC	22FC	[Trivial]
5C22FD	22FD	[Trivial]
5C22FE	22FE	[Trivial]
5C22FF	22FF	[Trivial]
5C2500	5C2500	[Preserve][LIKE]
5C2508	5C2508	[Preserve][LIKE]
5C2509	5C2509	[Preserve][LIKE]
5C250A	5C250A	[Preserve][LIKE]
5C250D	5C250D	[Preserve][LIKE]
5C251A	5C251A	[Preserve][LIKE]
5C2522	5C2522	[Preserve][LIKE]
5C2525	5C2525	[Preserve][LIKE]
5C2527	NULL	[SyntErr]
5C2530	5C2530	[Preserve][LIKE]
5C253F	5C253F	[Preserve][LIKE]
5C2540	5C2540	[Preserve][LIKE]
5C255A	5C255A	[Preserve][LIKE]
5C255C	NULL	[SyntErr]
5C255F	5C255F	[Preserve][LIKE]
5C2561	5C2561	[Preserve][LIKE]
5C2562	5C2562	[Preserve][LIKE]
5C256E	5C256E	[Preserve][LIKE]
5C2572	5C2572	[Preserve][LIKE]
5C2574	5C2574	[Preserve][LIKE]
5C257E	5C257E	[Preserve][LIKE]
5C257F	5C257F	[Preserve][LIKE]
5C2580	5C2580	[Preserve][LIKE]
5C2581	5C2581	[Preserve][LIKE]
5C259F	5C259F	[Preserve][LIKE]
5C25A0	5C25A0	[Preserve][LIKE]
5C25A1	5C25A1	[Preserve][LIKE]
5C25E0	5C25E0	[Preserve][LIKE]
5C25EF	5C25EF	[Preserve][LIKE]
5C25F9	5C25F9	[Preserve][LIKE]
5C25FA	5C25FA	[Preserve][LIKE]
5C25FC	5C25FC	[Preserve][LIKE]
5C25FD	5C25FD	[Preserve][LIKE]
5C25FE	5C25FE	[Preserve][LIKE]
5C25FF	5C25FF	[Preserve][LIKE]
5C2700	2700	[Trivial]
5C2708	2708	[Trivial]
5C2709	2709	[Trivial]
5C270A	270A	[Trivial]
5C270D	270D	[Trivial]
5C271A	271A	[Trivial]
5C2722	2722	[Trivial]
5C2725	2725	[Trivial]
5C2727	NULL	[SyntErr]
5C2730	2730	[Trivial]
5C273F	273F	[Trivial]
5C2740	2740	[Trivial]
5C275A	275A	[Trivial]
5C275C	NULL	[SyntErr]
5C275F	275F	[Trivial]
5C2761	2761	[Trivial]
5C2762	2762	[Trivial]
5C276E	276E	[Trivial]
5C2772	2772	[Trivial]
5C2774	2774	[Trivial]
5C277E	277E	[Trivial]
5C277F	277F	[Trivial]
5C2780	2780	[Trivial]
5C2781	2781	[Trivial]
5C279F	279F	[Trivial]
5C27A0	27A0	[Trivial]
5C27A1	27A1	[Trivial]
5C27E0	27E0	[Trivial]
5C27EF	27EF	[Trivial]
5C27F9	27F9	[Trivial]
5C27FA	27FA	[Trivial]
5C27FC	27FC	[Trivial]
5C27FD	27FD	[Trivial]
5C27FE	27FE	[Trivial]
5C27FF	27FF	[Trivial]
5C3000	0000	[Regular]
5C3008	0008	[Regular]
5C3009	0009	[Regular]
5C300A	000A	[Regular]
5C300D	000D	[Regular]
5C301A	001A	[Regular]
5C3022	0022	[Regular]
5C3025	0025	[Regular]
5C3027	NULL	[SyntErr]
5C3030	0030	[Regular]
5C303F	003F	[Regular]
5C3040	0040	[Regular]
5C305A	005A	[Regular]
5C305C	NULL	[SyntErr]
5C305F	005F	[Regular]
5C3061	0061	[Regular]
5C3062	0062	[Regular]
5C306E	006E	[Regular]
5C3072	0072	[Regular]
5C3074	0074	[Regular]
5C307E	007E	[Regular]
5C307F	007F	[Regular]
5C3080	0080	[Regular]
5C3081	0081	[Regular]
5C309F	009F	[Regular]
5C30A0	00A0	[Regular]
5C30A1	00A1	[Regular]
5C30E0	00E0	[Regular]
5C30EF	00EF	[Regular]
5C30F9	00F9	[Regular]
5C30FA	00FA	[Regular]
5C30FC	00FC	[Regular]
5C30FD	00FD	[Regular]
5C30FE	00FE	[Regular]
5C30FF	00FF	[Regular]
5C3F00	3F00	[Trivial]
5C3F08	3F08	[Trivial]
5C3F09	3F09	[Trivial]
5C3F0A	3F0A	[Trivial]
5C3F0D	3F0D	[Trivial]
5C3F1A	3F1A	[Trivial]
5C3F22	3F22	[Trivial]
5C3F25	3F25	[Trivial]
5C3F27	NULL	[SyntErr]
5C3F30	3F30	[Trivial]
5C3F3F	3F3F	[Trivial]
5C3F40	3F40	[Trivial]
5C3F5A	3F5A	[Trivial]
5C3F5C	NULL	[SyntErr]
5C3F5F	3F5F	[Trivial]
5C3F61	3F61	[Trivial]
5C3F62	3F62	[Trivial]
5C3F6E	3F6E	[Trivial]
5C3F72	3F72	[Trivial]
5C3F74	3F74	[Trivial]
5C3F7E	3F7E	[Trivial]
5C3F7F	3F7F	[Trivial]
5C3F80	3F80	[Trivial]
5C3F81	3F81	[Trivial]
5C3F9F	3F9F	[Trivial]
5C3FA0	3FA0	[Trivial]
5C3FA1	3FA1	[Trivial]
5C3FE0	3FE0	[Trivial]
5C3FEF	3FEF	[Trivial]
5C3FF9	3FF9	[Trivial]
5C3FFA	3FFA	[Trivial]
5C3FFC	3FFC	[Trivial]
5C3FFD	3FFD	[Trivial]
5C3FFE	3FFE	[Trivial]
5C3FFF	3FFF	[Trivial]
5C4000	4000	[Trivial]
5C4008	4008	[Trivial]
5C4009	4009	[Trivial]
5C400A	400A	[Trivial]
5C400D	400D	[Trivial]
5C401A	401A	[Trivial]
5C4022	4022	[Trivial]
5C4025	4025	[Trivial]
5C4027	NULL	[SyntErr]
5C4030	4030	[Trivial]
5C403F	403F	[Trivial]
5C4040	4040	[Trivial]
5C405A	405A	[Trivial]
5C405C	NULL	[SyntErr]
5C405F	405F	[Trivial]
5C4061	4061	[Trivial]
5C4062	4062	[Trivial]
5C406E	406E	[Trivial]
5C4072	4072	[Trivial]
5C4074	4074	[Trivial]
5C407E	407E	[Trivial]
5C407F	407F	[Trivial]
5C4080	4080	[Trivial]
5C4081	4081	[Trivial]
5C409F	409F	[Trivial]
5C40A0	40A0	[Trivial]
5C40A1	40A1	[Trivial]
5C40E0	40E0	[Trivial]
5C40EF	40EF	[Trivial]
5C40F9	40F9	[Trivial]
5C40FA	40FA	[Trivial]
5C40FC	40FC	[Trivial]
5C40FD	40FD	[Trivial]
5C40FE	40FE	[Trivial]
5C40FF	40FF	[Trivial]
5C5A00	1A00	[Regular]
5C5A08	1A08	[Regular]
5C5A09	1A09	[Regular]
5C5A0A	1A0A	[Regular]
5C5A0D	1A0D	[Regular]
5C5A1A	1A1A	[Regular]
5C5A22	1A22	[Regular]
5C5A25	1A25	[Regular]
5C5A27	NULL	[SyntErr]
5C5A30	1A30	[Regular]
5C5A3F	1A3F	[Regular]
5C5A40	1A40	[Regular]
5C5A5A	1A5A	[Regular]
5C5A5C	NULL	[SyntErr]
5C5A5F	1A5F	[Regular]
5C5A61	1A61	[Regular]
5C5A62	1A62	[Regular]
5C5A6E	1A6E	[Regular]
5C5A72	1A72	[Regular]
5C5A74	1A74	[Regular]
5C5A7E	1A7E	[Regular]
5C5A7F	1A7F	[Regular]
5C5A80	1A80	[Regular]
5C5A81	1A81	[Regular]
5C5A9F	1A9F	[Regular]
5C5AA0	1AA0	[Regular]
5C5AA1	1AA1	[Regular]
5C5AE0	1AE0	[Regular]
5C5AEF	1AEF	[Regular]
5C5AF9	1AF9	[Regular]
5C5AFA	1AFA	[Regular]
5C5AFC	1AFC	[Regular]
5C5AFD	1AFD	[Regular]
5C5AFE	1AFE	[Regular]
5C5AFF	1AFF	[Regular]
5C5C00	5C00	[Regular]
5C5C08	5C08	[Regular]
5C5C09	5C09	[Regular]
5C5C0A	5C0A	[Regular]
5C5C0D	5C0D	[Regular]
5C5C1A	5C1A	[Regular]
5C5C22	5C22	[Regular]
5C5C25	5C25	[Regular]
5C5C27	NULL	[SyntErr]
5C5C30	5C30	[Regular]
5C5C3F	5C3F	[Regular]
5C5C40	5C40	[Regular]
5C5C5A	5C5A	[Regular]
5C5C5C	NULL	[SyntErr]
5C5C5F	5C5F	[Regular]
5C5C61	5C61	[Regular]
5C5C62	5C62	[Regular]
5C5C6E	5C6E	[Regular]
5C5C72	5C72	[Regular]
5C5C74	5C74	[Regular]
5C5C7E	5C7E	[Regular]
5C5C7F	5C7F	[Regular]
5C5C80	5C80	[Regular]
5C5C81	5C81	[Regular]
5C5C9F	5C9F	[Regular]
5C5CA0	5CA0	[Regular]
5C5CA1	5CA1	[Regular]
5C5CE0	5CE0	[Regular]
5C5CEF	5CEF	[Regular]
5C5CF9	5CF9	[Regular]
5C5CFA	5CFA	[Regular]
5C5CFC	5CFC	[Regular]
5C5CFD	5CFD	[Regular]
5C5CFE	5CFE	[Regular]
5C5CFF	5CFF	[Regular]
5C5F00	5C5F00	[Preserve][LIKE]
5C5F08	5C5F08	[Preserve][LIKE]
5C5F09	5C5F09	[Preserve][LIKE]
5C5F0A	5C5F0A	[Preserve][LIKE]
5C5F0D	5C5F0D	[Preserve][LIKE]
5C5F1A	5C5F1A	[Preserve][LIKE]
5C5F22	5C5F22	[Preserve][LIKE]
5C5F25	5C5F25	[Preserve][LIKE]
5C5F27	NULL	[SyntErr]
5C5F30	5C5F30	[Preserve][LIKE]
5C5F3F	5C5F3F	[Preserve][LIKE]
5C5F40	5C5F40	[Preserve][LIKE]
5C5F5A	5C5F5A	[Preserve][LIKE]
5C5F5C	NULL	[SyntErr]
5C5F5F	5C5F5F	[Preserve][LIKE]
5C5F61	5C5F61	[Preserve][LIKE]
5C5F62	5C5F62	[Preserve][LIKE]
5C5F6E	5C5F6E	[Preserve][LIKE]
5C5F72	5C5F72	[Preserve][LIKE]
5C5F74	5C5F74	[Preserve][LIKE]
5C5F7E	5C5F7E	[Preserve][LIKE]
5C5F7F	5C5F7F	[Preserve][LIKE]
5C5F80	5C5F80	[Preserve][LIKE]
5C5F81	5C5F81	[Preserve][LIKE]
5C5F9F	5C5F9F	[Preserve][LIKE]
5C5FA0	5C5FA0	[Preserve][LIKE]
5C5FA1	5C5FA1	[Preserve][LIKE]
5C5FE0	5C5FE0	[Preserve][LIKE]
5C5FEF	5C5FEF	[Preserve][LIKE]
5C5FF9	5C5FF9	[Preserve][LIKE]
5C5FFA	5C5FFA	[Preserve][LIKE]
5C5FFC	5C5FFC	[Preserve][LIKE]
5C5FFD	5C5FFD	[Preserve][LIKE]
5C5FFE	5C5FFE	[Preserve][LIKE]
5C5FFF	5C5FFF	[Preserve][LIKE]
5C6100	6100	[Trivial]
5C6108	6108	[Trivial]
5C6109	6109	[Trivial]
5C610A	610A	[Trivial]
5C610D	610D	[Trivial]
5C611A	611A	[Trivial]
5C6122	6122	[Trivial]
5C6125	6125	[Trivial]
5C6127	NULL	[SyntErr]
5C6130	6130	[Trivial]
5C613F	613F	[Trivial]
5C6140	6140	[Trivial]
5C615A	615A	[Trivial]
5C615C	NULL	[SyntErr]
5C615F	615F	[Trivial]
5C6161	6161	[Trivial]
5C6162	6162	[Trivial]
5C616E	616E	[Trivial]
5C6172	6172	[Trivial]
5C6174	6174	[Trivial]
5C617E	617E	[Trivial]
5C617F	617F	[Trivial]
5C6180	6180	[Trivial]
5C6181	6181	[Trivial]
5C619F	619F	[Trivial]
5C61A0	61A0	[Trivial]
5C61A1	61A1	[Trivial]
5C61E0	61E0	[Trivial]
5C61EF	61EF	[Trivial]
5C61F9	61F9	[Trivial]
5C61FA	61FA	[Trivial]
5C61FC	61FC	[Trivial]
5C61FD	61FD	[Trivial]
5C61FE	61FE	[Trivial]
5C61FF	61FF	[Trivial]
5C6200	0800	[Regular]
5C6208	0808	[Regular]
5C6209	0809	[Regular]
5C620A	080A	[Regular]
5C620D	080D	[Regular]
5C621A	081A	[Regular]
5C6222	0822	[Regular]
5C6225	0825	[Regular]
5C6227	NULL	[SyntErr]
5C6230	0830	[Regular]
5C623F	083F	[Regular]
5C6240	0840	[Regular]
5C625A	085A	[Regular]
5C625C	NULL	[SyntErr]
5C625F	085F	[Regular]
5C6261	0861	[Regular]
5C6262	0862	[Regular]
5C626E	086E	[Regular]
5C6272	0872	[Regular]
5C6274	0874	[Regular]
5C627E	087E	[Regular]
5C627F	087F	[Regular]
5C6280	0880	[Regular]
5C6281	0881	[Regular]
5C629F	089F	[Regular]
5C62A0	08A0	[Regular]
5C62A1	08A1	[Regular]
5C62E0	08E0	[Regular]
5C62EF	08EF	[Regular]
5C62F9	08F9	[Regular]
5C62FA	08FA	[Regular]
5C62FC	08FC	[Regular]
5C62FD	08FD	[Regular]
5C62FE	08FE	[Regular]
5C62FF	08FF	[Regular]
5C6E00	0A00	[Regular]
5C6E08	0A08	[Regular]
5C6E09	0A09	[Regular]
5C6E0A	0A0A	[Regular]
5C6E0D	0A0D	[Regular]
5C6E1A	0A1A	[Regular]
5C6E22	0A22	[Regular]
5C6E25	0A25	[Regular]
5C6E27	NULL	[SyntErr]
5C6E30	0A30	[Regular]
5C6E3F	0A3F	[Regular]
5C6E40	0A40	[Regular]
5C6E5A	0A5A	[Regular]
5C6E5C	NULL	[SyntErr]
5C6E5F	0A5F	[Regular]
5C6E61	0A61	[Regular]
5C6E62	0A62	[Regular]
5C6E6E	0A6E	[Regular]
5C6E72	0A72	[Regular]
5C6E74	0A74	[Regular]
5C6E7E	0A7E	[Regular]
5C6E7F	0A7F	[Regular]
5C6E80	0A80	[Regular]
5C6E81	0A81	[Regular]
5C6E9F	0A9F	[Regular]
5C6EA0	0AA0	[Regular]
5C6EA1	0AA1	[Regular]
5C6EE0	0AE0	[Regular]
5C6EEF	0AEF	[Regular]
5C6EF9	0AF9	[Regular]
5C6EFA	0AFA	[Regular]
5C6EFC	0AFC	[Regular]
5C6EFD	0AFD	[Regular]
5C6EFE	0AFE	[Regular]
5C6EFF	0AFF	[Regular]
5C7200	0D00	[Regular]
5C7208	0D08	[Regular]
5C7209	0D09	[Regular]
5C720A	0D0A	[Regular]
5C720D	0D0D	[Regular]
5C721A	0D1A	[Regular]
5C7222	0D22	[Regular]
5C7225	0D25	[Regular]
5C7227	NULL	[SyntErr]
5C7230	0D30	[Regular]
5C723F	0D3F	[Regular]
5C7240	0D40	[Regular]
5C725A	0D5A	[Regular]
5C725C	NULL	[SyntErr]
5C725F	0D5F	[Regular]
5C7261	0D61	[Regular]
5C7262	0D62	[Regular]
5C726E	0D6E	[Regular]
5C7272	0D72	[Regular]
5C7274	0D74	[Regular]
5C727E	0D7E	[Regular]
5C727F	0D7F	[Regular]
5C7280	0D80	[Regular]
5C7281	0D81	[Regular]
5C729F	0D9F	[Regular]
5C72A0	0DA0	[Regular]
5C72A1	0DA1	[Regular]
5C72E0	0DE0	[Regular]
5C72EF	0DEF	[Regular]
5C72F9	0DF9	[Regular]
5C72FA	0DFA	[Regular]
5C72FC	0DFC	[Regular]
5C72FD	0DFD	[Regular]
5C72FE	0DFE	[Regular]
5C72FF	0DFF	[Regular]
5C7400	0900	[Regular]
5C7408	0908	[Regular]
5C7409	0909	[Regular]
5C740A	090A	[Regular]
5C740D	090D	[Regular]
5C741A	091A	[Regular]
5C7422	0922	[Regular]
5C7425	0925	[Regular]
5C7427	NULL	[SyntErr]
5C7430	0930	[Regular]
5C743F	093F	[Regular]
5C7440	0940	[Regular]
5C745A	095A	[Regular]
5C745C	NULL	[SyntErr]
5C745F	095F	[Regular]
5C7461	0961	[Regular]
5C7462	0962	[Regular]
5C746E	096E	[Regular]
5C7472	0972	[Regular]
5C7474	0974	[Regular]
5C747E	097E	[Regular]
5C747F	097F	[Regular]
5C7480	0980	[Regular]
5C7481	0981	[Regular]
5C749F	099F	[Regular]
5C74A0	09A0	[Regular]
5C74A1	09A1	[Regular]
5C74E0	09E0	[Regular]
5C74EF	09EF	[Regular]
5C74F9	09F9	[Regular]
5C74FA	09FA	[Regular]
5C74FC	09FC	[Regular]
5C74FD	09FD	[Regular]
5C74FE	09FE	[Regular]
5C74FF	09FF	[Regular]
5C7E00	7E00	[Trivial]
5C7E08	7E08	[Trivial]
5C7E09	7E09	[Trivial]
5C7E0A	7E0A	[Trivial]
5C7E0D	7E0D	[Trivial]
5C7E1A	7E1A	[Trivial]
5C7E22	7E22	[Trivial]
5C7E25	7E25	[Trivial]
5C7E27	NULL	[SyntErr]
5C7E30	7E30	[Trivial]
5C7E3F	7E3F	[Trivial]
5C7E40	7E40	[Trivial]
5C7E5A	7E5A	[Trivial]
5C7E5C	NULL	[SyntErr]
5C7E5F	7E5F	[Trivial]
5C7E61	7E61	[Trivial]
5C7E62	7E62	[Trivial]
5C7E6E	7E6E	[Trivial]
5C7E72	7E72	[Trivial]
5C7E74	7E74	[Trivial]
5C7E7E	7E7E	[Trivial]
5C7E7F	7E7F	[Trivial]
5C7E80	7E80	[Trivial]
5C7E81	7E81	[Trivial]
5C7E9F	7E9F	[Trivial]
5C7EA0	7EA0	[Trivial]
5C7EA1	7EA1	[Trivial]
5C7EE0	7EE0	[Trivial]
5C7EEF	7EEF	[Trivial]
5C7EF9	7EF9	[Trivial]
5C7EFA	7EFA	[Trivial]
5C7EFC	7EFC	[Trivial]
5C7EFD	7EFD	[Trivial]
5C7EFE	7EFE	[Trivial]
5C7EFF	7EFF	[Trivial]
5C7F00	7F00	[Trivial]
5C7F08	7F08	[Trivial]
5C7F09	7F09	[Trivial]
5C7F0A	7F0A	[Trivial]
5C7F0D	7F0D	[Trivial]
5C7F1A	7F1A	[Trivial]
5C7F22	7F22	[Trivial]
5C7F25	7F25	[Trivial]
5C7F27	NULL	[SyntErr]
5C7F30	7F30	[Trivial]
5C7F3F	7F3F	[Trivial]
5C7F40	7F40	[Trivial]
5C7F5A	7F5A	[Trivial]
5C7F5C	NULL	[SyntErr]
5C7F5F	7F5F	[Trivial]
5C7F61	7F61	[Trivial]
5C7F62	7F62	[Trivial]
5C7F6E	7F6E	[Trivial]
5C7F72	7F72	[Trivial]
5C7F74	7F74	[Trivial]
5C7F7E	7F7E	[Trivial]
5C7F7F	7F7F	[Trivial]
5C7F80	7F80	[Trivial]
5C7F81	7F81	[Trivial]
5C7F9F	7F9F	[Trivial]
5C7FA0	7FA0	[Trivial]
5C7FA1	7FA1	[Trivial]
5C7FE0	7FE0	[Trivial]
5C7FEF	7FEF	[Trivial]
5C7FF9	7FF9	[Trivial]
5C7FFA	7FFA	[Trivial]
5C7FFC	7FFC	[Trivial]
5C7FFD	7FFD	[Trivial]
5C7FFE	7FFE	[Trivial]
5C7FFF	7FFF	[Trivial]
5C8000	8000	[Trivial]
5C8008	8008	[Trivial]
5C8009	8009	[Trivial]
5C800A	800A	[Trivial]
5C800D	800D	[Trivial]
5C801A	801A	[Trivial]
5C8022	8022	[Trivial]
5C8025	8025	[Trivial]
5C8027	NULL	[SyntErr]
5C8030	8030	[Trivial]
5C803F	803F	[Trivial]
5C8040	8040	[Trivial]
5C805A	805A	[Trivial]
5C805C	NULL	[SyntErr][USER]
5C805F	805F	[Trivial]
5C8061	8061	[Trivial]
5C8062	8062	[Trivial]
5C806E	806E	[Trivial]
5C8072	8072	[Trivial]
5C8074	8074	[Trivial]
5C807E	807E	[Trivial]
5C807F	807F	[Trivial]
5C8080	8080	[Trivial]
5C8081	8081	[Trivial]
5C809F	809F	[Trivial]
5C80A0	80A0	[Trivial]
5C80A1	80A1	[Trivial]
5C80E0	80E0	[Trivial]
5C80EF	80EF	[Trivial]
5C80F9	80F9	[Trivial]
5C80FA	80FA	[Trivial]
5C80FC	80FC	[Trivial]
5C80FD	80FD	[Trivial]
5C80FE	80FE	[Trivial]
5C80FF	80FF	[Trivial]
5C8100	8100	[Trivial]
5C8108	8108	[Trivial]
5C8109	8109	[Trivial]
5C810A	810A	[Trivial]
5C810D	810D	[Trivial]
5C811A	811A	[Trivial]
5C8122	8122	[Trivial]
5C8125	8125	[Trivial]
5C8127	NULL	[SyntErr]
5C8130	8130	[Trivial]
5C813F	813F	[Trivial]
5C8140	8140	[Trivial]
5C815A	815A	[Trivial]
5C815C	NULL	[SyntErr][USER]
5C815F	815F	[Trivial]
5C8161	8161	[Trivial]
5C8162	8162	[Trivial]
5C816E	816E	[Trivial]
5C8172	8172	[Trivial]
5C8174	8174	[Trivial]
5C817E	817E	[Trivial]
5C817F	817F	[Trivial]
5C8180	8180	[Trivial]
5C8181	8181	[Trivial]
5C819F	819F	[Trivial]
5C81A0	81A0	[Trivial]
5C81A1	81A1	[Trivial]
5C81E0	81E0	[Trivial]
5C81EF	81EF	[Trivial]
5C81F9	81F9	[Trivial]
5C81FA	81FA	[Trivial]
5C81FC	81FC	[Trivial]
5C81FD	81FD	[Trivial]
5C81FE	81FE	[Trivial]
5C81FF	81FF	[Trivial]
5C9F00	9F00	[Trivial]
5C9F08	9F08	[Trivial]
5C9F09	9F09	[Trivial]
5C9F0A	9F0A	[Trivial]
5C9F0D	9F0D	[Trivial]
5C9F1A	9F1A	[Trivial]
5C9F22	9F22	[Trivial]
5C9F25	9F25	[Trivial]
5C9F27	NULL	[SyntErr]
5C9F30	9F30	[Trivial]
5C9F3F	9F3F	[Trivial]
5C9F40	9F40	[Trivial]
5C9F5A	9F5A	[Trivial]
5C9F5C	NULL	[SyntErr][USER]
5C9F5F	9F5F	[Trivial]
5C9F61	9F61	[Trivial]
5C9F62	9F62	[Trivial]
5C9F6E	9F6E	[Trivial]
5C9F72	9F72	[Trivial]
5C9F74	9F74	[Trivial]
5C9F7E	9F7E	[Trivial]
5C9F7F	9F7F	[Trivial]
5C9F80	9F80	[Trivial]
5C9F81	9F81	[Trivial]
5C9F9F	9F9F	[Trivial]
5C9FA0	9FA0	[Trivial]
5C9FA1	9FA1	[Trivial]
5C9FE0	9FE0	[Trivial]
5C9FEF	9FEF	[Trivial]
5C9FF9	9FF9	[Trivial]
5C9FFA	9FFA	[Trivial]
5C9FFC	9FFC	[Trivial]
5C9FFD	9FFD	[Trivial]
5C9FFE	9FFE	[Trivial]
5C9FFF	9FFF	[Trivial]
5CA000	A000	[Trivial]
5CA008	A008	[Trivial]
5CA009	A009	[Trivial]
5CA00A	A00A	[Trivial]
5CA00D	A00D	[Trivial]
5CA01A	A01A	[Trivial]
5CA022	A022	[Trivial]
5CA025	A025	[Trivial]
5CA027	NULL	[SyntErr]
5CA030	A030	[Trivial]
5CA03F	A03F	[Trivial]
5CA040	A040	[Trivial]
5CA05A	A05A	[Trivial]
5CA05C	NULL	[SyntErr][USER]
5CA05F	A05F	[Trivial]
5CA061	A061	[Trivial]
5CA062	A062	[Trivial]
5CA06E	A06E	[Trivial]
5CA072	A072	[Trivial]
5CA074	A074	[Trivial]
5CA07E	A07E	[Trivial]
5CA07F	A07F	[Trivial]
5CA080	A080	[Trivial]
5CA081	A081	[Trivial]
5CA09F	A09F	[Trivial]
5CA0A0	A0A0	[Trivial]
5CA0A1	A0A1	[Trivial]
5CA0E0	A0E0	[Trivial]
5CA0EF	A0EF	[Trivial]
5CA0F9	A0F9	[Trivial]
5CA0FA	A0FA	[Trivial]
5CA0FC	A0FC	[Trivial]
5CA0FD	A0FD	[Trivial]
5CA0FE	A0FE	[Trivial]
5CA0FF	A0FF	[Trivial]
5CA100	A100	[Trivial]
5CA108	A108	[Trivial]
5CA109	A109	[Trivial]
5CA10A	A10A	[Trivial]
5CA10D	A10D	[Trivial]
5CA11A	A11A	[Trivial]
5CA122	A122	[Trivial]
5CA125	A125	[Trivial]
5CA127	NULL	[SyntErr]
5CA130	A130	[Trivial]
5CA13F	A13F	[Trivial]
5CA140	A140	[Trivial]
5CA15A	A15A	[Trivial]
5CA15C	NULL	[SyntErr][USER]
5CA15F	A15F	[Trivial]
5CA161	A161	[Trivial]
5CA162	A162	[Trivial]
5CA16E	A16E	[Trivial]
5CA172	A172	[Trivial]
5CA174	A174	[Trivial]
5CA17E	A17E	[Trivial]
5CA17F	A17F	[Trivial]
5CA180	A180	[Trivial]
5CA181	A181	[Trivial]
5CA19F	A19F	[Trivial]
5CA1A0	A1A0	[Trivial]
5CA1A1	A1A1	[Trivial]
5CA1E0	A1E0	[Trivial]
5CA1EF	A1EF	[Trivial]
5CA1F9	A1F9	[Trivial]
5CA1FA	A1FA	[Trivial]
5CA1FC	A1FC	[Trivial]
5CA1FD	A1FD	[Trivial]
5CA1FE	A1FE	[Trivial]
5CA1FF	A1FF	[Trivial]
5CE000	E000	[Trivial]
5CE008	E008	[Trivial]
5CE009	E009	[Trivial]
5CE00A	E00A	[Trivial]
5CE00D	E00D	[Trivial]
5CE01A	E01A	[Trivial]
5CE022	E022	[Trivial]
5CE025	E025	[Trivial]
5CE027	NULL	[SyntErr]
5CE030	E030	[Trivial]
5CE03F	E03F	[Trivial]
5CE040	E040	[Trivial]
5CE05A	E05A	[Trivial]
5CE05C	NULL	[SyntErr][USER]
5CE05F	E05F	[Trivial]
5CE061	E061	[Trivial]
5CE062	E062	[Trivial]
5CE06E	E06E	[Trivial]
5CE072	E072	[Trivial]
5CE074	E074	[Trivial]
5CE07E	E07E	[Trivial]
5CE07F	E07F	[Trivial]
5CE080	E080	[Trivial]
5CE081	E081	[Trivial]
5CE09F	E09F	[Trivial]
5CE0A0	E0A0	[Trivial]
5CE0A1	E0A1	[Trivial]
5CE0E0	E0E0	[Trivial]
5CE0EF	E0EF	[Trivial]
5CE0F9	E0F9	[Trivial]
5CE0FA	E0FA	[Trivial]
5CE0FC	E0FC	[Trivial]
5CE0FD	E0FD	[Trivial]
5CE0FE	E0FE	[Trivial]
5CE0FF	E0FF	[Trivial]
5CEF00	EF00	[Trivial]
5CEF08	EF08	[Trivial]
5CEF09	EF09	[Trivial]
5CEF0A	EF0A	[Trivial]
5CEF0D	EF0D	[Trivial]
5CEF1A	EF1A	[Trivial]
5CEF22	EF22	[Trivial]
5CEF25	EF25	[Trivial]
5CEF27	NULL	[SyntErr]
5CEF30	EF30	[Trivial]
5CEF3F	EF3F	[Trivial]
5CEF40	EF40	[Trivial]
5CEF5A	EF5A	[Trivial]
5CEF5C	NULL	[SyntErr][USER]
5CEF5F	EF5F	[Trivial]
5CEF61	EF61	[Trivial]
5CEF62	EF62	[Trivial]
5CEF6E	EF6E	[Trivial]
5CEF72	EF72	[Trivial]
5CEF74	EF74	[Trivial]
5CEF7E	EF7E	[Trivial]
5CEF7F	EF7F	[Trivial]
5CEF80	EF80	[Trivial]
5CEF81	EF81	[Trivial]
5CEF9F	EF9F	[Trivial]
5CEFA0	EFA0	[Trivial]
5CEFA1	EFA1	[Trivial]
5CEFE0	EFE0	[Trivial]
5CEFEF	EFEF	[Trivial]
5CEFF9	EFF9	[Trivial]
5CEFFA	EFFA	[Trivial]
5CEFFC	EFFC	[Trivial]
5CEFFD	EFFD	[Trivial]
5CEFFE	EFFE	[Trivial]
5CEFFF	EFFF	[Trivial]
5CF900	F900	[Trivial]
5CF908	F908	[Trivial]
5CF909	F909	[Trivial]
5CF90A	F90A	[Trivial]
5CF90D	F90D	[Trivial]
5CF91A	F91A	[Trivial]
5CF922	F922	[Trivial]
5CF925	F925	[Trivial]
5CF927	NULL	[SyntErr]
5CF930	F930	[Trivial]
5CF93F	F93F	[Trivial]
5CF940	F940	[Trivial]
5CF95A	F95A	[Trivial]
5CF95C	NULL	[SyntErr][USER]
5CF95F	F95F	[Trivial]
5CF961	F961	[Trivial]
5CF962	F962	[Trivial]
5CF96E	F96E	[Trivial]
5CF972	F972	[Trivial]
5CF974	F974	[Trivial]
5CF97E	F97E	[Trivial]
5CF97F	F97F	[Trivial]
5CF980	F980	[Trivial]
5CF981	F981	[Trivial]
5CF99F	F99F	[Trivial]
5CF9A0	F9A0	[Trivial]
5CF9A1	F9A1	[Trivial]
5CF9E0	F9E0	[Trivial]
5CF9EF	F9EF	[Trivial]
5CF9F9	F9F9	[Trivial]
5CF9FA	F9FA	[Trivial]
5CF9FC	F9FC	[Trivial]
5CF9FD	F9FD	[Trivial]
5CF9FE	F9FE	[Trivial]
5CF9FF	F9FF	[Trivial]
5CFA00	FA00	[Trivial]
5CFA08	FA08	[Trivial]
5CFA09	FA09	[Trivial]
5CFA0A	FA0A	[Trivial]
5CFA0D	FA0D	[Trivial]
5CFA1A	FA1A	[Trivial]
5CFA22	FA22	[Trivial]
5CFA25	FA25	[Trivial]
5CFA27	NULL	[SyntErr]
5CFA30	FA30	[Trivial]
5CFA3F	FA3F	[Trivial]
5CFA40	FA40	[Trivial]
5CFA5A	FA5A	[Trivial]
5CFA5C	NULL	[SyntErr][USER]
5CFA5F	FA5F	[Trivial]
5CFA61	FA61	[Trivial]
5CFA62	FA62	[Trivial]
5CFA6E	FA6E	[Trivial]
5CFA72	FA72	[Trivial]
5CFA74	FA74	[Trivial]
5CFA7E	FA7E	[Trivial]
5CFA7F	FA7F	[Trivial]
5CFA80	FA80	[Trivial]
5CFA81	FA81	[Trivial]
5CFA9F	FA9F	[Trivial]
5CFAA0	FAA0	[Trivial]
5CFAA1	FAA1	[Trivial]
5CFAE0	FAE0	[Trivial]
5CFAEF	FAEF	[Trivial]
5CFAF9	FAF9	[Trivial]
5CFAFA	FAFA	[Trivial]
5CFAFC	FAFC	[Trivial]
5CFAFD	FAFD	[Trivial]
5CFAFE	FAFE	[Trivial]
5CFAFF	FAFF	[Trivial]
5CFC00	FC00	[Trivial]
5CFC08	FC08	[Trivial]
5CFC09	FC09	[Trivial]
5CFC0A	FC0A	[Trivial]
5CFC0D	FC0D	[Trivial]
5CFC1A	FC1A	[Trivial]
5CFC22	FC22	[Trivial]
5CFC25	FC25	[Trivial]
5CFC27	NULL	[SyntErr]
5CFC30	FC30	[Trivial]
5CFC3F	FC3F	[Trivial]
5CFC40	FC40	[Trivial]
5CFC5A	FC5A	[Trivial]
5CFC5C	NULL	[SyntErr][USER]
5CFC5F	FC5F	[Trivial]
5CFC61	FC61	[Trivial]
5CFC62	FC62	[Trivial]
5CFC6E	FC6E	[Trivial]
5CFC72	FC72	[Trivial]
5CFC74	FC74	[Trivial]
5CFC7E	FC7E	[Trivial]
5CFC7F	FC7F	[Trivial]
5CFC80	FC80	[Trivial]
5CFC81	FC81	[Trivial]
5CFC9F	FC9F	[Trivial]
5CFCA0	FCA0	[Trivial]
5CFCA1	FCA1	[Trivial]
5CFCE0	FCE0	[Trivial]
5CFCEF	FCEF	[Trivial]
5CFCF9	FCF9	[Trivial]
5CFCFA	FCFA	[Trivial]
5CFCFC	FCFC	[Trivial]
5CFCFD	FCFD	[Trivial]
5CFCFE	FCFE	[Trivial]
5CFCFF	FCFF	[Trivial]
5CFD00	FD00	[Trivial]
5CFD08	FD08	[Trivial]
5CFD09	FD09	[Trivial]
5CFD0A	FD0A	[Trivial]
5CFD0D	FD0D	[Trivial]
5CFD1A	FD1A	[Trivial]
5CFD22	FD22	[Trivial]
5CFD25	FD25	[Trivial]
5CFD27	NULL	[SyntErr]
5CFD30	FD30	[Trivial]
5CFD3F	FD3F	[Trivial]
5CFD40	FD40	[Trivial]
5CFD5A	FD5A	[Trivial]
5CFD5C	NULL	[SyntErr][USER]
5CFD5F	FD5F	[Trivial]
5CFD61	FD61	[Trivial]
5CFD62	FD62	[Trivial]
5CFD6E	FD6E	[Trivial]
5CFD72	FD72	[Trivial]
5CFD74	FD74	[Trivial]
5CFD7E	FD7E	[Trivial]
5CFD7F	FD7F	[Trivial]
5CFD80	FD80	[Trivial]
5CFD81	FD81	[Trivial]
5CFD9F	FD9F	[Trivial]
5CFDA0	FDA0	[Trivial]
5CFDA1	FDA1	[Trivial]
5CFDE0	FDE0	[Trivial]
5CFDEF	FDEF	[Trivial]
5CFDF9	FDF9	[Trivial]
5CFDFA	FDFA	[Trivial]
5CFDFC	FDFC	[Trivial]
5CFDFD	FDFD	[Trivial]
5CFDFE	FDFE	[Trivial]
5CFDFF	FDFF	[Trivial]
5CFE00	FE00	[Trivial]
5CFE08	FE08	[Trivial]
5CFE09	FE09	[Trivial]
5CFE0A	FE0A	[Trivial]
5CFE0D	FE0D	[Trivial]
5CFE1A	FE1A	[Trivial]
5CFE22	FE22	[Trivial]
5CFE25	FE25	[Trivial]
5CFE27	NULL	[SyntErr]
5CFE30	FE30	[Trivial]
5CFE3F	FE3F	[Trivial]
5CFE40	FE40	[Trivial]
5CFE5A	FE5A	[Trivial]
5CFE5C	NULL	[SyntErr][USER]
5CFE5F	FE5F	[Trivial]
5CFE61	FE61	[Trivial]
5CFE62	FE62	[Trivial]
5CFE6E	FE6E	[Trivial]
5CFE72	FE72	[Trivial]
5CFE74	FE74	[Trivial]
5CFE7E	FE7E	[Trivial]
5CFE7F	FE7F	[Trivial]
5CFE80	FE80	[Trivial]
5CFE81	FE81	[Trivial]
5CFE9F	FE9F	[Trivial]
5CFEA0	FEA0	[Trivial]
5CFEA1	FEA1	[Trivial]
5CFEE0	FEE0	[Trivial]
5CFEEF	FEEF	[Trivial]
5CFEF9	FEF9	[Trivial]
5CFEFA	FEFA	[Trivial]
5CFEFC	FEFC	[Trivial]
5CFEFD	FEFD	[Trivial]
5CFEFE	FEFE	[Trivial]
5CFEFF	FEFF	[Trivial]
5CFF00	FF00	[Trivial]
5CFF08	FF08	[Trivial]
5CFF09	FF09	[Trivial]
5CFF0A	FF0A	[Trivial]
5CFF0D	FF0D	[Trivial]
5CFF1A	FF1A	[Trivial]
5CFF22	FF22	[Trivial]
5CFF25	FF25	[Trivial]
5CFF27	NULL	[SyntErr]
5CFF30	FF30	[Trivial]
5CFF3F	FF3F	[Trivial]
5CFF40	FF40	[Trivial]
5CFF5A	FF5A	[Trivial]
5CFF5C	NULL	[SyntErr][USER]
5CFF5F	FF5F	[Trivial]
5CFF61	FF61	[Trivial]
5CFF62	FF62	[Trivial]
5CFF6E	FF6E	[Trivial]
5CFF72	FF72	[Trivial]
5CFF74	FF74	[Trivial]
5CFF7E	FF7E	[Trivial]
5CFF7F	FF7F	[Trivial]
5CFF80	FF80	[Trivial]
5CFF81	FF81	[Trivial]
5CFF9F	FF9F	[Trivial]
5CFFA0	FFA0	[Trivial]
5CFFA1	FFA1	[Trivial]
5CFFE0	FFE0	[Trivial]
5CFFEF	FFEF	[Trivial]
5CFFF9	FFF9	[Trivial]
5CFFFA	FFFA	[Trivial]
5CFFFC	FFFC	[Trivial]
5CFFFD	FFFD	[Trivial]
5CFFFE	FFFE	[Trivial]
5CFFFF	FFFF	[Trivial]
5C005C00	0000	[Trivial]
5C005C08	0008	[Trivial]
5C005C09	0009	[Trivial]
5C005C0A	000A	[Trivial]
5C005C0D	000D	[Trivial]
5C005C1A	001A	[Trivial]
5C005C22	0022	[Trivial]
5C005C25	005C25	[Regular]
5C005C27	0027	[Trivial]
5C005C30	0000	[Regular]
5C005C3F	003F	[Trivial]
5C005C40	0040	[Trivial]
5C005C5A	001A	[Regular]
5C005C5C	005C	[Regular]
5C005C5F	005C5F	[Regular]
5C005C61	0061	[Trivial]
5C005C62	0008	[Regular]
5C005C6E	000A	[Regular]
5C005C72	000D	[Regular]
5C005C74	0009	[Regular]
5C005C7E	007E	[Trivial]
5C005C7F	007F	[Trivial]
5C005C80	0080	[Trivial]
5C005C81	0081	[Trivial]
5C005C9F	009F	[Trivial]
5C005CA0	00A0	[Trivial]
5C005CA1	00A1	[Trivial]
5C005CE0	00E0	[Trivial]
5C005CEF	00EF	[Trivial]
5C005CF9	00F9	[Trivial]
5C005CFA	00FA	[Trivial]
5C005CFC	00FC	[Trivial]
5C005CFD	00FD	[Trivial]
5C005CFE	00FE	[Trivial]
5C005CFF	00FF	[Trivial]
5C085C00	0800	[Trivial]
5C085C08	0808	[Trivial]
5C085C09	0809	[Trivial]
5C085C0A	080A	[Trivial]
5C085C0D	080D	[Trivial]
5C085C1A	081A	[Trivial]
5C085C22	0822	[Trivial]
5C085C25	085C25	[Regular]
5C085C27	0827	[Trivial]
5C085C30	0800	[Regular]
5C085C3F	083F	[Trivial]
5C085C40	0840	[Trivial]
5C085C5A	081A	[Regular]
5C085C5C	085C	[Regular]
5C085C5F	085C5F	[Regular]
5C085C61	0861	[Trivial]
5C085C62	0808	[Regular]
5C085C6E	080A	[Regular]
5C085C72	080D	[Regular]
5C085C74	0809	[Regular]
5C085C7E	087E	[Trivial]
5C085C7F	087F	[Trivial]
5C085C80	0880	[Trivial]
5C085C81	0881	[Trivial]
5C085C9F	089F	[Trivial]
5C085CA0	08A0	[Trivial]
5C085CA1	08A1	[Trivial]
5C085CE0	08E0	[Trivial]
5C085CEF	08EF	[Trivial]
5C085CF9	08F9	[Trivial]
5C085CFA	08FA	[Trivial]
5C085CFC	08FC	[Trivial]
5C085CFD	08FD	[Trivial]
5C085CFE	08FE	[Trivial]
5C085CFF	08FF	[Trivial]
5C095C00	0900	[Trivial]
5C095C08	0908	[Trivial]
5C095C09	0909	[Trivial]
5C095C0A	090A	[Trivial]
5C095C0D	090D	[Trivial]
5C095C1A	091A	[Trivial]
5C095C22	0922	[Trivial]
5C095C25	095C25	[Regular]
5C095C27	0927	[Trivial]
5C095C30	0900	[Regular]
5C095C3F	093F	[Trivial]
5C095C40	0940	[Trivial]
5C095C5A	091A	[Regular]
5C095C5C	095C	[Regular]
5C095C5F	095C5F	[Regular]
5C095C61	0961	[Trivial]
5C095C62	0908	[Regular]
5C095C6E	090A	[Regular]
5C095C72	090D	[Regular]
5C095C74	0909	[Regular]
5C095C7E	097E	[Trivial]
5C095C7F	097F	[Trivial]
5C095C80	0980	[Trivial]
5C095C81	0981	[Trivial]
5C095C9F	099F	[Trivial]
5C095CA0	09A0	[Trivial]
5C095CA1	09A1	[Trivial]
5C095CE0	09E0	[Trivial]
5C095CEF	09EF	[Trivial]
5C095CF9	09F9	[Trivial]
5C095CFA	09FA	[Trivial]
5C095CFC	09FC	[Trivial]
5C095CFD	09FD	[Trivial]
5C095CFE	09FE	[Trivial]
5C095CFF	09FF	[Trivial]
5C0A5C00	0A00	[Trivial]
5C0A5C08	0A08	[Trivial]
5C0A5C09	0A09	[Trivial]
5C0A5C0A	0A0A	[Trivial]
5C0A5C0D	0A0D	[Trivial]
5C0A5C1A	0A1A	[Trivial]
5C0A5C22	0A22	[Trivial]
5C0A5C25	0A5C25	[Regular]
5C0A5C27	0A27	[Trivial]
5C0A5C30	0A00	[Regular]
5C0A5C3F	0A3F	[Trivial]
5C0A5C40	0A40	[Trivial]
5C0A5C5A	0A1A	[Regular]
5C0A5C5C	0A5C	[Regular]
5C0A5C5F	0A5C5F	[Regular]
5C0A5C61	0A61	[Trivial]
5C0A5C62	0A08	[Regular]
5C0A5C6E	0A0A	[Regular]
5C0A5C72	0A0D	[Regular]
5C0A5C74	0A09	[Regular]
5C0A5C7E	0A7E	[Trivial]
5C0A5C7F	0A7F	[Trivial]
5C0A5C80	0A80	[Trivial]
5C0A5C81	0A81	[Trivial]
5C0A5C9F	0A9F	[Trivial]
5C0A5CA0	0AA0	[Trivial]
5C0A5CA1	0AA1	[Trivial]
5C0A5CE0	0AE0	[Trivial]
5C0A5CEF	0AEF	[Trivial]
5C0A5CF9	0AF9	[Trivial]
5C0A5CFA	0AFA	[Trivial]
5C0A5CFC	0AFC	[Trivial]
5C0A5CFD	0AFD	[Trivial]
5C0A5CFE	0AFE	[Trivial]
5C0A5CFF	0AFF	[Trivial]
5C0D5C00	0D00	[Trivial]
5C0D5C08	0D08	[Trivial]
5C0D5C09	0D09	[Trivial]
5C0D5C0A	0D0A	[Trivial]
5C0D5C0D	0D0D	[Trivial]
5C0D5C1A	0D1A	[Trivial]
5C0D5C22	0D22	[Trivial]
5C0D5C25	0D5C25	[Regular]
5C0D5C27	0D27	[Trivial]
5C0D5C30	0D00	[Regular]
5C0D5C3F	0D3F	[Trivial]
5C0D5C40	0D40	[Trivial]
5C0D5C5A	0D1A	[Regular]
5C0D5C5C	0D5C	[Regular]
5C0D5C5F	0D5C5F	[Regular]
5C0D5C61	0D61	[Trivial]
5C0D5C62	0D08	[Regular]
5C0D5C6E	0D0A	[Regular]
5C0D5C72	0D0D	[Regular]
5C0D5C74	0D09	[Regular]
5C0D5C7E	0D7E	[Trivial]
5C0D5C7F	0D7F	[Trivial]
5C0D5C80	0D80	[Trivial]
5C0D5C81	0D81	[Trivial]
5C0D5C9F	0D9F	[Trivial]
5C0D5CA0	0DA0	[Trivial]
5C0D5CA1	0DA1	[Trivial]
5C0D5CE0	0DE0	[Trivial]
5C0D5CEF	0DEF	[Trivial]
5C0D5CF9	0DF9	[Trivial]
5C0D5CFA	0DFA	[Trivial]
5C0D5CFC	0DFC	[Trivial]
5C0D5CFD	0DFD	[Trivial]
5C0D5CFE	0DFE	[Trivial]
5C0D5CFF	0DFF	[Trivial]
5C1A5C00	1A00	[Trivial]
5C1A5C08	1A08	[Trivial]
5C1A5C09	1A09	[Trivial]
5C1A5C0A	1A0A	[Trivial]
5C1A5C0D	1A0D	[Trivial]
5C1A5C1A	1A1A	[Trivial]
5C1A5C22	1A22	[Trivial]
5C1A5C25	1A5C25	[Regular]
5C1A5C27	1A27	[Trivial]
5C1A5C30	1A00	[Regular]
5C1A5C3F	1A3F	[Trivial]
5C1A5C40	1A40	[Trivial]
5C1A5C5A	1A1A	[Regular]
5C1A5C5C	1A5C	[Regular]
5C1A5C5F	1A5C5F	[Regular]
5C1A5C61	1A61	[Trivial]
5C1A5C62	1A08	[Regular]
5C1A5C6E	1A0A	[Regular]
5C1A5C72	1A0D	[Regular]
5C1A5C74	1A09	[Regular]
5C1A5C7E	1A7E	[Trivial]
5C1A5C7F	1A7F	[Trivial]
5C1A5C80	1A80	[Trivial]
5C1A5C81	1A81	[Trivial]
5C1A5C9F	1A9F	[Trivial]
5C1A5CA0	1AA0	[Trivial]
5C1A5CA1	1AA1	[Trivial]
5C1A5CE0	1AE0	[Trivial]
5C1A5CEF	1AEF	[Trivial]
5C1A5CF9	1AF9	[Trivial]
5C1A5CFA	1AFA	[Trivial]
5C1A5CFC	1AFC	[Trivial]
5C1A5CFD	1AFD	[Trivial]
5C1A5CFE	1AFE	[Trivial]
5C1A5CFF	1AFF	[Trivial]
5C225C00	2200	[Trivial]
5C225C08	2208	[Trivial]
5C225C09	2209	[Trivial]
5C225C0A	220A	[Trivial]
5C225C0D	220D	[Trivial]
5C225C1A	221A	[Trivial]
5C225C22	2222	[Trivial]
5C225C25	225C25	[Regular]
5C225C27	2227	[Trivial]
5C225C30	2200	[Regular]
5C225C3F	223F	[Trivial]
5C225C40	2240	[Trivial]
5C225C5A	221A	[Regular]
5C225C5C	225C	[Regular]
5C225C5F	225C5F	[Regular]
5C225C61	2261	[Trivial]
5C225C62	2208	[Regular]
5C225C6E	220A	[Regular]
5C225C72	220D	[Regular]
5C225C74	2209	[Regular]
5C225C7E	227E	[Trivial]
5C225C7F	227F	[Trivial]
5C225C80	2280	[Trivial]
5C225C81	2281	[Trivial]
5C225C9F	229F	[Trivial]
5C225CA0	22A0	[Trivial]
5C225CA1	22A1	[Trivial]
5C225CE0	22E0	[Trivial]
5C225CEF	22EF	[Trivial]
5C225CF9	22F9	[Trivial]
5C225CFA	22FA	[Trivial]
5C225CFC	22FC	[Trivial]
5C225CFD	22FD	[Trivial]
5C225CFE	22FE	[Trivial]
5C225CFF	22FF	[Trivial]
5C255C00	5C2500	[Regular]
5C255C08	5C2508	[Regular]
5C255C09	5C2509	[Regular]
5C255C0A	5C250A	[Regular]
5C255C0D	5C250D	[Regular]
5C255C1A	5C251A	[Regular]
5C255C22	5C2522	[Regular]
5C255C25	5C255C25	[Preserve][LIKE]
5C255C27	5C2527	[Regular]
5C255C30	5C2500	[Regular]
5C255C3F	5C253F	[Regular]
5C255C40	5C2540	[Regular]
5C255C5A	5C251A	[Regular]
5C255C5C	5C255C	[Regular]
5C255C5F	5C255C5F	[Preserve][LIKE]
5C255C61	5C2561	[Regular]
5C255C62	5C2508	[Regular]
5C255C6E	5C250A	[Regular]
5C255C72	5C250D	[Regular]
5C255C74	5C2509	[Regular]
5C255C7E	5C257E	[Regular]
5C255C7F	5C257F	[Regular]
5C255C80	5C2580	[Regular]
5C255C81	5C2581	[Regular]
5C255C9F	5C259F	[Regular]
5C255CA0	5C25A0	[Regular]
5C255CA1	5C25A1	[Regular]
5C255CE0	5C25E0	[Regular]
5C255CEF	5C25EF	[Regular]
5C255CF9	5C25F9	[Regular]
5C255CFA	5C25FA	[Regular]
5C255CFC	5C25FC	[Regular]
5C255CFD	5C25FD	[Regular]
5C255CFE	5C25FE	[Regular]
5C255CFF	5C25FF	[Regular]
5C275C00	2700	[Trivial]
5C275C08	2708	[Trivial]
5C275C09	2709	[Trivial]
5C275C0A	270A	[Trivial]
5C275C0D	270D	[Trivial]
5C275C1A	271A	[Trivial]
5C275C22	2722	[Trivial]
5C275C25	275C25	[Regular]
5C275C27	2727	[Trivial]
5C275C30	2700	[Regular]
5C275C3F	273F	[Trivial]
5C275C40	2740	[Trivial]
5C275C5A	271A	[Regular]
5C275C5C	275C	[Regular]
5C275C5F	275C5F	[Regular]
5C275C61	2761	[Trivial]
5C275C62	2708	[Regular]
5C275C6E	270A	[Regular]
5C275C72	270D	[Regular]
5C275C74	2709	[Regular]
5C275C7E	277E	[Trivial]
5C275C7F	277F	[Trivial]
5C275C80	2780	[Trivial]
5C275C81	2781	[Trivial]
5C275C9F	279F	[Trivial]
5C275CA0	27A0	[Trivial]
5C275CA1	27A1	[Trivial]
5C275CE0	27E0	[Trivial]
5C275CEF	27EF	[Trivial]
5C275CF9	27F9	[Trivial]
5C275CFA	27FA	[Trivial]
5C275CFC	27FC	[Trivial]
5C275CFD	27FD	[Trivial]
5C275CFE	27FE	[Trivial]
5C275CFF	27FF	[Trivial]
5C305C00	0000	[Regular]
5C305C08	0008	[Regular]
5C305C09	0009	[Regular]
5C305C0A	000A	[Regular]
5C305C0D	000D	[Regular]
5C305C1A	001A	[Regular]
5C305C22	0022	[Regular]
5C305C25	005C25	[Regular]
5C305C27	0027	[Regular]
5C305C30	0000	[Regular]
5C305C3F	003F	[Regular]
5C305C40	0040	[Regular]
5C305C5A	001A	[Regular]
5C305C5C	005C	[Regular]
5C305C5F	005C5F	[Regular]
5C305C61	0061	[Regular]
5C305C62	0008	[Regular]
5C305C6E	000A	[Regular]
5C305C72	000D	[Regular]
5C305C74	0009	[Regular]
5C305C7E	007E	[Regular]
5C305C7F	007F	[Regular]
5C305C80	0080	[Regular]
5C305C81	0081	[Regular]
5C305C9F	009F	[Regular]
5C305CA0	00A0	[Regular]
5C305CA1	00A1	[Regular]
5C305CE0	00E0	[Regular]
5C305CEF	00EF	[Regular]
5C305CF9	00F9	[Regular]
5C305CFA	00FA	[Regular]
5C305CFC	00FC	[Regular]
5C305CFD	00FD	[Regular]
5C305CFE	00FE	[Regular]
5C305CFF	00FF	[Regular]
5C3F5C00	3F00	[Trivial]
5C3F5C08	3F08	[Trivial]
5C3F5C09	3F09	[Trivial]
5C3F5C0A	3F0A	[Trivial]
5C3F5C0D	3F0D	[Trivial]
5C3F5C1A	3F1A	[Trivial]
5C3F5C22	3F22	[Trivial]
5C3F5C25	3F5C25	[Regular]
5C3F5C27	3F27	[Trivial]
5C3F5C30	3F00	[Regular]
5C3F5C3F	3F3F	[Trivial]
5C3F5C40	3F40	[Trivial]
5C3F5C5A	3F1A	[Regular]
5C3F5C5C	3F5C	[Regular]
5C3F5C5F	3F5C5F	[Regular]
5C3F5C61	3F61	[Trivial]
5C3F5C62	3F08	[Regular]
5C3F5C6E	3F0A	[Regular]
5C3F5C72	3F0D	[Regular]
5C3F5C74	3F09	[Regular]
5C3F5C7E	3F7E	[Trivial]
5C3F5C7F	3F7F	[Trivial]
5C3F5C80	3F80	[Trivial]
5C3F5C81	3F81	[Trivial]
5C3F5C9F	3F9F	[Trivial]
5C3F5CA0	3FA0	[Trivial]
5C3F5CA1	3FA1	[Trivial]
5C3F5CE0	3FE0	[Trivial]
5C3F5CEF	3FEF	[Trivial]
5C3F5CF9	3FF9	[Trivial]
5C3F5CFA	3FFA	[Trivial]
5C3F5CFC	3FFC	[Trivial]
5C3F5CFD	3FFD	[Trivial]
5C3F5CFE	3FFE	[Trivial]
5C3F5CFF	3FFF	[Trivial]
5C405C00	4000	[Trivial]
5C405C08	4008	[Trivial]
5C405C09	4009	[Trivial]
5C405C0A	400A	[Trivial]
5C405C0D	400D	[Trivial]
5C405C1A	401A	[Trivial]
5C405C22	4022	[Trivial]
5C405C25	405C25	[Regular]
5C405C27	4027	[Trivial]
5C405C30	4000	[Regular]
5C405C3F	403F	[Trivial]
5C405C40	4040	[Trivial]
5C405C5A	401A	[Regular]
5C405C5C	405C	[Regular]
5C405C5F	405C5F	[Regular]
5C405C61	4061	[Trivial]
5C405C62	4008	[Regular]
5C405C6E	400A	[Regular]
5C405C72	400D	[Regular]
5C405C74	4009	[Regular]
5C405C7E	407E	[Trivial]
5C405C7F	407F	[Trivial]
5C405C80	4080	[Trivial]
5C405C81	4081	[Trivial]
5C405C9F	409F	[Trivial]
5C405CA0	40A0	[Trivial]
5C405CA1	40A1	[Trivial]
5C405CE0	40E0	[Trivial]
5C405CEF	40EF	[Trivial]
5C405CF9	40F9	[Trivial]
5C405CFA	40FA	[Trivial]
5C405CFC	40FC	[Trivial]
5C405CFD	40FD	[Trivial]
5C405CFE	40FE	[Trivial]
5C405CFF	40FF	[Trivial]
5C5A5C00	1A00	[Regular]
5C5A5C08	1A08	[Regular]
5C5A5C09	1A09	[Regular]
5C5A5C0A	1A0A	[Regular]
5C5A5C0D	1A0D	[Regular]
5C5A5C1A	1A1A	[Regular]
5C5A5C22	1A22	[Regular]
5C5A5C25	1A5C25	[Regular]
5C5A5C27	1A27	[Regular]
5C5A5C30	1A00	[Regular]
5C5A5C3F	1A3F	[Regular]
5C5A5C40	1A40	[Regular]
5C5A5C5A	1A1A	[Regular]
5C5A5C5C	1A5C	[Regular]
5C5A5C5F	1A5C5F	[Regular]
5C5A5C61	1A61	[Regular]
5C5A5C62	1A08	[Regular]
5C5A5C6E	1A0A	[Regular]
5C5A5C72	1A0D	[Regular]
5C5A5C74	1A09	[Regular]
5C5A5C7E	1A7E	[Regular]
5C5A5C7F	1A7F	[Regular]
5C5A5C80	1A80	[Regular]
5C5A5C81	1A81	[Regular]
5C5A5C9F	1A9F	[Regular]
5C5A5CA0	1AA0	[Regular]
5C5A5CA1	1AA1	[Regular]
5C5A5CE0	1AE0	[Regular]
5C5A5CEF	1AEF	[Regular]
5C5A5CF9	1AF9	[Regular]
5C5A5CFA	1AFA	[Regular]
5C5A5CFC	1AFC	[Regular]
5C5A5CFD	1AFD	[Regular]
5C5A5CFE	1AFE	[Regular]
5C5A5CFF	1AFF	[Regular]
5C5C5C00	5C00	[Regular]
5C5C5C08	5C08	[Regular]
5C5C5C09	5C09	[Regular]
5C5C5C0A	5C0A	[Regular]
5C5C5C0D	5C0D	[Regular]
5C5C5C1A	5C1A	[Regular]
5C5C5C22	5C22	[Regular]
5C5C5C25	5C5C25	[Regular]
5C5C5C27	5C27	[Regular]
5C5C5C30	5C00	[Regular]
5C5C5C3F	5C3F	[Regular]
5C5C5C40	5C40	[Regular]
5C5C5C5A	5C1A	[Regular]
5C5C5C5C	5C5C	[Regular]
5C5C5C5F	5C5C5F	[Regular]
5C5C5C61	5C61	[Regular]
5C5C5C62	5C08	[Regular]
5C5C5C6E	5C0A	[Regular]
5C5C5C72	5C0D	[Regular]
5C5C5C74	5C09	[Regular]
5C5C5C7E	5C7E	[Regular]
5C5C5C7F	5C7F	[Regular]
5C5C5C80	5C80	[Regular]
5C5C5C81	5C81	[Regular]
5C5C5C9F	5C9F	[Regular]
5C5C5CA0	5CA0	[Regular]
5C5C5CA1	5CA1	[Regular]
5C5C5CE0	5CE0	[Regular]
5C5C5CEF	5CEF	[Regular]
5C5C5CF9	5CF9	[Regular]
5C5C5CFA	5CFA	[Regular]
5C5C5CFC	5CFC	[Regular]
5C5C5CFD	5CFD	[Regular]
5C5C5CFE	5CFE	[Regular]
5C5C5CFF	5CFF	[Regular]
5C5F5C00	5C5F00	[Regular]
5C5F5C08	5C5F08	[Regular]
5C5F5C09	5C5F09	[Regular]
5C5F5C0A	5C5F0A	[Regular]
5C5F5C0D	5C5F0D	[Regular]
5C5F5C1A	5C5F1A	[Regular]
5C5F5C22	5C5F22	[Regular]
5C5F5C25	5C5F5C25	[Preserve][LIKE]
5C5F5C27	5C5F27	[Regular]
5C5F5C30	5C5F00	[Regular]
5C5F5C3F	5C5F3F	[Regular]
5C5F5C40	5C5F40	[Regular]
5C5F5C5A	5C5F1A	[Regular]
5C5F5C5C	5C5F5C	[Regular]
5C5F5C5F	5C5F5C5F	[Preserve][LIKE]
5C5F5C61	5C5F61	[Regular]
5C5F5C62	5C5F08	[Regular]
5C5F5C6E	5C5F0A	[Regular]
5C5F5C72	5C5F0D	[Regular]
5C5F5C74	5C5F09	[Regular]
5C5F5C7E	5C5F7E	[Regular]
5C5F5C7F	5C5F7F	[Regular]
5C5F5C80	5C5F80	[Regular]
5C5F5C81	5C5F81	[Regular]
5C5F5C9F	5C5F9F	[Regular]
5C5F5CA0	5C5FA0	[Regular]
5C5F5CA1	5C5FA1	[Regular]
5C5F5CE0	5C5FE0	[Regular]
5C5F5CEF	5C5FEF	[Regular]
5C5F5CF9	5C5FF9	[Regular]
5C5F5CFA	5C5FFA	[Regular]
5C5F5CFC	5C5FFC	[Regular]
5C5F5CFD	5C5FFD	[Regular]
5C5F5CFE	5C5FFE	[Regular]
5C5F5CFF	5C5FFF	[Regular]
5C615C00	6100	[Trivial]
5C615C08	6108	[Trivial]
5C615C09	6109	[Trivial]
5C615C0A	610A	[Trivial]
5C615C0D	610D	[Trivial]
5C615C1A	611A	[Trivial]
5C615C22	6122	[Trivial]
5C615C25	615C25	[Regular]
5C615C27	6127	[Trivial]
5C615C30	6100	[Regular]
5C615C3F	613F	[Trivial]
5C615C40	6140	[Trivial]
5C615C5A	611A	[Regular]
5C615C5C	615C	[Regular]
5C615C5F	615C5F	[Regular]
5C615C61	6161	[Trivial]
5C615C62	6108	[Regular]
5C615C6E	610A	[Regular]
5C615C72	610D	[Regular]
5C615C74	6109	[Regular]
5C615C7E	617E	[Trivial]
5C615C7F	617F	[Trivial]
5C615C80	6180	[Trivial]
5C615C81	6181	[Trivial]
5C615C9F	619F	[Trivial]
5C615CA0	61A0	[Trivial]
5C615CA1	61A1	[Trivial]
5C615CE0	61E0	[Trivial]
5C615CEF	61EF	[Trivial]
5C615CF9	61F9	[Trivial]
5C615CFA	61FA	[Trivial]
5C615CFC	61FC	[Trivial]
5C615CFD	61FD	[Trivial]
5C615CFE	61FE	[Trivial]
5C615CFF	61FF	[Trivial]
5C625C00	0800	[Regular]
5C625C08	0808	[Regular]
5C625C09	0809	[Regular]
5C625C0A	080A	[Regular]
5C625C0D	080D	[Regular]
5C625C1A	081A	[Regular]
5C625C22	0822	[Regular]
5C625C25	085C25	[Regular]
5C625C27	0827	[Regular]
5C625C30	0800	[Regular]
5C625C3F	083F	[Regular]
5C625C40	0840	[Regular]
5C625C5A	081A	[Regular]
5C625C5C	085C	[Regular]
5C625C5F	085C5F	[Regular]
5C625C61	0861	[Regular]
5C625C62	0808	[Regular]
5C625C6E	080A	[Regular]
5C625C72	080D	[Regular]
5C625C74	0809	[Regular]
5C625C7E	087E	[Regular]
5C625C7F	087F	[Regular]
5C625C80	0880	[Regular]
5C625C81	0881	[Regular]
5C625C9F	089F	[Regular]
5C625CA0	08A0	[Regular]
5C625CA1	08A1	[Regular]
5C625CE0	08E0	[Regular]
5C625CEF	08EF	[Regular]
5C625CF9	08F9	[Regular]
5C625CFA	08FA	[Regular]
5C625CFC	08FC	[Regular]
5C625CFD	08FD	[Regular]
5C625CFE	08FE	[Regular]
5C625CFF	08FF	[Regular]
5C6E5C00	0A00	[Regular]
5C6E5C08	0A08	[Regular]
5C6E5C09	0A09	[Regular]
5C6E5C0A	0A0A	[Regular]
5C6E5C0D	0A0D	[Regular]
5C6E5C1A	0A1A	[Regular]
5C6E5C22	0A22	[Regular]
5C6E5C25	0A5C25	[Regular]
5C6E5C27	0A27	[Regular]
5C6E5C30	0A00	[Regular]
5C6E5C3F	0A3F	[Regular]
5C6E5C40	0A40	[Regular]
5C6E5C5A	0A1A	[Regular]
5C6E5C5C	0A5C	[Regular]
5C6E5C5F	0A5C5F	[Regular]
5C6E5C61	0A61	[Regular]
5C6E5C62	0A08	[Regular]
5C6E5C6E	0A0A	[Regular]
5C6E5C72	0A0D	[Regular]
5C6E5C74	0A09	[Regular]
5C6E5C7E	0A7E	[Regular]
5C6E5C7F	0A7F	[Regular]
5C6E5C80	0A80	[Regular]
5C6E5C81	0A81	[Regular]
5C6E5C9F	0A9F	[Regular]
5C6E5CA0	0AA0	[Regular]
5C6E5CA1	0AA1	[Regular]
5C6E5CE0	0AE0	[Regular]
5C6E5CEF	0AEF	[Regular]
5C6E5CF9	0AF9	[Regular]
5C6E5CFA	0AFA	[Regular]
5C6E5CFC	0AFC	[Regular]
5C6E5CFD	0AFD	[Regular]
5C6E5CFE	0AFE	[Regular]
5C6E5CFF	0AFF	[Regular]
5C725C00	0D00	[Regular]
5C725C08	0D08	[Regular]
5C725C09	0D09	[Regular]
5C725C0A	0D0A	[Regular]
5C725C0D	0D0D	[Regular]
5C725C1A	0D1A	[Regular]
5C725C22	0D22	[Regular]
5C725C25	0D5C25	[Regular]
5C725C27	0D27	[Regular]
5C725C30	0D00	[Regular]
5C725C3F	0D3F	[Regular]
5C725C40	0D40	[Regular]
5C725C5A	0D1A	[Regular]
5C725C5C	0D5C	[Regular]
5C725C5F	0D5C5F	[Regular]
5C725C61	0D61	[Regular]
5C725C62	0D08	[Regular]
5C725C6E	0D0A	[Regular]
5C725C72	0D0D	[Regular]
5C725C74	0D09	[Regular]
5C725C7E	0D7E	[Regular]
5C725C7F	0D7F	[Regular]
5C725C80	0D80	[Regular]
5C725C81	0D81	[Regular]
5C725C9F	0D9F	[Regular]
5C725CA0	0DA0	[Regular]
5C725CA1	0DA1	[Regular]
5C725CE0	0DE0	[Regular]
5C725CEF	0DEF	[Regular]
5C725CF9	0DF9	[Regular]
5C725CFA	0DFA	[Regular]
5C725CFC	0DFC	[Regular]
5C725CFD	0DFD	[Regular]
5C725CFE	0DFE	[Regular]
5C725CFF	0DFF	[Regular]
5C745C00	0900	[Regular]
5C745C08	0908	[Regular]
5C745C09	0909	[Regular]
5C745C0A	090A	[Regular]
5C745C0D	090D	[Regular]
5C745C1A	091A	[Regular]
5C745C22	0922	[Regular]
5C745C25	095C25	[Regular]
5C745C27	0927	[Regular]
5C745C30	0900	[Regular]
5C745C3F	093F	[Regular]
5C745C40	0940	[Regular]
5C745C5A	091A	[Regular]
5C745C5C	095C	[Regular]
5C745C5F	095C5F	[Regular]
5C745C61	0961	[Regular]
5C745C62	0908	[Regular]
5C745C6E	090A	[Regular]
5C745C72	090D	[Regular]
5C745C74	0909	[Regular]
5C745C7E	097E	[Regular]
5C745C7F	097F	[Regular]
5C745C80	0980	[Regular]
5C745C81	0981	[Regular]
5C745C9F	099F	[Regular]
5C745CA0	09A0	[Regular]
5C745CA1	09A1	[Regular]
5C745CE0	09E0	[Regular]
5C745CEF	09EF	[Regular]
5C745CF9	09F9	[Regular]
5C745CFA	09FA	[Regular]
5C745CFC	09FC	[Regular]
5C745CFD	09FD	[Regular]
5C745CFE	09FE	[Regular]
5C745CFF	09FF	[Regular]
5C7E5C00	7E00	[Trivial]
5C7E5C08	7E08	[Trivial]
5C7E5C09	7E09	[Trivial]
5C7E5C0A	7E0A	[Trivial]
5C7E5C0D	7E0D	[Trivial]
5C7E5C1A	7E1A	[Trivial]
5C7E5C22	7E22	[Trivial]
5C7E5C25	7E5C25	[Regular]
5C7E5C27	7E27	[Trivial]
5C7E5C30	7E00	[Regular]
5C7E5C3F	7E3F	[Trivial]
5C7E5C40	7E40	[Trivial]
5C7E5C5A	7E1A	[Regular]
5C7E5C5C	7E5C	[Regular]
5C7E5C5F	7E5C5F	[Regular]
5C7E5C61	7E61	[Trivial]
5C7E5C62	7E08	[Regular]
5C7E5C6E	7E0A	[Regular]
5C7E5C72	7E0D	[Regular]
5C7E5C74	7E09	[Regular]
5C7E5C7E	7E7E	[Trivial]
5C7E5C7F	7E7F	[Trivial]
5C7E5C80	7E80	[Trivial]
5C7E5C81	7E81	[Trivial]
5C7E5C9F	7E9F	[Trivial]
5C7E5CA0	7EA0	[Trivial]
5C7E5CA1	7EA1	[Trivial]
5C7E5CE0	7EE0	[Trivial]
5C7E5CEF	7EEF	[Trivial]
5C7E5CF9	7EF9	[Trivial]
5C7E5CFA	7EFA	[Trivial]
5C7E5CFC	7EFC	[Trivial]
5C7E5CFD	7EFD	[Trivial]
5C7E5CFE	7EFE	[Trivial]
5C7E5CFF	7EFF	[Trivial]
5C7F5C00	7F00	[Trivial]
5C7F5C08	7F08	[Trivial]
5C7F5C09	7F09	[Trivial]
5C7F5C0A	7F0A	[Trivial]
5C7F5C0D	7F0D	[Trivial]
5C7F5C1A	7F1A	[Trivial]
5C7F5C22	7F22	[Trivial]
5C7F5C25	7F5C25	[Regular]
5C7F5C27	7F27	[Trivial]
5C7F5C30	7F00	[Regular]
5C7F5C3F	7F3F	[Trivial]
5C7F5C40	7F40	[Trivial]
5C7F5C5A	7F1A	[Regular]
5C7F5C5C	7F5C	[Regular]
5C7F5C5F	7F5C5F	[Regular]
5C7F5C61	7F61	[Trivial]
5C7F5C62	7F08	[Regular]
5C7F5C6E	7F0A	[Regular]
5C7F5C72	7F0D	[Regular]
5C7F5C74	7F09	[Regular]
5C7F5C7E	7F7E	[Trivial]
5C7F5C7F	7F7F	[Trivial]
5C7F5C80	7F80	[Trivial]
5C7F5C81	7F81	[Trivial]
5C7F5C9F	7F9F	[Trivial]
5C7F5CA0	7FA0	[Trivial]
5C7F5CA1	7FA1	[Trivial]
5C7F5CE0	7FE0	[Trivial]
5C7F5CEF	7FEF	[Trivial]
5C7F5CF9	7FF9	[Trivial]
5C7F5CFA	7FFA	[Trivial]
5C7F5CFC	7FFC	[Trivial]
5C7F5CFD	7FFD	[Trivial]
5C7F5CFE	7FFE	[Trivial]
5C7F5CFF	7FFF	[Trivial]
5C805C00	8000	[Trivial][USER]
5C805C08	8008	[Trivial][USER]
5C805C09	8009	[Trivial][USER]
5C805C0A	800A	[Trivial][USER]
5C805C0D	800D	[Trivial][USER]
5C805C1A	801A	[Trivial][USER]
5C805C22	8022	[Trivial][USER]
5C805C25	805C25	[Regular]
5C805C27	8027	[Trivial][USER]
5C805C30	8000	[Regular]
5C805C3F	803F	[Trivial][USER]
5C805C40	8040	[Trivial][USER]
5C805C5A	801A	[Regular]
5C805C5C	805C	[Regular][USER]
5C805C5F	805C5F	[Regular]
5C805C61	8061	[Trivial][USER]
5C805C62	8008	[Regular][USER]
5C805C6E	800A	[Regular]
5C805C72	800D	[Regular]
5C805C74	8009	[Regular]
5C805C7E	807E	[Trivial][USER]
5C805C7F	807F	[Trivial][USER]
5C805C80	8080	[Trivial][USER]
5C805C81	8081	[Trivial][USER]
5C805C9F	809F	[Trivial][USER]
5C805CA0	80A0	[Trivial][USER]
5C805CA1	80A1	[Trivial][USER]
5C805CE0	80E0	[Trivial][USER]
5C805CEF	80EF	[Trivial][USER]
5C805CF9	80F9	[Trivial][USER]
5C805CFA	80FA	[Trivial][USER]
5C805CFC	80FC	[Trivial][USER]
5C805CFD	80FD	[Trivial][USER]
5C805CFE	80FE	[Trivial][USER]
5C805CFF	80FF	[Trivial][USER]
5C815C00	8100	[Trivial][USER]
5C815C08	8108	[Trivial][USER]
5C815C09	8109	[Trivial][USER]
5C815C0A	810A	[Trivial][USER]
5C815C0D	810D	[Trivial][USER]
5C815C1A	811A	[Trivial][USER]
5C815C22	8122	[Trivial][USER]
5C815C25	815C25	[Regular]
5C815C27	8127	[Trivial][USER]
5C815C30	8100	[Regular]
5C815C3F	813F	[Trivial][USER]
5C815C40	8140	[Trivial][USER]
5C815C5A	811A	[Regular]
5C815C5C	815C	[Regular][USER]
5C815C5F	815C5F	[Regular]
5C815C61	8161	[Trivial][USER]
5C815C62	8108	[Regular][USER]
5C815C6E	810A	[Regular]
5C815C72	810D	[Regular]
5C815C74	8109	[Regular]
5C815C7E	817E	[Trivial][USER]
5C815C7F	817F	[Trivial][USER]
5C815C80	8180	[Trivial][USER]
5C815C81	8181	[Trivial][USER]
5C815C9F	819F	[Trivial][USER]
5C815CA0	81A0	[Trivial][USER]
5C815CA1	81A1	[Trivial][USER]
5C815CE0	81E0	[Trivial][USER]
5C815CEF	81EF	[Trivial][USER]
5C815CF9	81F9	[Trivial][USER]
5C815CFA	81FA	[Trivial][USER]
5C815CFC	81FC	[Trivial][USER]
5C815CFD	81FD	[Trivial][USER]
5C815CFE	81FE	[Trivial][USER]
5C815CFF	81FF	[Trivial][USER]
5C9F5C00	9F00	[Trivial][USER]
5C9F5C08	9F08	[Trivial][USER]
5C9F5C09	9F09	[Trivial][USER]
5C9F5C0A	9F0A	[Trivial][USER]
5C9F5C0D	9F0D	[Trivial][USER]
5C9F5C1A	9F1A	[Trivial][USER]
5C9F5C22	9F22	[Trivial][USER]
5C9F5C25	9F5C25	[Regular]
5C9F5C27	9F27	[Trivial][USER]
5C9F5C30	9F00	[Regular]
5C9F5C3F	9F3F	[Trivial][USER]
5C9F5C40	9F40	[Trivial][USER]
5C9F5C5A	9F1A	[Regular]
5C9F5C5C	9F5C	[Regular][USER]
5C9F5C5F	9F5C5F	[Regular]
5C9F5C61	9F61	[Trivial][USER]
5C9F5C62	9F08	[Regular][USER]
5C9F5C6E	9F0A	[Regular]
5C9F5C72	9F0D	[Regular]
5C9F5C74	9F09	[Regular]
5C9F5C7E	9F7E	[Trivial][USER]
5C9F5C7F	9F7F	[Trivial][USER]
5C9F5C80	9F80	[Trivial][USER]
5C9F5C81	9F81	[Trivial][USER]
5C9F5C9F	9F9F	[Trivial][USER]
5C9F5CA0	9FA0	[Trivial][USER]
5C9F5CA1	9FA1	[Trivial][USER]
5C9F5CE0	9FE0	[Trivial][USER]
5C9F5CEF	9FEF	[Trivial][USER]
5C9F5CF9	9FF9	[Trivial][USER]
5C9F5CFA	9FFA	[Trivial][USER]
5C9F5CFC	9FFC	[Trivial][USER]
5C9F5CFD	9FFD	[Trivial][USER]
5C9F5CFE	9FFE	[Trivial][USER]
5C9F5CFF	9FFF	[Trivial][USER]
5CA05C00	A000	[Trivial][USER]
5CA05C08	A008	[Trivial][USER]
5CA05C09	A009	[Trivial][USER]
5CA05C0A	A00A	[Trivial][USER]
5CA05C0D	A00D	[Trivial][USER]
5CA05C1A	A01A	[Trivial][USER]
5CA05C22	A022	[Trivial][USER]
5CA05C25	A05C25	[Regular]
5CA05C27	A027	[Trivial][USER]
5CA05C30	A000	[Regular]
5CA05C3F	A03F	[Trivial][USER]
5CA05C40	A040	[Trivial][USER]
5CA05C5A	A01A	[Regular]
5CA05C5C	A05C	[Regular][USER]
5CA05C5F	A05C5F	[Regular]
5CA05C61	A061	[Trivial][USER]
5CA05C62	A008	[Regular][USER]
5CA05C6E	A00A	[Regular]
5CA05C72	A00D	[Regular]
5CA05C74	A009	[Regular]
5CA05C7E	A07E	[Trivial][USER]
5CA05C7F	A07F	[Trivial][USER]
5CA05C80	A080	[Trivial][USER]
5CA05C81	A081	[Trivial][USER]
5CA05C9F	A09F	[Trivial][USER]
5CA05CA0	A0A0	[Trivial][USER]
5CA05CA1	A0A1	[Trivial][USER]
5CA05CE0	A0E0	[Trivial][USER]
5CA05CEF	A0EF	[Trivial][USER]
5CA05CF9	A0F9	[Trivial][USER]
5CA05CFA	A0FA	[Trivial][USER]
5CA05CFC	A0FC	[Trivial][USER]
5CA05CFD	A0FD	[Trivial][USER]
5CA05CFE	A0FE	[Trivial][USER]
5CA05CFF	A0FF	[Trivial][USER]
5CA15C00	A100	[Trivial][USER]
5CA15C08	A108	[Trivial][USER]
5CA15C09	A109	[Trivial][USER]
5CA15C0A	A10A	[Trivial][USER]
5CA15C0D	A10D	[Trivial][USER]
5CA15C1A	A11A	[Trivial][USER]
5CA15C22	A122	[Trivial][USER]
5CA15C25	A15C25	[Regular]
5CA15C27	A127	[Trivial][USER]
5CA15C30	A100	[Regular]
5CA15C3F	A13F	[Trivial][USER]
5CA15C40	A140	[Trivial][USER]
5CA15C5A	A11A	[Regular]
5CA15C5C	A15C	[Regular][USER]
5CA15C5F	A15C5F	[Regular]
5CA15C61	A161	[Trivial][USER]
5CA15C62	A108	[Regular][USER]
5CA15C6E	A10A	[Regular]
5CA15C72	A10D	[Regular]
5CA15C74	A109	[Regular]
5CA15C7E	A17E	[Trivial][USER]
5CA15C7F	A17F	[Trivial][USER]
5CA15C80	A180	[Trivial][USER]
5CA15C81	A181	[Trivial][USER]
5CA15C9F	A19F	[Trivial][USER]
5CA15CA0	A1A0	[Trivial][USER]
5CA15CA1	A1A1	[Trivial][USER]
5CA15CE0	A1E0	[Trivial][USER]
5CA15CEF	A1EF	[Trivial][USER]
5CA15CF9	A1F9	[Trivial][USER]
5CA15CFA	A1FA	[Trivial][USER]
5CA15CFC	A1FC	[Trivial][USER]
5CA15CFD	A1FD	[Trivial][USER]
5CA15CFE	A1FE	[Trivial][USER]
5CA15CFF	A1FF	[Trivial][USER]
5CE05C00	E000	[Trivial][USER]
5CE05C08	E008	[Trivial][USER]
5CE05C09	E009	[Trivial][USER]
5CE05C0A	E00A	[Trivial][USER]
5CE05C0D	E00D	[Trivial][USER]
5CE05C1A	E01A	[Trivial][USER]
5CE05C22	E022	[Trivial][USER]
5CE05C25	E05C25	[Regular]
5CE05C27	E027	[Trivial][USER]
5CE05C30	E000	[Regular]
5CE05C3F	E03F	[Trivial][USER]
5CE05C40	E040	[Trivial][USER]
5CE05C5A	E01A	[Regular]
5CE05C5C	E05C	[Regular][USER]
5CE05C5F	E05C5F	[Regular]
5CE05C61	E061	[Trivial][USER]
5CE05C62	E008	[Regular][USER]
5CE05C6E	E00A	[Regular]
5CE05C72	E00D	[Regular]
5CE05C74	E009	[Regular]
5CE05C7E	E07E	[Trivial][USER]
5CE05C7F	E07F	[Trivial][USER]
5CE05C80	E080	[Trivial][USER]
5CE05C81	E081	[Trivial][USER]
5CE05C9F	E09F	[Trivial][USER]
5CE05CA0	E0A0	[Trivial][USER]
5CE05CA1	E0A1	[Trivial][USER]
5CE05CE0	E0E0	[Trivial][USER]
5CE05CEF	E0EF	[Trivial][USER]
5CE05CF9	E0F9	[Trivial][USER]
5CE05CFA	E0FA	[Trivial][USER]
5CE05CFC	E0FC	[Trivial][USER]
5CE05CFD	E0FD	[Trivial][USER]
5CE05CFE	E0FE	[Trivial][USER]
5CE05CFF	E0FF	[Trivial][USER]
5CEF5C00	EF00	[Trivial][USER]
5CEF5C08	EF08	[Trivial][USER]
5CEF5C09	EF09	[Trivial][USER]
5CEF5C0A	EF0A	[Trivial][USER]
5CEF5C0D	EF0D	[Trivial][USER]
5CEF5C1A	EF1A	[Trivial][USER]
5CEF5C22	EF22	[Trivial][USER]
5CEF5C25	EF5C25	[Regular]
5CEF5C27	EF27	[Trivial][USER]
5CEF5C30	EF00	[Regular]
5CEF5C3F	EF3F	[Trivial][USER]
5CEF5C40	EF40	[Trivial][USER]
5CEF5C5A	EF1A	[Regular]
5CEF5C5C	EF5C	[Regular][USER]
5CEF5C5F	EF5C5F	[Regular]
5CEF5C61	EF61	[Trivial][USER]
5CEF5C62	EF08	[Regular][USER]
5CEF5C6E	EF0A	[Regular]
5CEF5C72	EF0D	[Regular]
5CEF5C74	EF09	[Regular]
5CEF5C7E	EF7E	[Trivial][USER]
5CEF5C7F	EF7F	[Trivial][USER]
5CEF5C80	EF80	[Trivial][USER]
5CEF5C81	EF81	[Trivial][USER]
5CEF5C9F	EF9F	[Trivial][USER]
5CEF5CA0	EFA0	[Trivial][USER]
5CEF5CA1	EFA1	[Trivial][USER]
5CEF5CE0	EFE0	[Trivial][USER]
5CEF5CEF	EFEF	[Trivial][USER]
5CEF5CF9	EFF9	[Trivial][USER]
5CEF5CFA	EFFA	[Trivial][USER]
5CEF5CFC	EFFC	[Trivial][USER]
5CEF5CFD	EFFD	[Trivial][USER]
5CEF5CFE	EFFE	[Trivial][USER]
5CEF5CFF	EFFF	[Trivial][USER]
5CF95C00	F900	[Trivial][USER]
5CF95C08	F908	[Trivial][USER]
5CF95C09	F909	[Trivial][USER]
5CF95C0A	F90A	[Trivial][USER]
5CF95C0D	F90D	[Trivial][USER]
5CF95C1A	F91A	[Trivial][USER]
5CF95C22	F922	[Trivial][USER]
5CF95C25	F95C25	[Regular]
5CF95C27	F927	[Trivial][USER]
5CF95C30	F900	[Regular]
5CF95C3F	F93F	[Trivial][USER]
5CF95C40	F940	[Trivial][USER]
5CF95C5A	F91A	[Regular]
5CF95C5C	F95C	[Regular][USER]
5CF95C5F	F95C5F	[Regular]
5CF95C61	F961	[Trivial][USER]
5CF95C62	F908	[Regular][USER]
5CF95C6E	F90A	[Regular]
5CF95C72	F90D	[Regular]
5CF95C74	F909	[Regular]
5CF95C7E	F97E	[Trivial][USER]
5CF95C7F	F97F	[Trivial][USER]
5CF95C80	F980	[Trivial][USER]
5CF95C81	F981	[Trivial][USER]
5CF95C9F	F99F	[Trivial][USER]
5CF95CA0	F9A0	[Trivial][USER]
5CF95CA1	F9A1	[Trivial][USER]
5CF95CE0	F9E0	[Trivial][USER]
5CF95CEF	F9EF	[Trivial][USER]
5CF95CF9	F9F9	[Trivial][USER]
5CF95CFA	F9FA	[Trivial][USER]
5CF95CFC	F9FC	[Trivial][USER]
5CF95CFD	F9FD	[Trivial][USER]
5CF95CFE	F9FE	[Trivial][USER]
5CF95CFF	F9FF	[Trivial][USER]
5CFA5C00	FA00	[Trivial][USER]
5CFA5C08	FA08	[Trivial][USER]
5CFA5C09	FA09	[Trivial][USER]
5CFA5C0A	FA0A	[Trivial][USER]
5CFA5C0D	FA0D	[Trivial][USER]
5CFA5C1A	FA1A	[Trivial][USER]
5CFA5C22	FA22	[Trivial][USER]
5CFA5C25	FA5C25	[Regular]
5CFA5C27	FA27	[Trivial][USER]
5CFA5C30	FA00	[Regular]
5CFA5C3F	FA3F	[Trivial][USER]
5CFA5C40	FA40	[Trivial][USER]
5CFA5C5A	FA1A	[Regular]
5CFA5C5C	FA5C	[Regular][USER]
5CFA5C5F	FA5C5F	[Regular]
5CFA5C61	FA61	[Trivial][USER]
5CFA5C62	FA08	[Regular][USER]
5CFA5C6E	FA0A	[Regular]
5CFA5C72	FA0D	[Regular]
5CFA5C74	FA09	[Regular]
5CFA5C7E	FA7E	[Trivial][USER]
5CFA5C7F	FA7F	[Trivial][USER]
5CFA5C80	FA80	[Trivial][USER]
5CFA5C81	FA81	[Trivial][USER]
5CFA5C9F	FA9F	[Trivial][USER]
5CFA5CA0	FAA0	[Trivial][USER]
5CFA5CA1	FAA1	[Trivial][USER]
5CFA5CE0	FAE0	[Trivial][USER]
5CFA5CEF	FAEF	[Trivial][USER]
5CFA5CF9	FAF9	[Trivial][USER]
5CFA5CFA	FAFA	[Trivial][USER]
5CFA5CFC	FAFC	[Trivial][USER]
5CFA5CFD	FAFD	[Trivial][USER]
5CFA5CFE	FAFE	[Trivial][USER]
5CFA5CFF	FAFF	[Trivial][USER]
5CFC5C00	FC00	[Trivial][USER]
5CFC5C08	FC08	[Trivial][USER]
5CFC5C09	FC09	[Trivial][USER]
5CFC5C0A	FC0A	[Trivial][USER]
5CFC5C0D	FC0D	[Trivial][USER]
5CFC5C1A	FC1A	[Trivial][USER]
5CFC5C22	FC22	[Trivial][USER]
5CFC5C25	FC5C25	[Regular]
5CFC5C27	FC27	[Trivial][USER]
5CFC5C30	FC00	[Regular]
5CFC5C3F	FC3F	[Trivial][USER]
5CFC5C40	FC40	[Trivial][USER]
5CFC5C5A	FC1A	[Regular]
5CFC5C5C	FC5C	[Regular][USER]
5CFC5C5F	FC5C5F	[Regular]
5CFC5C61	FC61	[Trivial][USER]
5CFC5C62	FC08	[Regular][USER]
5CFC5C6E	FC0A	[Regular]
5CFC5C72	FC0D	[Regular]
5CFC5C74	FC09	[Regular]
5CFC5C7E	FC7E	[Trivial][USER]
5CFC5C7F	FC7F	[Trivial][USER]
5CFC5C80	FC80	[Trivial][USER]
5CFC5C81	FC81	[Trivial][USER]
5CFC5C9F	FC9F	[Trivial][USER]
5CFC5CA0	FCA0	[Trivial][USER]
5CFC5CA1	FCA1	[Trivial][USER]
5CFC5CE0	FCE0	[Trivial][USER]
5CFC5CEF	FCEF	[Trivial][USER]
5CFC5CF9	FCF9	[Trivial][USER]
5CFC5CFA	FCFA	[Trivial][USER]
5CFC5CFC	FCFC	[Trivial][USER]
5CFC5CFD	FCFD	[Trivial][USER]
5CFC5CFE	FCFE	[Trivial][USER]
5CFC5CFF	FCFF	[Trivial][USER]
5CFD5C00	FD00	[Trivial][USER]
5CFD5C08	FD08	[Trivial][USER]
5CFD5C09	FD09	[Trivial][USER]
5CFD5C0A	FD0A	[Trivial][USER]
5CFD5C0D	FD0D	[Trivial][USER]
5CFD5C1A	FD1A	[Trivial][USER]
5CFD5C22	FD22	[Trivial][USER]
5CFD5C25	FD5C25	[Regular]
5CFD5C27	FD27	[Trivial][USER]
5CFD5C30	FD00	[Regular]
5CFD5C3F	FD3F	[Trivial][USER]
5CFD5C40	FD40	[Trivial][USER]
5CFD5C5A	FD1A	[Regular]
5CFD5C5C	FD5C	[Regular][USER]
5CFD5C5F	FD5C5F	[Regular]
5CFD5C61	FD61	[Trivial][USER]
5CFD5C62	FD08	[Regular][USER]
5CFD5C6E	FD0A	[Regular]
5CFD5C72	FD0D	[Regular]
5CFD5C74	FD09	[Regular]
5CFD5C7E	FD7E	[Trivial][USER]
5CFD5C7F	FD7F	[Trivial][USER]
5CFD5C80	FD80	[Trivial][USER]
5CFD5C81	FD81	[Trivial][USER]
5CFD5C9F	FD9F	[Trivial][USER]
5CFD5CA0	FDA0	[Trivial][USER]
5CFD5CA1	FDA1	[Trivial][USER]
5CFD5CE0	FDE0	[Trivial][USER]
5CFD5CEF	FDEF	[Trivial][USER]
5CFD5CF9	FDF9	[Trivial][USER]
5CFD5CFA	FDFA	[Trivial][USER]
5CFD5CFC	FDFC	[Trivial][USER]
5CFD5CFD	FDFD	[Trivial][USER]
5CFD5CFE	FDFE	[Trivial][USER]
5CFD5CFF	FDFF	[Trivial][USER]
5CFE5C00	FE00	[Trivial][USER]
5CFE5C08	FE08	[Trivial][USER]
5CFE5C09	FE09	[Trivial][USER]
5CFE5C0A	FE0A	[Trivial][USER]
5CFE5C0D	FE0D	[Trivial][USER]
5CFE5C1A	FE1A	[Trivial][USER]
5CFE5C22	FE22	[Trivial][USER]
5CFE5C25	FE5C25	[Regular]
5CFE5C27	FE27	[Trivial][USER]
5CFE5C30	FE00	[Regular]
5CFE5C3F	FE3F	[Trivial][USER]
5CFE5C40	FE40	[Trivial][USER]
5CFE5C5A	FE1A	[Regular]
5CFE5C5C	FE5C	[Regular][USER]
5CFE5C5F	FE5C5F	[Regular]
5CFE5C61	FE61	[Trivial][USER]
5CFE5C62	FE08	[Regular][USER]
5CFE5C6E	FE0A	[Regular]
5CFE5C72	FE0D	[Regular]
5CFE5C74	FE09	[Regular]
5CFE5C7E	FE7E	[Trivial][USER]
5CFE5C7F	FE7F	[Trivial][USER]
5CFE5C80	FE80	[Trivial][USER]
5CFE5C81	FE81	[Trivial][USER]
5CFE5C9F	FE9F	[Trivial][USER]
5CFE5CA0	FEA0	[Trivial][USER]
5CFE5CA1	FEA1	[Trivial][USER]
5CFE5CE0	FEE0	[Trivial][USER]
5CFE5CEF	FEEF	[Trivial][USER]
5CFE5CF9	FEF9	[Trivial][USER]
5CFE5CFA	FEFA	[Trivial][USER]
5CFE5CFC	FEFC	[Trivial][USER]
5CFE5CFD	FEFD	[Trivial][USER]
5CFE5CFE	FEFE	[Trivial][USER]
5CFE5CFF	FEFF	[Trivial][USER]
5CFF5C00	FF00	[Trivial][USER]
5CFF5C08	FF08	[Trivial][USER]
5CFF5C09	FF09	[Trivial][USER]
5CFF5C0A	FF0A	[Trivial][USER]
5CFF5C0D	FF0D	[Trivial][USER]
5CFF5C1A	FF1A	[Trivial][USER]
5CFF5C22	FF22	[Trivial][USER]
5CFF5C25	FF5C25	[Regular]
5CFF5C27	FF27	[Trivial][USER]
5CFF5C30	FF00	[Regular]
5CFF5C3F	FF3F	[Trivial][USER]
5CFF5C40	FF40	[Trivial][USER]
5CFF5C5A	FF1A	[Regular]
5CFF5C5C	FF5C	[Regular][USER]
5CFF5C5F	FF5C5F	[Regular]
5CFF5C61	FF61	[Trivial][USER]
5CFF5C62	FF08	[Regular][USER]
5CFF5C6E	FF0A	[Regular]
5CFF5C72	FF0D	[Regular]
5CFF5C74	FF09	[Regular]
5CFF5C7E	FF7E	[Trivial][USER]
5CFF5C7F	FF7F	[Trivial][USER]
5CFF5C80	FF80	[Trivial][USER]
5CFF5C81	FF81	[Trivial][USER]
5CFF5C9F	FF9F	[Trivial][USER]
5CFF5CA0	FFA0	[Trivial][USER]
5CFF5CA1	FFA1	[Trivial][USER]
5CFF5CE0	FFE0	[Trivial][USER]
5CFF5CEF	FFEF	[Trivial][USER]
5CFF5CF9	FFF9	[Trivial][USER]
5CFF5CFA	FFFA	[Trivial][USER]
5CFF5CFC	FFFC	[Trivial][USER]
5CFF5CFD	FFFD	[Trivial][USER]
5CFF5CFE	FFFE	[Trivial][USER]
5CFF5CFF	FFFF	[Trivial][USER]
DROP TABLE t1;
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP FUNCTION unescape;
DROP FUNCTION unescape_type;
DROP FUNCTION wellformedness;
DROP FUNCTION mysql_real_escape_string_generated;
DROP FUNCTION iswellformed;
DROP TABLE allbytes;
SET sql_mode = DEFAULT;
# End of ctype_backslash.inc
SET NAMES latin1;
#
# MDEV-7149 Constant condition propagation erroneously applied for LIKE
#
CREATE TABLE t1 AS SELECT REPEAT('a', 10) AS c1 LIMIT 0;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
INSERT INTO t1 VALUES ('a'),('a ');
SELECT * FROM t1 WHERE CONCAT(c1)='a';
c1
a
a 
SELECT * FROM t1 WHERE CONCAT(c1) LIKE 'a ';
c1
a 
SELECT * FROM t1 WHERE CONCAT(c1)='a' AND CONCAT(c1) LIKE 'a ';
c1
a 
EXPLAIN EXTENDED SELECT * FROM t1 WHERE CONCAT(c1)='a' AND CONCAT(c1) LIKE 'a ';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`c1` AS `c1` from `test`.`t1` where concat(`test`.`t1`.`c1`) = 'a' and concat(`test`.`t1`.`c1`) like 'a '
DROP TABLE t1;
CREATE TABLE t1 AS SELECT REPEAT('a', 10) AS c1 LIMIT 0;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
INSERT INTO t1 VALUES ('a'),('a ');
SELECT * FROM t1 WHERE 'a'=CONCAT(c1);
c1
a
a 
SELECT * FROM t1 WHERE 'a ' LIKE CONCAT(c1);
c1
a 
SELECT * FROM t1 WHERE 'a'=CONCAT(c1) AND 'a ' LIKE CONCAT(c1);
c1
a 
EXPLAIN EXTENDED SELECT * FROM t1 WHERE 'a'=CONCAT(c1) AND 'a ' LIKE CONCAT(c1);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`c1` AS `c1` from `test`.`t1` where 'a' = concat(`test`.`t1`.`c1`) and 'a ' like concat(`test`.`t1`.`c1`)
DROP TABLE t1;
CREATE TABLE t1 AS SELECT REPEAT('a', 10) AS c1 LIMIT 0;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
INSERT INTO t1 VALUES ('%'),('% ');
SELECT * FROM t1 WHERE '% '=CONCAT(c1);
c1
%
% 
SELECT * FROM t1 WHERE 'a' LIKE CONCAT(c1);
c1
%
SELECT * FROM t1 WHERE '% '=CONCAT(c1) AND 'a' LIKE CONCAT(c1);
c1
%
EXPLAIN EXTENDED SELECT * FROM t1 WHERE '% '=CONCAT(c1) AND 'a' LIKE CONCAT(c1);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`c1` AS `c1` from `test`.`t1` where '% ' = concat(`test`.`t1`.`c1`) and 'a' like concat(`test`.`t1`.`c1`)
DROP TABLE t1;
CREATE TABLE t1 AS SELECT REPEAT('a', 10) AS c1 LIMIT 0;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
INSERT INTO t1 VALUES ('%'),('% ');
SELECT * FROM t1 WHERE '%'=CONCAT(c1);
c1
%
% 
SELECT * FROM t1 WHERE 'a' LIKE CONCAT(c1);
c1
%
SELECT * FROM t1 WHERE '%'=CONCAT(c1) AND 'a' LIKE CONCAT(c1);
c1
%
EXPLAIN EXTENDED SELECT * FROM t1 WHERE '%'=CONCAT(c1) AND 'a' LIKE CONCAT(c1);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`c1` AS `c1` from `test`.`t1` where '%' = concat(`test`.`t1`.`c1`) and 'a' like concat(`test`.`t1`.`c1`)
DROP TABLE t1;
#
# MDEV-8694 Wrong result for SELECT..WHERE a NOT LIKE 'a ' AND a='a'
#
CREATE TABLE t1 AS SELECT SPACE(10) AS a LIMIT 0;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(10) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
INSERT INTO t1 VALUES ('a'),('a ');
SELECT a, LENGTH(a) FROM t1 WHERE a NOT LIKE 'a ';
a	LENGTH(a)
a	1
SELECT a, LENGTH(a) FROM t1 WHERE a NOT LIKE 'a ' AND a='a';
a	LENGTH(a)
a	1
EXPLAIN EXTENDED SELECT a, LENGTH(a) FROM t1 WHERE a NOT LIKE 'a ' AND a='a';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`a` AS `a`,length(`test`.`t1`.`a`) AS `LENGTH(a)` from `test`.`t1` where `test`.`t1`.`a` = 'a' and `test`.`t1`.`a`  not like 'a '
DROP TABLE t1;
#
# End of MDEV-8694
#
SET NAMES latin1 COLLATE latin1_bin;
#
# MDEV-7149 Constant condition propagation erroneously applied for LIKE
#
CREATE TABLE t1 AS SELECT REPEAT('a', 10) AS c1 LIMIT 0;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
INSERT INTO t1 VALUES ('a'),('a ');
SELECT * FROM t1 WHERE CONCAT(c1)='a';
c1
a
a 
SELECT * FROM t1 WHERE CONCAT(c1) LIKE 'a ';
c1
a 
SELECT * FROM t1 WHERE CONCAT(c1)='a' AND CONCAT(c1) LIKE 'a ';
c1
a 
EXPLAIN EXTENDED SELECT * FROM t1 WHERE CONCAT(c1)='a' AND CONCAT(c1) LIKE 'a ';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`c1` AS `c1` from `test`.`t1` where concat(`test`.`t1`.`c1`) = 'a' and concat(`test`.`t1`.`c1`) like 'a '
DROP TABLE t1;
CREATE TABLE t1 AS SELECT REPEAT('a', 10) AS c1 LIMIT 0;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
INSERT INTO t1 VALUES ('a'),('a ');
SELECT * FROM t1 WHERE 'a'=CONCAT(c1);
c1
a
a 
SELECT * FROM t1 WHERE 'a ' LIKE CONCAT(c1);
c1
a 
SELECT * FROM t1 WHERE 'a'=CONCAT(c1) AND 'a ' LIKE CONCAT(c1);
c1
a 
EXPLAIN EXTENDED SELECT * FROM t1 WHERE 'a'=CONCAT(c1) AND 'a ' LIKE CONCAT(c1);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`c1` AS `c1` from `test`.`t1` where 'a' = concat(`test`.`t1`.`c1`) and 'a ' like concat(`test`.`t1`.`c1`)
DROP TABLE t1;
CREATE TABLE t1 AS SELECT REPEAT('a', 10) AS c1 LIMIT 0;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
INSERT INTO t1 VALUES ('%'),('% ');
SELECT * FROM t1 WHERE '% '=CONCAT(c1);
c1
%
% 
SELECT * FROM t1 WHERE 'a' LIKE CONCAT(c1);
c1
%
SELECT * FROM t1 WHERE '% '=CONCAT(c1) AND 'a' LIKE CONCAT(c1);
c1
%
EXPLAIN EXTENDED SELECT * FROM t1 WHERE '% '=CONCAT(c1) AND 'a' LIKE CONCAT(c1);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`c1` AS `c1` from `test`.`t1` where '% ' = concat(`test`.`t1`.`c1`) and 'a' like concat(`test`.`t1`.`c1`)
DROP TABLE t1;
CREATE TABLE t1 AS SELECT REPEAT('a', 10) AS c1 LIMIT 0;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
INSERT INTO t1 VALUES ('%'),('% ');
SELECT * FROM t1 WHERE '%'=CONCAT(c1);
c1
%
% 
SELECT * FROM t1 WHERE 'a' LIKE CONCAT(c1);
c1
%
SELECT * FROM t1 WHERE '%'=CONCAT(c1) AND 'a' LIKE CONCAT(c1);
c1
%
EXPLAIN EXTENDED SELECT * FROM t1 WHERE '%'=CONCAT(c1) AND 'a' LIKE CONCAT(c1);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`c1` AS `c1` from `test`.`t1` where '%' = concat(`test`.`t1`.`c1`) and 'a' like concat(`test`.`t1`.`c1`)
DROP TABLE t1;
#
# MDEV-8694 Wrong result for SELECT..WHERE a NOT LIKE 'a ' AND a='a'
#
CREATE TABLE t1 AS SELECT SPACE(10) AS a LIMIT 0;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
INSERT INTO t1 VALUES ('a'),('a ');
SELECT a, LENGTH(a) FROM t1 WHERE a NOT LIKE 'a ';
a	LENGTH(a)
a	1
SELECT a, LENGTH(a) FROM t1 WHERE a NOT LIKE 'a ' AND a='a';
a	LENGTH(a)
a	1
EXPLAIN EXTENDED SELECT a, LENGTH(a) FROM t1 WHERE a NOT LIKE 'a ' AND a='a';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`a` AS `a`,length(`test`.`t1`.`a`) AS `LENGTH(a)` from `test`.`t1` where `test`.`t1`.`a` = 'a' and `test`.`t1`.`a`  not like 'a '
DROP TABLE t1;
#
# End of MDEV-8694
#
#
# MDEV-6752 Trailing incomplete characters are not replaced to question marks on conversion
#
SET NAMES utf8, character_set_connection=latin1;
SELECT 'Â';
?
?
SELECT HEX('Â');
HEX('Â')
3F
SELECT HEX(CAST('Â' AS CHAR CHARACTER SET utf8));
HEX(CAST('Â' AS CHAR CHARACTER SET utf8))
3F
SELECT HEX(CAST('Â' AS CHAR CHARACTER SET latin1));
HEX(CAST('Â' AS CHAR CHARACTER SET latin1))
3F
SELECT HEX(CONVERT('Â' USING utf8));
HEX(CONVERT('Â' USING utf8))
3F
SELECT HEX(CONVERT('Â' USING latin1));
HEX(CONVERT('Â' USING latin1))
3F
SELECT 'Âx';
?x
?x
SELECT HEX('Âx');
HEX('Âx')
3F78
SELECT HEX(CAST('Âx' AS CHAR CHARACTER SET utf8));
HEX(CAST('Âx' AS CHAR CHARACTER SET utf8))
3F78
SELECT HEX(CAST('Âx' AS CHAR CHARACTER SET latin1));
HEX(CAST('Âx' AS CHAR CHARACTER SET latin1))
3F78
SELECT HEX(CONVERT('Âx' USING utf8));
HEX(CONVERT('Âx' USING utf8))
3F78
SELECT HEX(CONVERT('Âx' USING latin1));
HEX(CONVERT('Âx' USING latin1))
3F78
SET NAMES utf8;
CREATE TABLE t1 (a VARCHAR(10) CHARACTER SET latin1);
INSERT IGNORE INTO t1 VALUES ('Â'),('Â#');
Warnings:
Warning	1366	Incorrect string value: '\xC2' for column 'a' at row 1
Warning	1366	Incorrect string value: '\xC2#' for column 'a' at row 2
SHOW WARNINGS;
Level	Code	Message
Warning	1366	Incorrect string value: '\xC2' for column 'a' at row 1
Warning	1366	Incorrect string value: '\xC2#' for column 'a' at row 2
SELECT HEX(a),a FROM t1;
HEX(a)	a
3F	?
3F23	?#
DROP TABLE t1;
#
# MDEV-7629 Regression: Bit and hex string literals changed column names in 10.0.14
#
SELECT _latin1 0x7E, _latin1 X'7E', _latin1 B'01111110';
_latin1 0x7E	_latin1 X'7E'	_latin1 B'01111110'
~	~	~
#
# End of 10.0 tests
#
#
# Start of 10.1 tests
#
#
# MDEV-8661 Wrong result for SELECT..WHERE a='a' AND a='a' COLLATE latin1_bin
#
SET NAMES latin1;
CREATE TABLE t1 (a CHAR(10));
INSERT INTO t1 VALUES ('a'),('A');
SELECT * FROM t1 WHERE a='a' AND a='a' COLLATE latin1_bin;
a
a
DROP TABLE t1;
CREATE TABLE t1 (a VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_swedish_ci);
INSERT INTO t1 VALUES ('a'),('A');
SELECT * FROM t1 WHERE a='a' COLLATE latin1_bin AND a='A' COLLATE latin1_swedish_ci;
a
a
DROP TABLE t1;
#
# MDEV-8679 Equal field propagation is not used for VARCHAR when it safely could
#
CREATE TABLE t1 (a VARCHAR(10));
INSERT INTO t1 VALUES ('10'),('11'),('12');
EXPLAIN EXTENDED SELECT * FROM t1 WHERE a='10' AND IF(a='10',1,0)=1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	3	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`a` AS `a` from `test`.`t1` where `test`.`t1`.`a` = '10'
EXPLAIN EXTENDED SELECT * FROM t1 WHERE a='10' AND CASE WHEN a='10' THEN 1 ELSE 0 END;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	3	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`a` AS `a` from `test`.`t1` where `test`.`t1`.`a` = '10'
DROP TABLE t1;
#
# MDEV-8680 Wrong result for SELECT..WHERE a IN ('a' COLLATE latin1_bin,'b') AND a='a'
#
SET NAMES latin1;
CREATE TABLE t1 (a VARCHAR(10));
INSERT INTO t1 VALUES ('a'),('A');
SELECT * FROM t1 WHERE a IN ('a' COLLATE latin1_bin,'b');
a
a
SELECT * FROM t1 WHERE a IN ('a' COLLATE latin1_bin,'b') AND a='a';
a
a
EXPLAIN EXTENDED SELECT * FROM t1 WHERE a IN ('a' COLLATE latin1_bin,'b') AND a='a';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`a` AS `a` from `test`.`t1` where `test`.`t1`.`a` = 'a' and `test`.`t1`.`a` in (<cache>('a' collate latin1_bin),'b')
DROP TABLE t1;
#
# MDEV-8698 Wrong result for SELECT..WHERE a BETWEEN 'a' AND 'c' COLLATE latin1_bin;
#
SET NAMES latin1;
CREATE TABLE t1 (a VARCHAR(10));
INSERT INTO t1 VALUES ('a'),('A'),('b'),('B'),('c'),('C');
SELECT * FROM t1 WHERE a BETWEEN 'a' AND 'c' COLLATE latin1_bin;
a
a
b
c
SELECT * FROM t1 WHERE a BETWEEN 'a' AND 'c' COLLATE latin1_bin AND a='a';
a
a
EXPLAIN EXTENDED SELECT * FROM t1 WHERE a BETWEEN 'a' AND 'c' COLLATE latin1_bin AND a='a';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`a` AS `a` from `test`.`t1` where `test`.`t1`.`a` = 'a' and `test`.`t1`.`a` between 'a' and <cache>('c' collate latin1_bin)
DROP TABLE t1;
#
# MDEV-8707 Wrong result for SELECT..WHERE varchar_column=DATE'2001-01-01' AND varchar_column='2001-01-01'
#
SET NAMES latin1;
CREATE TABLE t1 (a VARCHAR(40));
INSERT INTO t1 VALUES ('2001-01-01'),('2001-01-01x');
SELECT * FROM t1 WHERE a=DATE'2001-01-01' AND a='2001-01-01';
a
2001-01-01
SELECT * FROM t1 WHERE a='2001-01-01' AND a=DATE'2001-01-01';
a
2001-01-01
SELECT * FROM t1 WHERE (a,a)=('2001-01-01x',DATE'2001-01-01');
a
2001-01-01x
Warnings:
Warning	1292	Truncated incorrect date value: '2001-01-01x'
SELECT * FROM t1 WHERE (a,a)=(DATE'2001-01-01','2001-01-01x');
a
2001-01-01x
Warnings:
Warning	1292	Truncated incorrect date value: '2001-01-01x'
SELECT * FROM t1 WHERE (a,a)=('2001-01-01',DATE'2001-01-01');
a
2001-01-01
SELECT * FROM t1 WHERE (a,a)=(DATE'2001-01-01','2001-01-01');
a
2001-01-01
DROP TABLE t1;
CREATE TABLE t1 (a ENUM('2001-01-01','2001-01-01x'));
INSERT INTO t1 VALUES ('2001-01-01'),('2001-01-01x');
SELECT * FROM t1 WHERE a=DATE'2001-01-01' AND a='2001-01-01';
a
2001-01-01
SELECT * FROM t1 WHERE a='2001-01-01' AND a=DATE'2001-01-01';
a
2001-01-01
SELECT * FROM t1 WHERE (a,a)=('2001-01-01x',DATE'2001-01-01');
a
2001-01-01x
Warnings:
Warning	1292	Truncated incorrect date value: '2001-01-01x'
SELECT * FROM t1 WHERE (a,a)=(DATE'2001-01-01','2001-01-01x');
a
2001-01-01x
Warnings:
Warning	1292	Truncated incorrect date value: '2001-01-01x'
SELECT * FROM t1 WHERE (a,a)=('2001-01-01',DATE'2001-01-01');
a
2001-01-01
SELECT * FROM t1 WHERE (a,a)=(DATE'2001-01-01','2001-01-01');
a
2001-01-01
DROP TABLE t1;
CREATE TABLE t1 (a VARCHAR(40),b VARCHAR(40));
INSERT INTO t1 VALUES ('2001-01-01','2001-01-01x');
SELECT * FROM t1 WHERE a=b AND a=DATE'2001-01-01';
a	b
DROP TABLE t1;
CREATE TABLE t1 (a ENUM('2001-01-01','2001-01-01x'),b ENUM('2001-01-01','2001-01-01x'));
INSERT INTO t1 VALUES ('2001-01-01','2001-01-01x');
SELECT * FROM t1 WHERE a=b AND a=DATE'2001-01-01';
a	b
DROP TABLE t1;
#
# MDEV-8695 Wrong result for SELECT..WHERE varchar_column='a' AND CRC32(varchar_column)=3904355907
#
CREATE TABLE t1 (a VARCHAR(10) COLLATE latin1_bin);
INSERT INTO t1 VALUES ('a'),('a ');
SELECT a, LENGTH(a), CRC32(a) FROM t1 WHERE CRC32(a)=3904355907;
a	LENGTH(a)	CRC32(a)
a	1	3904355907
SELECT a, LENGTH(a), CRC32(a) FROM t1 WHERE a='a' AND CRC32(a)=3904355907;
a	LENGTH(a)	CRC32(a)
a	1	3904355907
# 'a' should not be propagated into CRC32(a)
EXPLAIN EXTENDED SELECT a, LENGTH(a), CRC32(a) FROM t1 WHERE a='a' AND CRC32(a)=3904355907;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`a` AS `a`,length(`test`.`t1`.`a`) AS `LENGTH(a)`,crc32(`test`.`t1`.`a`) AS `CRC32(a)` from `test`.`t1` where `test`.`t1`.`a` = 'a' and crc32(`test`.`t1`.`a`) = 3904355907
SELECT a, HEX(a) FROM t1 WHERE HEX(a)='61';
a	HEX(a)
a	61
SELECT *,HEX(a) FROM t1 WHERE a='a' AND HEX(a)='61';
a	HEX(a)
a	61
# 'a' should not be propagated into HEX(a)
EXPLAIN EXTENDED SELECT *,HEX(a) FROM t1 WHERE a='a' AND HEX(a)='61';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`a` AS `a`,hex(`test`.`t1`.`a`) AS `HEX(a)` from `test`.`t1` where `test`.`t1`.`a` = 'a' and hex(`test`.`t1`.`a`) = '61'
SELECT * FROM t1 WHERE a='a';
a
a
a 
SELECT * FROM t1 WHERE LENGTH(a)=2;
a
a 
SELECT * FROM t1 WHERE a='a' AND LENGTH(a)=2;
a
a 
# 'a' should not be propagated into LENGTH(a)
EXPLAIN EXTENDED SELECT * FROM t1 WHERE a='a' AND LENGTH(a)=2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`a` AS `a` from `test`.`t1` where `test`.`t1`.`a` = 'a' and length(`test`.`t1`.`a`) = 2
DROP TABLE t1;
#
# MDEV-8712 Wrong result for SELECT..WHERE latin1_bin_column=_latin1'a' AND latin1_bin_column='A'
#
SET NAMES latin1;
CREATE TABLE t1 (a VARCHAR(20) COLLATE latin1_bin);
INSERT INTO t1 VALUES ('a'),('b');
SELECT * FROM t1 WHERE a='A';
a
SELECT * FROM t1 WHERE a='A' AND a=_latin1'a';
a
SELECT * FROM t1 WHERE a=_latin1'a' AND a='A';
a
SELECT * FROM t1 WHERE a=_latin1'A';
a
SELECT * FROM t1 WHERE a=_latin1'A' AND a=_latin1'a';
a
SELECT * FROM t1 WHERE a=_latin1'a' AND a=_latin1'A';
a
DROP TABLE t1;
#
# MDEV-8253 EXPLAIN SELECT prints unexpected characters
#
SET NAMES latin1;
CREATE TABLE t1 (a DECIMAL(10,1),b DECIMAL(10,1),c VARCHAR(10),d VARCHAR(10));
INSERT INTO t1 VALUES (1.5,1.5,'1','1'),(3.5,3.5,'3','3');
EXPLAIN EXTENDED
SELECT * FROM t1 WHERE COALESCE(c,0)='3 ' AND COALESCE(d,0)=COALESCE(c,0);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	select `test`.`t1`.`a` AS `a`,`test`.`t1`.`b` AS `b`,`test`.`t1`.`c` AS `c`,`test`.`t1`.`d` AS `d` from `test`.`t1` where coalesce(`test`.`t1`.`c`,0) = '3 ' and coalesce(`test`.`t1`.`d`,0) = '3 '
DROP TABLE t1;
#
# End of 10.1 tests
#
#
# Start of 10.2 tests
#
#
# MDEV-9711 NO PAD Collatons
#
SET character_set_connection=latin1;
SET STORAGE_ENGINE=MyISAM;
#
# Start of ctype_pad.inc
#
#
# Unique indexes
#
CREATE TABLE t1 (a VARCHAR(10) PRIMARY KEY) COLLATE 'latin1_swedish_nopad_ci';
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(10) COLLATE latin1_swedish_nopad_ci NOT NULL,
  PRIMARY KEY (`a`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_nopad_ci
INSERT INTO t1 VALUES ('abc'),('abc  '),(' a'),(' a '),('a   ');
SELECT HEX(a), a FROM t1 ORDER BY a;
HEX(a)	a
2061	 a
206120	 a 
61202020	a   
616263	abc
6162632020	abc  
SELECT HEX(a), a FROM t1 IGNORE INDEX(PRIMARY) ORDER BY a;
HEX(a)	a
2061	 a
206120	 a 
61202020	a   
616263	abc
6162632020	abc  
SELECT HEX(a), a FROM t1 IGNORE INDEX(PRIMARY) ORDER BY a DESC;
HEX(a)	a
6162632020	abc  
616263	abc
61202020	a   
206120	 a 
2061	 a
#
# UNION
#
CREATE TABLE t2 (a VARCHAR(10)) COLLATE 'latin1_swedish_nopad_ci';
INSERT INTO t2 VALUES ('abc '),('abc  '),(' a'),('a ');
SELECT HEX(a),a FROM (SELECT * FROM t1 UNION SELECT * FROM t2 ORDER BY a) td;
HEX(a)	a
2061	 a
206120	 a 
6120	a 
61202020	a   
616263	abc
61626320	abc 
6162632020	abc  
DROP TABLE t1;
DROP TABLE t2;
#
# DISTINCT, COUNT, MAX
#
CREATE TABLE t1 (a VARCHAR(10)) COLLATE 'latin1_swedish_nopad_ci';
INSERT INTO t1 VALUES ('a'),('a  '),(' a'),(' a '),('a   ');
SELECT HEX(a), a FROM (SELECT DISTINCT a FROM t1 ORDER BY a) td;
HEX(a)	a
2061	 a
206120	 a 
61	a
612020	a  
61202020	a   
SELECT COUNT(DISTINCT a) FROM t1 ORDER BY a;
COUNT(DISTINCT a)
5
SELECT HEX(MAX(a)), MAX(a) FROM t1;
HEX(MAX(a))	MAX(a)
61202020	a   
#
# GROUP BY
#
CREATE TABLE t2 (a VARCHAR(10), b int, c varchar(10)) COLLATE 'latin1_swedish_nopad_ci';
INSERT t2 values('ab', 12, 'cd'), ('ab', 2, 'ed'), ('aa', 20, 'er'), ('aa  ', 0, 'er ');
SELECT HEX(a), cnt FROM (SELECT a, COUNT(a) AS cnt FROM t2 GROUP BY a ORDER BY a) AS td;
HEX(a)	cnt
6161	1
61612020	1
6162	2
DROP TABLE t2;
#
# Weights
#
SELECT HEX(WEIGHT_STRING(a AS CHAR(10))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(10)))
41000000000000000000
41202000000000000000
20410000000000000000
20412000000000000000
41202020000000000000
DROP TABLE t1;
#
# IF, CASE, LEAST
#
SELECT IF('abc' COLLATE 'latin1_swedish_nopad_ci' = 'abc ', 'pad', 'nopad');
IF('abc' COLLATE 'latin1_swedish_nopad_ci' = 'abc ', 'pad', 'nopad')
nopad
SELECT CASE 'abc' COLLATE 'latin1_swedish_nopad_ci' WHEN 'abc ' THEN 'pad' ELSE 'nopad' END;
CASE 'abc' COLLATE 'latin1_swedish_nopad_ci' WHEN 'abc ' THEN 'pad' ELSE 'nopad' END
nopad
SELECT CASE WHEN 'abc' COLLATE 'latin1_swedish_nopad_ci' = 'abc ' THEN 'pad' ELSE 'nopad' END;
CASE WHEN 'abc' COLLATE 'latin1_swedish_nopad_ci' = 'abc ' THEN 'pad' ELSE 'nopad' END
nopad
SELECT HEX(LEAST('abc ' COLLATE 'latin1_swedish_nopad_ci', 'abc  '));
HEX(LEAST('abc ' COLLATE 'latin1_swedish_nopad_ci', 'abc  '))
61626320
SELECT HEX(GREATEST('abc ' COLLATE 'latin1_swedish_nopad_ci', 'abc  '));
HEX(GREATEST('abc ' COLLATE 'latin1_swedish_nopad_ci', 'abc  '))
6162632020
#
# Collation mix
#
CREATE TABLE t1 (a VARCHAR(10)) COLLATE 'latin1_swedish_ci';
INSERT INTO t1 VALUES ('a'),('a ');
SELECT COUNT(*) FROM t1 WHERE a='a';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_swedish_ci';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_swedish_nopad_ci';
COUNT(*)
1
ALTER TABLE t1 MODIFY a VARCHAR(10) COLLATE 'latin1_swedish_nopad_ci';
SELECT COUNT(*) FROM t1 WHERE a='a';
COUNT(*)
1
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_swedish_ci';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_swedish_nopad_ci';
COUNT(*)
1
DROP TABLE t1;
#
# End of ctype_pad.inc
#
SET STORAGE_ENGINE=HEAP;
#
# Start of ctype_pad.inc
#
#
# Unique indexes
#
CREATE TABLE t1 (a VARCHAR(10) PRIMARY KEY) COLLATE 'latin1_swedish_nopad_ci';
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(10) COLLATE latin1_swedish_nopad_ci NOT NULL,
  PRIMARY KEY (`a`)
) ENGINE=MEMORY DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_nopad_ci
INSERT INTO t1 VALUES ('abc'),('abc  '),(' a'),(' a '),('a   ');
SELECT HEX(a), a FROM t1 ORDER BY a;
HEX(a)	a
2061	 a
206120	 a 
61202020	a   
616263	abc
6162632020	abc  
SELECT HEX(a), a FROM t1 IGNORE INDEX(PRIMARY) ORDER BY a;
HEX(a)	a
2061	 a
206120	 a 
61202020	a   
616263	abc
6162632020	abc  
SELECT HEX(a), a FROM t1 IGNORE INDEX(PRIMARY) ORDER BY a DESC;
HEX(a)	a
6162632020	abc  
616263	abc
61202020	a   
206120	 a 
2061	 a
#
# UNION
#
CREATE TABLE t2 (a VARCHAR(10)) COLLATE 'latin1_swedish_nopad_ci';
INSERT INTO t2 VALUES ('abc '),('abc  '),(' a'),('a ');
SELECT HEX(a),a FROM (SELECT * FROM t1 UNION SELECT * FROM t2 ORDER BY a) td;
HEX(a)	a
2061	 a
206120	 a 
6120	a 
61202020	a   
616263	abc
61626320	abc 
6162632020	abc  
DROP TABLE t1;
DROP TABLE t2;
#
# DISTINCT, COUNT, MAX
#
CREATE TABLE t1 (a VARCHAR(10)) COLLATE 'latin1_swedish_nopad_ci';
INSERT INTO t1 VALUES ('a'),('a  '),(' a'),(' a '),('a   ');
SELECT HEX(a), a FROM (SELECT DISTINCT a FROM t1 ORDER BY a) td;
HEX(a)	a
2061	 a
206120	 a 
61	a
612020	a  
61202020	a   
SELECT COUNT(DISTINCT a) FROM t1 ORDER BY a;
COUNT(DISTINCT a)
5
SELECT HEX(MAX(a)), MAX(a) FROM t1;
HEX(MAX(a))	MAX(a)
61202020	a   
#
# GROUP BY
#
CREATE TABLE t2 (a VARCHAR(10), b int, c varchar(10)) COLLATE 'latin1_swedish_nopad_ci';
INSERT t2 values('ab', 12, 'cd'), ('ab', 2, 'ed'), ('aa', 20, 'er'), ('aa  ', 0, 'er ');
SELECT HEX(a), cnt FROM (SELECT a, COUNT(a) AS cnt FROM t2 GROUP BY a ORDER BY a) AS td;
HEX(a)	cnt
6161	1
61612020	1
6162	2
DROP TABLE t2;
#
# Weights
#
SELECT HEX(WEIGHT_STRING(a AS CHAR(10))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(10)))
41000000000000000000
41202000000000000000
20410000000000000000
20412000000000000000
41202020000000000000
DROP TABLE t1;
#
# IF, CASE, LEAST
#
SELECT IF('abc' COLLATE 'latin1_swedish_nopad_ci' = 'abc ', 'pad', 'nopad');
IF('abc' COLLATE 'latin1_swedish_nopad_ci' = 'abc ', 'pad', 'nopad')
nopad
SELECT CASE 'abc' COLLATE 'latin1_swedish_nopad_ci' WHEN 'abc ' THEN 'pad' ELSE 'nopad' END;
CASE 'abc' COLLATE 'latin1_swedish_nopad_ci' WHEN 'abc ' THEN 'pad' ELSE 'nopad' END
nopad
SELECT CASE WHEN 'abc' COLLATE 'latin1_swedish_nopad_ci' = 'abc ' THEN 'pad' ELSE 'nopad' END;
CASE WHEN 'abc' COLLATE 'latin1_swedish_nopad_ci' = 'abc ' THEN 'pad' ELSE 'nopad' END
nopad
SELECT HEX(LEAST('abc ' COLLATE 'latin1_swedish_nopad_ci', 'abc  '));
HEX(LEAST('abc ' COLLATE 'latin1_swedish_nopad_ci', 'abc  '))
61626320
SELECT HEX(GREATEST('abc ' COLLATE 'latin1_swedish_nopad_ci', 'abc  '));
HEX(GREATEST('abc ' COLLATE 'latin1_swedish_nopad_ci', 'abc  '))
6162632020
#
# Collation mix
#
CREATE TABLE t1 (a VARCHAR(10)) COLLATE 'latin1_swedish_ci';
INSERT INTO t1 VALUES ('a'),('a ');
SELECT COUNT(*) FROM t1 WHERE a='a';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_swedish_ci';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_swedish_nopad_ci';
COUNT(*)
1
ALTER TABLE t1 MODIFY a VARCHAR(10) COLLATE 'latin1_swedish_nopad_ci';
SELECT COUNT(*) FROM t1 WHERE a='a';
COUNT(*)
1
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_swedish_ci';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_swedish_nopad_ci';
COUNT(*)
1
DROP TABLE t1;
#
# End of ctype_pad.inc
#
SET STORAGE_ENGINE=Default;
SET STORAGE_ENGINE=MyISAM;
#
# Start of ctype_pad.inc
#
#
# Unique indexes
#
CREATE TABLE t1 (a VARCHAR(10) PRIMARY KEY) COLLATE 'latin1_nopad_bin';
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(10) COLLATE latin1_nopad_bin NOT NULL,
  PRIMARY KEY (`a`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_nopad_bin
INSERT INTO t1 VALUES ('abc'),('abc  '),(' a'),(' a '),('a   ');
SELECT HEX(a), a FROM t1 ORDER BY a;
HEX(a)	a
2061	 a
206120	 a 
61202020	a   
616263	abc
6162632020	abc  
SELECT HEX(a), a FROM t1 IGNORE INDEX(PRIMARY) ORDER BY a;
HEX(a)	a
2061	 a
206120	 a 
61202020	a   
616263	abc
6162632020	abc  
SELECT HEX(a), a FROM t1 IGNORE INDEX(PRIMARY) ORDER BY a DESC;
HEX(a)	a
6162632020	abc  
616263	abc
61202020	a   
206120	 a 
2061	 a
#
# UNION
#
CREATE TABLE t2 (a VARCHAR(10)) COLLATE 'latin1_nopad_bin';
INSERT INTO t2 VALUES ('abc '),('abc  '),(' a'),('a ');
SELECT HEX(a),a FROM (SELECT * FROM t1 UNION SELECT * FROM t2 ORDER BY a) td;
HEX(a)	a
2061	 a
206120	 a 
6120	a 
61202020	a   
616263	abc
61626320	abc 
6162632020	abc  
DROP TABLE t1;
DROP TABLE t2;
#
# DISTINCT, COUNT, MAX
#
CREATE TABLE t1 (a VARCHAR(10)) COLLATE 'latin1_nopad_bin';
INSERT INTO t1 VALUES ('a'),('a  '),(' a'),(' a '),('a   ');
SELECT HEX(a), a FROM (SELECT DISTINCT a FROM t1 ORDER BY a) td;
HEX(a)	a
2061	 a
206120	 a 
61	a
612020	a  
61202020	a   
SELECT COUNT(DISTINCT a) FROM t1 ORDER BY a;
COUNT(DISTINCT a)
5
SELECT HEX(MAX(a)), MAX(a) FROM t1;
HEX(MAX(a))	MAX(a)
61202020	a   
#
# GROUP BY
#
CREATE TABLE t2 (a VARCHAR(10), b int, c varchar(10)) COLLATE 'latin1_nopad_bin';
INSERT t2 values('ab', 12, 'cd'), ('ab', 2, 'ed'), ('aa', 20, 'er'), ('aa  ', 0, 'er ');
SELECT HEX(a), cnt FROM (SELECT a, COUNT(a) AS cnt FROM t2 GROUP BY a ORDER BY a) AS td;
HEX(a)	cnt
6161	1
61612020	1
6162	2
DROP TABLE t2;
#
# Weights
#
SELECT HEX(WEIGHT_STRING(a AS CHAR(10))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(10)))
61000000000000000000
61202000000000000000
20610000000000000000
20612000000000000000
61202020000000000000
DROP TABLE t1;
#
# IF, CASE, LEAST
#
SELECT IF('abc' COLLATE 'latin1_nopad_bin' = 'abc ', 'pad', 'nopad');
IF('abc' COLLATE 'latin1_nopad_bin' = 'abc ', 'pad', 'nopad')
nopad
SELECT CASE 'abc' COLLATE 'latin1_nopad_bin' WHEN 'abc ' THEN 'pad' ELSE 'nopad' END;
CASE 'abc' COLLATE 'latin1_nopad_bin' WHEN 'abc ' THEN 'pad' ELSE 'nopad' END
nopad
SELECT CASE WHEN 'abc' COLLATE 'latin1_nopad_bin' = 'abc ' THEN 'pad' ELSE 'nopad' END;
CASE WHEN 'abc' COLLATE 'latin1_nopad_bin' = 'abc ' THEN 'pad' ELSE 'nopad' END
nopad
SELECT HEX(LEAST('abc ' COLLATE 'latin1_nopad_bin', 'abc  '));
HEX(LEAST('abc ' COLLATE 'latin1_nopad_bin', 'abc  '))
61626320
SELECT HEX(GREATEST('abc ' COLLATE 'latin1_nopad_bin', 'abc  '));
HEX(GREATEST('abc ' COLLATE 'latin1_nopad_bin', 'abc  '))
6162632020
#
# Collation mix
#
CREATE TABLE t1 (a VARCHAR(10)) COLLATE 'latin1_bin';
INSERT INTO t1 VALUES ('a'),('a ');
SELECT COUNT(*) FROM t1 WHERE a='a';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_bin';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_nopad_bin';
COUNT(*)
1
ALTER TABLE t1 MODIFY a VARCHAR(10) COLLATE 'latin1_nopad_bin';
SELECT COUNT(*) FROM t1 WHERE a='a';
COUNT(*)
1
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_bin';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_nopad_bin';
COUNT(*)
1
DROP TABLE t1;
#
# End of ctype_pad.inc
#
SET STORAGE_ENGINE=HEAP;
#
# Start of ctype_pad.inc
#
#
# Unique indexes
#
CREATE TABLE t1 (a VARCHAR(10) PRIMARY KEY) COLLATE 'latin1_nopad_bin';
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(10) COLLATE latin1_nopad_bin NOT NULL,
  PRIMARY KEY (`a`)
) ENGINE=MEMORY DEFAULT CHARSET=latin1 COLLATE=latin1_nopad_bin
INSERT INTO t1 VALUES ('abc'),('abc  '),(' a'),(' a '),('a   ');
SELECT HEX(a), a FROM t1 ORDER BY a;
HEX(a)	a
2061	 a
206120	 a 
61202020	a   
616263	abc
6162632020	abc  
SELECT HEX(a), a FROM t1 IGNORE INDEX(PRIMARY) ORDER BY a;
HEX(a)	a
2061	 a
206120	 a 
61202020	a   
616263	abc
6162632020	abc  
SELECT HEX(a), a FROM t1 IGNORE INDEX(PRIMARY) ORDER BY a DESC;
HEX(a)	a
6162632020	abc  
616263	abc
61202020	a   
206120	 a 
2061	 a
#
# UNION
#
CREATE TABLE t2 (a VARCHAR(10)) COLLATE 'latin1_nopad_bin';
INSERT INTO t2 VALUES ('abc '),('abc  '),(' a'),('a ');
SELECT HEX(a),a FROM (SELECT * FROM t1 UNION SELECT * FROM t2 ORDER BY a) td;
HEX(a)	a
2061	 a
206120	 a 
6120	a 
61202020	a   
616263	abc
61626320	abc 
6162632020	abc  
DROP TABLE t1;
DROP TABLE t2;
#
# DISTINCT, COUNT, MAX
#
CREATE TABLE t1 (a VARCHAR(10)) COLLATE 'latin1_nopad_bin';
INSERT INTO t1 VALUES ('a'),('a  '),(' a'),(' a '),('a   ');
SELECT HEX(a), a FROM (SELECT DISTINCT a FROM t1 ORDER BY a) td;
HEX(a)	a
2061	 a
206120	 a 
61	a
612020	a  
61202020	a   
SELECT COUNT(DISTINCT a) FROM t1 ORDER BY a;
COUNT(DISTINCT a)
5
SELECT HEX(MAX(a)), MAX(a) FROM t1;
HEX(MAX(a))	MAX(a)
61202020	a   
#
# GROUP BY
#
CREATE TABLE t2 (a VARCHAR(10), b int, c varchar(10)) COLLATE 'latin1_nopad_bin';
INSERT t2 values('ab', 12, 'cd'), ('ab', 2, 'ed'), ('aa', 20, 'er'), ('aa  ', 0, 'er ');
SELECT HEX(a), cnt FROM (SELECT a, COUNT(a) AS cnt FROM t2 GROUP BY a ORDER BY a) AS td;
HEX(a)	cnt
6161	1
61612020	1
6162	2
DROP TABLE t2;
#
# Weights
#
SELECT HEX(WEIGHT_STRING(a AS CHAR(10))) FROM t1;
HEX(WEIGHT_STRING(a AS CHAR(10)))
61000000000000000000
61202000000000000000
20610000000000000000
20612000000000000000
61202020000000000000
DROP TABLE t1;
#
# IF, CASE, LEAST
#
SELECT IF('abc' COLLATE 'latin1_nopad_bin' = 'abc ', 'pad', 'nopad');
IF('abc' COLLATE 'latin1_nopad_bin' = 'abc ', 'pad', 'nopad')
nopad
SELECT CASE 'abc' COLLATE 'latin1_nopad_bin' WHEN 'abc ' THEN 'pad' ELSE 'nopad' END;
CASE 'abc' COLLATE 'latin1_nopad_bin' WHEN 'abc ' THEN 'pad' ELSE 'nopad' END
nopad
SELECT CASE WHEN 'abc' COLLATE 'latin1_nopad_bin' = 'abc ' THEN 'pad' ELSE 'nopad' END;
CASE WHEN 'abc' COLLATE 'latin1_nopad_bin' = 'abc ' THEN 'pad' ELSE 'nopad' END
nopad
SELECT HEX(LEAST('abc ' COLLATE 'latin1_nopad_bin', 'abc  '));
HEX(LEAST('abc ' COLLATE 'latin1_nopad_bin', 'abc  '))
61626320
SELECT HEX(GREATEST('abc ' COLLATE 'latin1_nopad_bin', 'abc  '));
HEX(GREATEST('abc ' COLLATE 'latin1_nopad_bin', 'abc  '))
6162632020
#
# Collation mix
#
CREATE TABLE t1 (a VARCHAR(10)) COLLATE 'latin1_bin';
INSERT INTO t1 VALUES ('a'),('a ');
SELECT COUNT(*) FROM t1 WHERE a='a';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_bin';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_nopad_bin';
COUNT(*)
1
ALTER TABLE t1 MODIFY a VARCHAR(10) COLLATE 'latin1_nopad_bin';
SELECT COUNT(*) FROM t1 WHERE a='a';
COUNT(*)
1
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_bin';
COUNT(*)
2
SELECT COUNT(*) FROM t1 WHERE a='a' COLLATE 'latin1_nopad_bin';
COUNT(*)
1
DROP TABLE t1;
#
# End of ctype_pad.inc
#
SET STORAGE_ENGINE=Default;
#
# End of 10.2 tests
#

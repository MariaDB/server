# Create a stored procedure which calls the different functions to retrieve the user
CREATE FUNCTION test.func_invoking_user() RETURNS CHAR(80) SQL SECURITY DEFINER RETURN CONCAT(USER(), '; ', CURRENT_USER(), '; ', INVOKING_USER(), '; ' , ORA_INVOKING_USER());
# Create a view which calls the different functions to retrieve the user
CREATE SQL SECURITY DEFINER VIEW test.view_invoking_user AS SELECT USER(), CURRENT_USER(), INVOKING_USER, ORA_INVOKING_USER;
# Create test_user
CREATE USER 'test_user'@'%';
GRANT EXECUTE, SELECT ON test.* TO 'test_user'@'%';
# Connect as test_user
connect  test_user_con,localhost,test_user,,;
# Check the function called directly
SELECT CURRENT_USER(), USER(), INVOKING_USER(), ORA_INVOKING_USER();
CURRENT_USER()	USER()	INVOKING_USER()	ORA_INVOKING_USER()
test_user@%	test_user@localhost	test_user@%	test_user@%
# Check the function inside of a stored procedure
SELECT test.func_invoking_user();
test.func_invoking_user()
test_user@localhost; root@localhost; test_user@%; test_user@%
# Check the function inside of a view
SELECT * FROM test.view_invoking_user;
USER()	CURRENT_USER()	INVOKING_USER	ORA_INVOKING_USER
test_user@localhost	root@localhost	test_user@%	test_user@%
# Cleanup
connection default;
DROP USER 'test_user'@'%';
DROP FUNCTION test.func_invoking_user;
DROP VIEW test.view_invoking_user;

--echo #
--echo # Start of 10.4 tests
--echo #

--echo #
--echo # MDEV-17776 CAST(x AS INTERVAL DAY_SECOND(N))
--echo #

CREATE TABLE t1 (a VARCHAR(128));
INSERT INTO t1 VALUES
('00:00:00'),
('+00:00:01'),
('-00:00:01'),
('838:59:59'),
('839:00:00'),
('2018:01:02'),
('87649415:59:59'),
('3652058 23:59:59'),
('87649416:00:00'),
('3652059 00:00:00');

#enable after fix MDEV-29525
--disable_view_protocol
SELECT
  EXTRACT(DAY FROM a) AS d,
  EXTRACT(HOUR FROM a) AS h,
  a,
  CAST(a AS INTERVAL DAY_SECOND(6)) AS cast_itds
FROM t1;
--enable_view_protocol

DROP TABLE t1;


CREATE TABLE t1 (a DECIMAL(32,9));
INSERT INTO t1 VALUES
(0),
(1),
(-1),
(8385959),
(8390000),
(20180102),
(876494155959),
(876494160000);

#enable after fix MDEV-29525
--disable_view_protocol
SELECT
  EXTRACT(DAY FROM a) AS d,
  EXTRACT(HOUR FROM a) AS h,
  a,
  CAST(a AS INTERVAL DAY_SECOND(6)) AS cast_itds
FROM t1;
--enable_view_protocol

DROP TABLE t1;

--echo #
--echo # End of 10.4 tests
--echo #

--echo #
--echo # MDEV-12513: Support for INTERVAL data types in MariaDB
--echo #
if(0)
{
CREATE TABLE t2 (a INTERVAL YEAR );
CREATE TABLE t4 (a INTERVAL YEAR TO MONTH );
CREATE TABLE t5 (a INTERVAL DAY(5) );
CREATE TABLE t6 (a INTERVAL HOUR(3) );
CREATE TABLE t7 (a INTERVAL MINUTE(2) );
CREATE TABLE t9 (a INTERVAL DAY TO HOUR );
CREATE TABLE t10 (a INTERVAL DAY TO MINUTE );
CREATE TABLE t11 (a INTERVAL DAY(4) TO SECOND(3) );
CREATE TABLE t12 (a INTERVAL HOUR TO MINUTE );
CREATE TABLE t13 (a INTERVAL HOUR(3) TO SECOND(2) );
CREATE TABLE t14 (a INTERVAL MINUTE TO SECOND(4) );

SHOW CREATE TABLE t2;
SHOW CREATE TABLE t4;
SHOW CREATE TABLE t5;
SHOW CREATE TABLE t6;
SHOW CREATE TABLE t7;
SHOW CREATE TABLE t9;
SHOW CREATE TABLE t10;
SHOW CREATE TABLE t11;
SHOW CREATE TABLE t12;
SHOW CREATE TABLE t13;
SHOW CREATE TABLE t14;

DROP TABLE t2, t4, t5, t6, t7, t9, t10, t11, t12, t13, t14;

DELIMITER /;

CREATE PROCEDURE sp_interval_declaration()
BEGIN
  DECLARE ym_year INTERVAL YEAR DEFAULT INTERVAL '2025-06-19 15:00:00' YEAR;
  DECLARE ym_month INTERVAL MONTH DEFAULT INTERVAL '2025-06-19 15:00:00' MONTH;
  DECLARE ym_ym INTERVAL YEAR TO MONTH DEFAULT INTERVAL '2025-06-19 15:00:00' YEAR TO MONTH;

  DECLARE ds_day INTERVAL DAY DEFAULT INTERVAL '2025-06-19 15:00:00' DAY;
  DECLARE ds_hour INTERVAL HOUR DEFAULT INTERVAL '2025-06-19 15:00:00' HOUR;
  DECLARE ds_minute INTERVAL MINUTE DEFAULT INTERVAL '2025-06-19 15:00:00' MINUTE;
  DECLARE ds_second INTERVAL SECOND DEFAULT INTERVAL '2025-06-19 15:00:00' SECOND(3);

  DECLARE ds_dh INTERVAL DAY TO HOUR DEFAULT INTERVAL '2025-06-19 15:00:00'  DAY TO HOUR;
  DECLARE ds_dm INTERVAL DAY TO MINUTE DEFAULT INTERVAL '2025-06-19 15:00:00' DAY TO MINUTE;
  DECLARE ds_ds INTERVAL DAY TO SECOND DEFAULT INTERVAL '2025-06-19 15:00:00' DAY TO SECOND;
  DECLARE ds_hm INTERVAL HOUR TO MINUTE DEFAULT INTERVAL '2025-06-19 15:00:00' HOUR TO MINUTE;
  DECLARE ds_hs INTERVAL HOUR TO SECOND DEFAULT INTERVAL '2025-06-19 15:00:00' HOUR TO SECOND;
  DECLARE ds_ms INTERVAL MINUTE TO SECOND DEFAULT INTERVAL '2025-06-19 15:00:00' MINUTE TO SECOND;

  SELECT
    ym_year AS year_int,
    ym_month AS month_int,
    ym_ym AS ym_int,
    ds_day AS day_sec,
    ds_hour AS hour_sec,
    ds_minute AS minute_sec,
    ds_second AS second_frac,
    ds_dh AS day_hour_sec,
    ds_dm AS day_min_sec,
    ds_ds AS day_sec_frac,
    ds_hm AS hour_min_sec,
    ds_hs AS hour_sec_frac,
    ds_ms AS min_sec_frac;
END;
/
DELIMITER ;/

CALL sp_interval_declaration();

DELIMITER /;

CREATE PROCEDURE sp_interval_parameters(
  IN in_ym INTERVAL YEAR(4) TO MONTH,
  IN in_y INTERVAL YEAR(4),
  IN in_m INTERVAL MONTH(2),
  IN in_ds INTERVAL DAY(3) TO SECOND(6),
  IN in_d INTERVAL DAY(3),
  IN in_h INTERVAL HOUR(3),
  IN in_n INTERVAL MINUTE(2),
  IN in_s INTERVAL SECOND(6),
  IN in_dh INTERVAL DAY(3) TO HOUR,
  IN in_dm INTERVAL DAY(3) TO MINUTE,
  IN in_hs INTERVAL HOUR(3) TO SECOND(6),
  IN in_hm INTERVAL HOUR(3) TO MINUTE,
  IN in_ms INTERVAL MINUTE(2) TO SECOND(6),
  OUT out_ym INTERVAL YEAR(4) TO MONTH,
  OUT out_y INTERVAL YEAR(4),
  OUT out_m INTERVAL MONTH(2),
  OUT out_ds INTERVAL DAY(3) TO SECOND(6),
  OUT out_d INTERVAL DAY(3),
  OUT out_h INTERVAL HOUR(3),
  OUT out_n INTERVAL MINUTE(2),
  OUT out_s INTERVAL SECOND(6),
  OUT out_dh INTERVAL DAY(3) TO HOUR,
  OUT out_dm INTERVAL DAY(3) TO MINUTE,
  OUT out_hs INTERVAL HOUR(3) TO SECOND(6),
  OUT out_hm INTERVAL HOUR(3) TO MINUTE,
  OUT out_ms INTERVAL MINUTE(2) TO SECOND(6)
)
BEGIN

END;
/
DELIMITER ;/

DELIMITER /;

CREATE PROCEDURE sp_interval_calc()
BEGIN
  DECLARE a INTERVAL MONTH DEFAULT INTERVAL '2025-06-19 15:00:00' MONTH;
  DECLARE b INTERVAL YEAR TO MONTH DEFAULT INTERVAL '2025-06-19 15:00:00' YEAR TO MONTH;
  DECLARE total_ym INTERVAL YEAR TO MONTH;

  DECLARE x INTERVAL SECOND DEFAULT INTERVAL '2025-06-19 15:00:00' SECOND;
  DECLARE y INTERVAL DAY TO SECOND DEFAULT INTERVAL '2025-06-19 15:00:00' DAY TO SECOND;
  DECLARE total_ds INTERVAL DAY TO SECOND;

  SET total_ym = a + b;
  SET total_ds = x + y;

  SELECT
    total_ym AS ym_result,
    total_ds AS ds_result;
END;
/
DELIMITER ;/

DELIMITER /;

CREATE PROCEDURE sp_interval_control_flow(
  IN x INTERVAL DAY TO SECOND
)
BEGIN
  DECLARE y INTERVAL DAY DEFAULT INTERVAL '2025-06-19 15:00:00' DAY;

  IF x > y THEN
    SELECT 'A' AS Answer;
  ELSEIF x = INTERVAL  '2025-06-19 15:00:00' DAY THEN
    SELECT 'B' AS Answer;
  ELSE
    SELECT 'C' AS Answer;
  END IF;

  SELECT CASE
    WHEN x < INTERVAL  '2025-06-19 15:00:00' HOUR THEN 'A'
    WHEN x BETWEEN INTERVAL  '2025-06-19 15:00:00' HOUR AND INTERVAL  '2025-06-19 15:00:00' HOUR THEN 'B'
    ELSE 'C'
  END AS duration_category;
END;
/
DELIMITER ;/
DELIMITER /;
}

DELIMITER /;

CREATE PROCEDURE sp_interval_parameters(
  IN in_ym INTERVAL YEAR(4) TO MONTH,        -- Max: 9999-11
  IN in_y INTERVAL YEAR(4),                  -- Max: 9999
  IN in_m INTERVAL MONTH(2),                 -- Max: 99
  IN in_ds INTERVAL DAY(3) TO SECOND(6),     -- Max: 999 23:59:59.999999
  IN in_d INTERVAL DAY(3),                   -- Max: 999
  IN in_h INTERVAL HOUR(3),                  -- Max: 999
  IN in_n INTERVAL MINUTE(2),                -- Max: 99
  IN in_s INTERVAL SECOND(6),                -- Max: 59.999999
  IN in_dh INTERVAL DAY(3) TO HOUR,          -- Max: 999 23
  IN in_dm INTERVAL DAY(3) TO MINUTE,        -- Max: 999 23:59
  IN in_hs INTERVAL HOUR(3) TO SECOND(6),    -- Max: 999:59:59.999999
  IN in_hm INTERVAL HOUR(3) TO MINUTE,       -- Max: 999:59
  IN in_ms INTERVAL MINUTE(2) TO SECOND(6),  -- Max: 99:59.999999
  OUT out_ym INTERVAL YEAR(4) TO MONTH,
  OUT out_y INTERVAL YEAR(4),
  OUT out_m INTERVAL MONTH(2),
  OUT out_ds INTERVAL DAY(3) TO SECOND(6),
  OUT out_d INTERVAL DAY(3),
  OUT out_h INTERVAL HOUR(3),
  OUT out_n INTERVAL MINUTE(2),
  OUT out_s INTERVAL SECOND(6),
  OUT out_dh INTERVAL DAY(3) TO HOUR,
  OUT out_dm INTERVAL DAY(3) TO MINUTE,
  OUT out_hs INTERVAL HOUR(3) TO SECOND(6),
  OUT out_hm INTERVAL HOUR(3) TO MINUTE,
  OUT out_ms INTERVAL MINUTE(2) TO SECOND(6)
)
BEGIN
  -- Simple passthrough logic
  SET out_ym = in_ym;
  SET out_y = in_y;
  SET out_m = in_m;
  SET out_ds = in_ds;
  SET out_d = in_d;
  SET out_h = in_h;
  SET out_n = in_n;
  SET out_s = in_s;
  SET out_dh = in_dh;
  SET out_dm = in_dm;
  SET out_hs = in_hs;
  SET out_hm = in_hm;
  SET out_ms = in_ms;
END;
/
DELIMITER ;/

CALL sp_interval_parameters(
   '5-3',
   '10',
   '12',
   '100 12:30:45.123456',
   '100',
   '120',
   '90',
   '45.123456',
   '100 12',
   '100 12:30',
   '120:30:45.123456',
   '120:30',
   '90:45.123456',

  @out_ym, @out_y, @out_m, @out_ds, @out_d,
  @out_h, @out_n, @out_s, @out_dh, @out_dm,
  @out_hs, @out_hm, @out_ms
);
SELECT
  @out_ym,
  @out_y,
  @out_m,
  @out_ds,
  @out_d,
  @out_h,
  @out_n,
  @out_s,
  @out_dh,
  @out_dm,
  @out_hs,
  @out_hm,
  @out_ms;


drop procedure sp_interval_parameters;

--echo Parser Validation - Unsupported Interval Types & Invalid combination of INTERVAL Range.
--error ER_NOT_SUPPORTED_YET
CREATE PROCEDURE sp_invalid1(IN a INTERVAL QUARTER) BEGIN END;

--error ER_NOT_SUPPORTED_YET
CREATE PROCEDURE sp_invalid2(IN a INTERVAL WEEK) BEGIN END;

--error ER_NOT_SUPPORTED_YET
CREATE PROCEDURE sp_invalid3(IN a INTERVAL MICROSECOND) BEGIN END;

--error ER_NOT_SUPPORTED_YET
CREATE PROCEDURE sp_invalid4(IN a INTERVAL DAY TO MICROSECOND) BEGIN END;

--error ER_NOT_SUPPORTED_YET
CREATE PROCEDURE sp_invalid5(IN a INTERVAL HOUR TO MICROSECOND) BEGIN END;

--error ER_NOT_SUPPORTED_YET
CREATE PROCEDURE sp_invalid6(IN a INTERVAL MINUTE TO MICROSECOND) BEGIN END;

--error ER_NOT_SUPPORTED_YET
CREATE PROCEDURE sp_invalid7(IN a INTERVAL SECOND TO MICROSECOND) BEGIN END;

--error ER_PARSE_ERROR
CREATE PROCEDURE sp_invalid8(IN a INTERVAL MICROSECOND TO SECOND) BEGIN END;

--error ER_PARSE_ERROR
CREATE PROCEDURE sp_invalid11(IN a INTERVAL MICROSECOND TO MINUTE) BEGIN END;

--error ER_PARSE_ERROR
CREATE PROCEDURE sp_invalid12(IN a INTERVAL YEAR TO SECOND) BEGIN END;

--error ER_PARSE_ERROR
CREATE PROCEDURE sp_invalid13(IN a INTERVAL MONTH TO DAY) BEGIN END;

--error ER_PARSE_ERROR
CREATE PROCEDURE sp_invalid14(IN a INTERVAL SECOND TO HOUR) BEGIN END;

--error ER_PARSE_ERROR
CREATE PROCEDURE sp_invalid15(IN a INTERVAL WEEK TO DAY) BEGIN END;

--error ER_PARSE_ERROR
CREATE PROCEDURE sp_invalid16(IN a INTERVAL YEAR TO SECOND) BEGIN END;


--echo Precision validation â€“ ensuring valid start and end precisions

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_1(IN a INTERVAL YEAR(5)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_2(IN a INTERVAL MONTH(7)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_3(IN a INTERVAL DAY(8)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_4(IN a INTERVAL HOUR(10)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_5(IN a INTERVAL MINUTE(11)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_6(IN a INTERVAL SECOND(13)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_7(IN a INTERVAL YEAR(8)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_8(IN a INTERVAL SECOND(13)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_9(IN a INTERVAL DAY(9) TO SECOND(3)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_10(IN a INTERVAL HOUR(4) TO SECOND(13)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_11(IN a INTERVAL MINUTE(11) TO SECOND(2)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_12(IN a INTERVAL DAY(12) TO SECOND(2)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_13(IN a INTERVAL HOUR(3) TO SECOND(13)) BEGIN END;

--error ER_TOO_BIG_PRECISION
CREATE PROCEDURE sp_invalid_14(IN a INTERVAL DAY(12) TO SECOND(3)) BEGIN END;

DELIMITER /;
CREATE PROCEDURE sp_valid_1(IN a INTERVAL YEAR(4))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_1('9999');
CALL sp_Valid_1('1');
CALL sp_Valid_1('0');
CALL sp_Valid_1(9999);
CALL sp_Valid_1(123);
CALL sp_Valid_1(0.1234e4);
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_1('10000');
DROP PROCEDURE sp_valid_1;

DELIMITER /;
CREATE PROCEDURE sp_valid_2(IN a INTERVAL MONTH(6))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_2('119988');
CALL sp_valid_2(0.119988e6);
CALL sp_valid_2(0);
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_2('1200000');
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_2(0.119988e7);

DROP PROCEDURE sp_valid_2;

DELIMITER /;
CREATE PROCEDURE sp_valid_3(IN a INTERVAL DAY(7))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_3('3719628');
CALL sp_valid_3(3719628);
CALL sp_valid_3(0.3719628e7);

--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_3('40000000');
DROP PROCEDURE sp_valid_3;

DELIMITER /;
CREATE PROCEDURE sp_valid_4(IN a INTERVAL HOUR(8))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_4('89271072');
CALL sp_valid_4(89271072);
CALL sp_valid_4(0.89271072e8);
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_4('100000000');
DROP PROCEDURE sp_valid_4;

DELIMITER /;
CREATE PROCEDURE sp_valid_5(IN a INTERVAL MINUTE(10))
BEGIN
  SELECT a;
END /
DELIMITER ;/

CALL sp_valid_5('5266993248');
CALL sp_valid_5(5266993248);
CALL sp_valid_5(52669.93248e5);
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_5('99999999999');
DROP PROCEDURE sp_valid_5;


DELIMITER /;
CREATE PROCEDURE sp_valid_6(IN a INTERVAL SECOND(3))
BEGIN
  SELECT a;
END /
DELIMITER ;/

CALL sp_valid_6('59.123');
CALL sp_valid_6(59.123);
CALL sp_valid_6(59123e-3);
CALL sp_valid_6(15646.1232);
CALL sp_valid_6(15646.1232e0);
CALL sp_valid_6(15646.123255);
set SQL_MODE = 'TIME_ROUND_FRACTIONAL';
CALL sp_valid_6('59.1236');
CALL sp_valid_6('59.1299');
DROP PROCEDURE sp_valid_6;

DELIMITER /;
CREATE PROCEDURE sp_valid_7(IN a INTERVAL YEAR(2))
BEGIN
  SELECT a;
END /
DELIMITER ;/

CALL sp_valid_7('99');
CALL sp_valid_7('0');
CALL sp_valid_7(99);
CALL sp_valid_7(0.99e2);
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_7(0.99e3);
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_7('1234');
DROP PROCEDURE sp_valid_7;

DELIMITER /;
CREATE PROCEDURE sp_valid_8(IN a INTERVAL MONTH(1))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_8('1');
CALL sp_valid_8('9');
CALL sp_valid_8('0');
CALL sp_valid_8('7');
CALL sp_valid_8(0.7e1);
CALL sp_valid_8(70e-1);
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_8('11');
DROP PROCEDURE sp_valid_8;

DELIMITER /;
CREATE PROCEDURE sp_valid_9(IN a INTERVAL DAY(3))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_9('999');

--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_9('10000');

DROP PROCEDURE sp_valid_9;

DELIMITER /;
CREATE PROCEDURE sp_valid_10(IN a INTERVAL MINUTE(7))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_10('9999999');
CALL sp_valid_10(9999999);
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_10('12345678');
DROP PROCEDURE sp_valid_10;

DELIMITER /;
CREATE PROCEDURE sp_valid_11(IN a INTERVAL DAY(2) TO SECOND(3))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_11('99 23:59:59.999');
CALL sp_valid_11(99235959.999);
CALL sp_valid_11(99235959999e-3);
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_11('100 23:59:59.999');
DROP PROCEDURE sp_valid_11;

DELIMITER /;
CREATE PROCEDURE sp_valid_12(IN a INTERVAL HOUR(3) TO SECOND(6))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_12('999:59:59.999999');
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_12('1000:59:59.999999');
DROP PROCEDURE sp_valid_12;

DELIMITER /;
CREATE PROCEDURE sp_valid_13(IN a INTERVAL MINUTE(5) TO SECOND(4))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_13('99999:59.9999');
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_13('100000:59.9999');
DROP PROCEDURE sp_valid_13;

DELIMITER /;
CREATE PROCEDURE sp_valid_14(IN a INTERVAL DAY(1) TO MINUTE)
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_14('9 23:59');
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_14('99 23:59');
DROP PROCEDURE sp_valid_14;

DELIMITER /;
CREATE PROCEDURE sp_valid_15(IN a INTERVAL HOUR(8) TO MINUTE)
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_15('99999999:59');
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_15('100000000:59');
DROP PROCEDURE sp_valid_15;

DELIMITER /;
CREATE PROCEDURE sp_valid_16(IN a INTERVAL DAY TO SECOND(6))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_16('9 23:59:59.999999');
CALL sp_valid_16('100 23:59:59.999999');
DROP PROCEDURE sp_valid_16;

DELIMITER /;
CREATE PROCEDURE sp_valid_17(IN a INTERVAL HOUR(4) TO SECOND)
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_17('23:59:59');
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_17('10000:59:59');
DROP PROCEDURE sp_valid_17;

DELIMITER /;
CREATE PROCEDURE sp_valid_18(IN a INTERVAL MINUTE(9) TO SECOND(2))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_18('999999999:59.99');
--error ER_INVALID_DEFAULT_PARAM
CALL sp_valid_18('1000000000:59.99');
DROP PROCEDURE sp_valid_18;

DELIMITER /;
CREATE PROCEDURE sp_valid_19(IN a INTERVAL HOUR TO SECOND(5))
BEGIN
  SELECT a;
END /
DELIMITER ;/
CALL sp_valid_19('23:59:59.99999');
CALL sp_valid_19('1000:59:59.99999');
DROP PROCEDURE sp_valid_19;


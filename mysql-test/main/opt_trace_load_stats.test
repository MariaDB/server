--source include/not_embedded.inc
--source include/have_sequence.inc
--echo #enable both optimizer_trace, and optimizer_record_context
set optimizer_record_context=ON;
set optimizer_trace=1;

create database db1;
use db1;

create table t1
(
    a int, b int,
    index t1_idx_a (a),
    index t1_idx_b (b),
    index t1_idx_ab (a, b)
) ENGINE=MyISAM;

insert into t1 select seq%5, seq%8 from seq_1_to_20;

set session use_stat_tables='COMPLEMENTARY';
analyze table t1 persistent for all;

--echo #
--echo # simple query after analyzing the table
--echo # planner should pick the analyzed table stats
--echo #
select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

set @records= (select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.num_of_records')));
select * from json_table(@records, '$[*]' columns(num_of_records text path '$')) as jt;
set @indexes=(select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.indexes')));
select * from json_table(@indexes, '$[*][*]' columns(index_name text path '$.index_name', rec_per_key json path '$.rec_per_key')) as jt;
set @list_ranges= (select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.list_ranges')));
select * from json_table(
    @list_ranges,
    '$[*][*]' columns(
        index_name text path '$.index_name',
        ranges json path '$.ranges',
        num_rows int path '$.num_rows',
        max_index_blocks int path '$.max_index_blocks',
        max_row_blocks int path '$.max_row_blocks'
    )
) as jt;

set @saved_opt_context_1=@opt_context;
set @saved_records_1=@records;
set @saved_indexes_1=@indexes;
set @saved_list_ranges_1=@list_ranges;

--echo #
--echo # load stats in JSON format into variable optimizer_replay_context
--echo # and rerun the query.
--echo # These loaded stats are same as the analyzed stats
--echo #
set optimizer_replay_context=@saved_opt_context_1;

select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

select JSON_EQUALS(@saved_opt_context_1, @opt_context);

--echo #
--echo # set the variable optimizer_replay_context to blank data
--echo # and rerun the query.
--echo # Analyzed table stats should be used for query planning
--echo #
set optimizer_replay_context="";

select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

select JSON_EQUALS(@saved_opt_context_1, @opt_context);

--echo #
--echo # now update the table without running analyze table, and then rerun the queries
--echo #

insert into t1 select seq%5, seq%8 from seq_1_to_20;

--echo #
--echo # Only range stats are different, as the table wasn't re-analyzed 
--echo #
select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

select JSON_EQUALS(@saved_opt_context_1, @opt_context);

set @records= (select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.num_of_records')));
set @indexes=(select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.indexes')));
set @list_ranges= (select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.list_ranges')));

set @saved_records_2 = @records;
set @saved_indexes_2 = @indexes;
set @saved_list_ranges_2 = @list_ranges;

select JSON_EQUALS(@saved_records_2, @saved_records_1);
select * from json_table(@records, '$[*]' columns(num_of_records text path '$')) as jt;
select JSON_EQUALS(@saved_indexes_2, @saved_indexes_1);
select JSON_EQUALS(@saved_list_ranges_2, @saved_list_ranges_1);
select * from json_table(
    @list_ranges,
    '$[*][*]' columns(
        index_name text path '$.index_name',
        ranges json path '$.ranges',
        num_rows int path '$.num_rows',
        max_index_blocks int path '$.max_index_blocks',
        max_row_blocks int path '$.max_row_blocks'
    )
) as jt;

--echo #
--echo # Now, load stats in JSON format into variable optimizer_replay_context
--echo # and rerun the query.
--echo # Loaded stats (including range stats) should be picked by the planner
--echo #
set optimizer_replay_context=@saved_opt_context_1;

select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

select JSON_EQUALS(@saved_opt_context_1, @opt_context);

--echo #
--echo # with optimizer_record_context OFF,
--echo # nothing gets printed to the trace
--echo #
set optimizer_record_context=OFF;

select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

select @opt_context;

--echo #
--echo # with optimizer_trace OFF,
--echo # nothing gets printed to the trace
--echo #
set optimizer_trace=0;

select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

select @opt_context;

--echo #
--echo # Now, after re-enabling optimizer_trace, and optimizer_record_context,
--echo # Loaded stats should be picked by the planner instead of the analyzed table stats,
--echo # as the optimizer_replay_context is still set to a valid json containing other stats
--echo #
set optimizer_trace=1;
set optimizer_record_context=ON;

select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

select JSON_EQUALS(@saved_opt_context_1, @opt_context);

--echo #
--echo # Now, set the variable optimizer_replay_context to blank data
--echo # and rerun the query.
--echo # Analyzed stats with updated range stats should be picked by the planner
--echo #
set optimizer_replay_context="";

select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

select JSON_EQUALS(@saved_opt_context_1, @opt_context);

set @records= (select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.num_of_records')));
set @indexes=(select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.indexes')));
set @list_ranges= (select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.list_ranges')));

select JSON_EQUALS(@saved_records_2, @records);
select JSON_EQUALS(@saved_indexes_2, @indexes);
select JSON_EQUALS(@saved_list_ranges_2, @list_ranges);

--echo #
--echo # now re-analyze the table, and then rerun the queries
--echo #

analyze table t1 persistent for all;

--echo #
--echo # All the stats are updated as the table is re-analyzed 
--echo #
select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

set @records= (select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.num_of_records')));
set @indexes=(select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.indexes')));
set @list_ranges= (select JSON_DETAILED(JSON_EXTRACT(@opt_context, '$**.list_ranges')));

select JSON_EQUALS(@saved_records_2, @records);
select JSON_EQUALS(@saved_indexes_2, @indexes);
select * from json_table(@indexes, '$[*][*]' columns(index_name text path '$.index_name', rec_per_key json path '$.rec_per_key')) as jt;
select JSON_EQUALS(@saved_list_ranges_2, @list_ranges);

set @saved_opt_context_2 = @opt_context;

--echo #
--echo # Now, load stats in JSON format into variable optimizer_replay_context
--echo # and rerun the query.
--echo # Loaded stats (including range stats) should be picked by the planner
--echo #
set optimizer_replay_context=@saved_opt_context_1;

select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

select JSON_EQUALS(@saved_opt_context_1, @opt_context);

--echo #
--echo # Now, set the variable optimizer_replay_context to blank data
--echo # and rerun the query.
--echo # All the re-analyzed stats should be picked by the planner
--echo #
set optimizer_replay_context="";

select * from t1 where a < 3 and b > 6;

set @opt_context=
  (select json_pretty(json_extract(
                       json_extract(trace, "$**.optimizer_context"),
                       '$[0]'
                      ))
   from information_schema.optimizer_trace);

select JSON_EQUALS(@saved_opt_context_2, @opt_context);

--echo #
--echo # The following tests check how Optimzer Context Parser reacts 
--echo # to JSON elements missing in the optimizer_replay_context variable
--echo #
set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.current_database')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].name')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].ddl')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].num_of_records')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].indexes[0].index_name')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].indexes[0].rec_per_key')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].list_ranges[0].index_name')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].list_ranges[0].ranges')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].list_ranges[0].num_rows')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].list_ranges[0].cost')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].list_ranges[0].max_index_blocks')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].list_ranges[0].max_row_blocks')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].indexes[0]')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_remove(@saved_opt_context_1, '$.list_contexts[0].list_ranges[0]')
);
select * from t1 where a > 10;

set optimizer_replay_context=json_pretty(
    json_replace(@saved_opt_context_1, '$.list_contexts[0].name', 'db2.t1')
);
select * from t1 where a > 10;

drop table t1;
drop database db1;

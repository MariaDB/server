--echo #
--echo # MDEV-33830 Support for cursors on prepared statements
--echo #

--echo # OPEN with a never prepared stmt

DELIMITER $$;
CREATE PROCEDURE p1()
BEGIN
  DECLARE c CURSOR FOR stmt;
  OPEN c;
END;
$$
DELIMITER ;$$
--error ER_UNKNOWN_STMT_HANDLER
CALL p1;
DROP PROCEDURE p1;


--echo # OPEN with a deallocated stmt

DELIMITER $$;
CREATE PROCEDURE p1()
BEGIN
  DECLARE c CURSOR FOR stmt;
  PREPARE stmt FROM 'SELECT 1';
  DEALLOCATE PREPARE stmt;
  OPEN c;
END;
$$
DELIMITER ;$$
--error ER_UNKNOWN_STMT_HANDLER
CALL p1;
DROP PROCEDURE p1;


--echo # OPEN with a non-SELECT statement

DELIMITER $$;
CREATE PROCEDURE p1()
BEGIN
  DECLARE c CURSOR FOR stmt;
  PREPARE stmt FROM 'DROP TABLE t1';
  OPEN c;
END;
$$
DELIMITER ;$$
#--error ER_SP_BAD_CURSOR_QUERY  TODO
--error ER_BAD_TABLE_ERROR
CALL p1;
DROP PROCEDURE p1;

--echo # An attemp to reuse an in-use statement in OPEN

DELIMITER $$;
CREATE FUNCTION f1() RETURNS INT
BEGIN
  DECLARE c CURSOR FOR stmt;
  OPEN c;
  CLOSE c;
  RETURN 11;
END;
$$
DELIMITER ;$$
PREPARE stmt FROM 'SELECT f1()';
--error ER_PS_NO_RECURSION
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
DROP FUNCTION f1;


--echo # SET STATEMENT .. FOR OPEN is not supported

DELIMITER $$;
--error ER_PARSE_ERROR
CREATE PROCEDURE p1()
BEGIN
  DECLARE v0 TEXT;
  DECLARE c CURSOR FOR ps;
  SET STATEMENT max_sort_length=1000 FOR OPEN c;
  CLOSE c;
END;
$$
DELIMITER ;$$


--echo # A single FETCH from a simple SELECT without tables

DELIMITER $$;
CREATE PROCEDURE p1(dynamic_sql TEXT)
BEGIN
  DECLARE v1 INT;
  DECLARE v2 TEXT;
  DECLARE c CURSOR FOR stmt;
  PREPARE stmt FROM dynamic_sql;
  OPEN c;
  FETCH c INTO v1, v2;
  SELECT v1, v2;
  CLOSE c;
END;
$$
DELIMITER ;$$
CALL p1('SELECT 123, ''v123''');
CALL p1('VALUES (123, ''v123'')');
DROP PROCEDURE p1;


--echo # A single FETCH + SELECT without tables + OPEN in an inner block

DELIMITER $$;
CREATE PROCEDURE p1(dynamic_sql TEXT)
BEGIN
  PREPARE stmt FROM dynamic_sql;
  BEGIN
    DECLARE v1 INT;
    DECLARE v2 TEXT;
    DECLARE c CURSOR FOR stmt;
    OPEN c;
    FETCH c INTO v1, v2;
    SELECT v1, v2;
    CLOSE c;
  END;
END;
$$
DELIMITER ;$$
CALL p1('SELECT 123, ''v123''');
CALL p1('VALUES (123, ''v123'')');
DROP PROCEDURE p1;


--echo # A loop for FETCH with an I_S query

DELIMITER $$;
CREATE PROCEDURE p1 ()
BEGIN
  DECLARE dynamic_sql TEXT;
  DECLARE v1 INT;
  DECLARE v2 VARCHAR(64);
  DECLARE end_of_data INT DEFAULT 0;
  DECLARE c0 CURSOR FOR stmt1;
  DECLARE EXIT HANDLER FOR NOT FOUND SET end_of_data = 1;

  SET dynamic_sql='SELECT id, collation_name'
                  ' FROM INFORMATION_SCHEMA.COLLATIONS'
                  ' WHERE id IN(33,83,192)'
                  ' ORDER BY id';

  PREPARE stmt1 FROM dynamic_sql;

  OPEN c0;

  WHILE (end_of_data = 0)
  DO
    FETCH FROM c0 INTO v1, v2;
    SELECT v1, v2;
  END WHILE;
  CLOSE c0;
END;
$$
DELIMITER ;$$
CALL p1();
CALL p1();
DROP PROCEDURE p1;


--echo # A single FETCH from a table

CREATE OR REPLACE TABLE t1 (a INT);
INSERT INTO t1 VALUES (10);

DELIMITER $$;
CREATE PROCEDURE p1()
BEGIN
  DECLARE v INT;
  DECLARE c CURSOR FOR stmt;
  PREPARE stmt FROM 'SELECT a FROM t1';
  OPEN c;
  FETCH c INTO v;
  SELECT v;
  CLOSE c;
END;
$$
DELIMITER ;$$
CALL p1;
DROP TABLE t1;
DROP PROCEDURE p1;


--echo # A single FETCH from a stored function

CREATE FUNCTION f1() RETURNS INT RETURN 123;

DELIMITER $$;
CREATE PROCEDURE p1()
BEGIN
  DECLARE v INT;
  DECLARE c CURSOR FOR stmt;
  PREPARE stmt FROM 'SELECT f1()';
  OPEN c;
  FETCH c INTO v;
  SELECT v;
  CLOSE c;
END;
$$
DELIMITER ;$$
CALL p1;
DROP FUNCTION f1;
DROP PROCEDURE p1;



--echo # Fetching from an arbitrary two row dynamic SQL passed as a parameter

CREATE TABLE t1 (a INT, b TEXT);
INSERT INTO t1 VALUES (1,'b1'), (2, 'b2');
CREATE FUNCTION f1(p INT) RETURNS INT RETURN p;
CREATE FUNCTION f2(p TEXT) RETURNS TEXT RETURN p;

DELIMITER $$;
CREATE PROCEDURE p1 (dynamic_sql TEXT)
BEGIN
  DECLARE v1 INT;
  DECLARE v2 VARCHAR(32);
  DECLARE end_of_data INT DEFAULT 0;
  DECLARE c0 CURSOR FOR stmt0;
  DECLARE EXIT HANDLER FOR NOT FOUND SET end_of_data = 1;

  PREPARE stmt0 FROM dynamic_sql;
  OPEN c0;

  WHILE (end_of_data = 0)
  DO
    FETCH FROM c0 INTO v1, v2;
    SELECT v1, v2;
  END WHILE;
  CLOSE c0;
END;
$$
DELIMITER ;$$
CALL p1('SELECT a,b FROM t1');
CALL p1('SELECT f1(a),f2(b) FROM t1');
CALL p1('SELECT a,b FROM t1 UNION ALL SELECT f1(a),f2(b) FROM t1');
CALL p1('SELECT a,b FROM t1 UNION DISTINCT SELECT f1(a),f2(b) FROM t1');
DROP PROCEDURE p1;
DROP TABLE t1;
DROP FUNCTION f1;
DROP FUNCTION f2;


--echo # Metadata change

CREATE TABLE t1 (a INT, b TEXT);
INSERT INTO t1 VALUES (10,'b10');

DELIMITER $$;
CREATE PROCEDURE p1()
BEGIN
  DECLARE v0, v1 TEXT;
  DECLARE c CURSOR FOR stmt;
  PREPARE stmt FROM 'SELECT * FROM t1';
  OPEN c;
  FETCH c INTO v0, v1;
  CLOSE c;
  DEALLOCATE PREPARE stmt;
  SELECT v0, v1;
END;
$$
DELIMITER ;$$
CALL p1;
ALTER TABLE t1 MODIFY COLUMN b TEXT DEFAULT '' FIRST ;
CALL p1;
ALTER TABLE t1 MODIFY COLUMN b TEXT DEFAULT '' AFTER a;
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1;


--echo # A <dynamic declare cusor> with parenthesized parameters

DELIMITER $$;
--error ER_WRONG_USAGE
CREATE PROCEDURE p1()
BEGIN
  DECLARE v INT;
  DECLARE c CURSOR(a INT) FOR stmt;
  PREPARE stmt FROM 'SELECT ?+a';
  OPEN c(1) USING 1;
  CLOSE c;
END;
$$
DELIMITER ;$$


--echo # Attempts to open a dynamic cursor with a named parameter fail
--echo # OPEN c(10); <-- this expects a static cursor declared as e.g.:
--echo # DECLARE c CURSOR(pa INT) FOR SELECT * FROM t1 WHERE a=pa;
--echo # Dynamic cursors with placeholders should be opened with USING:
--echo # DECLARE c CURSOR FOR prepared_stmt;
--echo # PREPARE prepared_stmt FROM 'SELECT * FROM t1 WHERE a=?';
--echo # OPEN c USING 10;

DELIMITER $$;
--error ER_WRONG_USAGE
CREATE PROCEDURE p1()
BEGIN
  DECLARE v INT;
  DECLARE c CURSOR FOR stmt;
  PREPARE stmt FROM 'SELECT 1 FROM DUAL WHERE ?>0';
  OPEN c(10);
  CLOSE c;
END;
$$
DELIMITER ;$$


--echo # A cursor with placeholder parameters: too few USING parameters

DELIMITER $$;
CREATE PROCEDURE p1()
BEGIN
  DECLARE v INT;
  DECLARE c CURSOR FOR stmt;
  PREPARE stmt FROM 'SELECT 1 FROM DUAL WHERE ?=0';
  OPEN c;
  CLOSE c;
END;
$$
DELIMITER ;$$
--error ER_WRONG_ARGUMENTS
CALL p1;
DROP PROCEDURE p1;


--echo # A cursor with placeholder parameters: too many USING parameters

DELIMITER $$;
CREATE PROCEDURE p1()
BEGIN
  DECLARE v INT;
  DECLARE c CURSOR FOR stmt;
  PREPARE stmt FROM 'SELECT 1 FROM DUAL';
  OPEN c USING 1;
  CLOSE c;
END;
$$
DELIMITER ;$$
--error ER_WRONG_ARGUMENTS
CALL p1;
DROP PROCEDURE p1;


--echo # A cursor with one param - SP

CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (10), (11), (12), (13);

CREATE FUNCTION f1() RETURNS INT RETURN 11;

DELIMITER $$;
--error ER_SUBQUERIES_NOT_SUPPORTED
CREATE PROCEDURE p1()
BEGIN
  DECLARE v INT;
  DECLARE end_of_data INT DEFAULT 0;
  DECLARE c CURSOR FOR stmt;
  DECLARE EXIT HANDLER FOR NOT FOUND SET end_of_data = 1;

  PREPARE stmt FROM 'SELECT a FROM t1 WHERE a>?';
  OPEN c USING f1();
  FETCH c INTO v;
  SELECT v;

  WHILE (end_of_data = 0)
  DO
    FETCH FROM c INTO v;
    SELECT v;
  END WHILE;

  CLOSE c;
END;
$$
DELIMITER ;$$
DROP FUNCTION f1;
DROP TABLE t1;


--echo # A cursor with one param - subselect

CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (10), (11), (12), (13);

CREATE FUNCTION f1() RETURNS INT RETURN 11;

DELIMITER $$;
--error ER_SUBQUERIES_NOT_SUPPORTED
CREATE PROCEDURE p1()
BEGIN
  DECLARE v INT;
  DECLARE end_of_data INT DEFAULT 0;
  DECLARE c CURSOR FOR stmt;
  DECLARE EXIT HANDLER FOR NOT FOUND SET end_of_data = 1;

  PREPARE stmt FROM 'SELECT a FROM t1 WHERE a>?';
  OPEN c USING (SELECT a FROM t1 WHERE a=11);
  FETCH c INTO v;
  SELECT v;

  WHILE (end_of_data = 0)
  DO
    FETCH FROM c INTO v;
    SELECT v;
  END WHILE;

  CLOSE c;
END;
$$
DELIMITER ;$$
DROP FUNCTION f1;
DROP TABLE t1;


--echo # A cursor with multiple parameters - SP + subquery mixture

CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (10), (11), (12), (13);

CREATE FUNCTION f1() RETURNS INT RETURN 11;

DELIMITER $$;
--error ER_SUBQUERIES_NOT_SUPPORTED
CREATE PROCEDURE p1()
BEGIN
  DECLARE v INT;
  DECLARE end_of_data INT DEFAULT 0;
  DECLARE c CURSOR FOR stmt;
  DECLARE EXIT HANDLER FOR NOT FOUND SET end_of_data = 1;

  PREPARE stmt FROM 'SELECT a FROM t1 WHERE a>? AND a>? AND a>?';
  OPEN c USING f1(), (SELECT a FROM t1 WHERE a=12), f1();
  FETCH c INTO v;
  SELECT v;

  WHILE (end_of_data = 0)
  DO
    FETCH FROM c INTO v;
    SELECT v;
  END WHILE;

  CLOSE c;
END;
$$
DELIMITER ;$$
DROP FUNCTION f1;
DROP TABLE t1;


--echo # A cursor with multiple parameters in SELECT list

CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (10), (11), (12), (13);

CREATE FUNCTION f1() RETURNS TEXT RETURN 'f1';

DELIMITER $$;
--error ER_SUBQUERIES_NOT_SUPPORTED
CREATE PROCEDURE p1()
BEGIN
  DECLARE v0 TEXT;
  DECLARE v1 TEXT;
  DECLARE c CURSOR FOR stmt;
  PREPARE stmt FROM 'SELECT ?,? FROM t1';
  OPEN c USING (SELECT MAX(a) FROM t1), f1();
  FETCH c INTO v0, v1;
  SELECT v0, v1;
  CLOSE c;
END;
$$
DELIMITER ;$$
DROP FUNCTION f1;
DROP TABLE t1;

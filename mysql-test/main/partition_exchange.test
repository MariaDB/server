--source include/have_innodb.inc
--source include/have_partition.inc

--disable_warnings
DROP TABLE IF EXISTS t1, t2, t3, t, tp, tsp, tmp;
--enable_warnings

--echo #
--echo # Bug#11894100: EXCHANGE PARTITION CAN'T BE EXECUTED IF
--echo #               ROW_FORMAT WAS SET EXPLICITLY
--echo #

--echo # Same definition (both have ROW_FORMAT set)
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT=COMPACT
PARTITION BY HASH (id)
PARTITIONS 2;

CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;

--vertical_results
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;

SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2')
ORDER BY TABLE_NAME;

ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2')
ORDER BY TABLE_NAME;

DROP TABLE t2;

--echo # Only the partitioned table have ROW_FORMAT set.
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB;

ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2')
ORDER BY TABLE_NAME;

--echo # Only the non partitioned table have ROW_FORMAT set.
DROP TABLE t1, t2;
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB
PARTITION BY HASH (id)
PARTITIONS 2;
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = COMPACT;

ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2')
ORDER BY TABLE_NAME;

--echo # No table have ROW_FORMAT set.
DROP TABLE t1, t2;
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB
PARTITION BY HASH (id)
PARTITIONS 2;
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB;

ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2')
ORDER BY TABLE_NAME;

--echo # Not same ROW_FORMAT as default (but same).
DROP TABLE t1, t2;
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = REDUNDANT
PARTITION BY HASH (id)
PARTITIONS 2;
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;

ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2')
ORDER BY TABLE_NAME;

--echo # Not same ROW_FORMAT as default (tables differs).
DROP TABLE t1, t2;
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB
PARTITION BY HASH (id)
PARTITIONS 2;
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;

--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2')
ORDER BY TABLE_NAME;

--echo # Different than default (forced ROW_TYPE)
DROP TABLE t1, t2;
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = COMPACT
PARTITION BY HASH (id)
PARTITIONS 2;
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(2) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;

--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2')
ORDER BY TABLE_NAME;
--horizontal_results
DROP TABLE t1, t2;

--echo #
--echo # Bug#56484: !table || (!table->read_set ||
--echo #                       bitmap_is_set(table->read_set, field_index))
--echo #
CREATE TABLE t1 (a INT NOT NULL,b TIME NOT NULL DEFAULT '00:00:00')
ENGINE=MyISAM
PARTITION BY HASH (a) PARTITIONS 2;

CREATE TABLE t2 (a INT) ENGINE=MYISAM;
--error ER_TABLES_DIFFERENT_METADATA
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
DROP TABLE t1, t2;

--echo #
--echo # Bug#55784: Foreign key integrity broken by alter table
--echo #
CREATE TABLE t1 (s1 INT PRIMARY KEY) ENGINE=InnoDB;

CREATE TABLE t2 (s1 INT, FOREIGN KEY (s1) REFERENCES t1 (s1)) ENGINE=InnoDB;

INSERT INTO t1 VALUES (1),(2),(3);

INSERT INTO t2 VALUES (1),(2),(3);

CREATE TABLE t3 (s1 INT PRIMARY KEY)
  ENGINE=InnoDB
  PARTITION BY LIST (s1)
  (PARTITION p1 VALUES IN (1,2,3));

--error ER_PARTITION_EXCHANGE_FOREIGN_KEY
ALTER TABLE t3 EXCHANGE PARTITION p1 WITH TABLE t1;

DROP TABLE t2, t1, t3;

--echo # Tests for WL#4445
CREATE TABLE t (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a))
ENGINE = MyISAM;

CREATE TABLE tp (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a))
ENGINE = MyISAM
PARTITION BY RANGE (a)
(PARTITION p0 VALUES LESS THAN (100),
 PARTITION p1 VALUES LESS THAN MAXVALUE);

CREATE TABLE tsp (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a))
ENGINE = MyISAM
PARTITION BY RANGE (a)
SUBPARTITION BY HASH(a)
(PARTITION p0 VALUES LESS THAN (100)
 (SUBPARTITION sp0,
  SUBPARTITION sp1),
 PARTITION p1 VALUES LESS THAN MAXVALUE
 (SUBPARTITION sp2,
  SUBPARTITION sp3));

INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
--error ER_ROW_DOES_NOT_MATCH_PARTITION
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
--echo # Test list of partitions
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t IGNORE;
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t IGNORE;
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t;
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION (p0,p1) WITH TABLE t;
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE (t,t2);
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t,t2;
--error ER_UNKNOWN_PARTITION
ALTER TABLE tp EXCHANGE PARTITION non_existent WITH TABLE t;
--error ER_PARTITION_INSTEAD_OF_SUBPARTITION
ALTER TABLE tsp EXCHANGE PARTITION p0 WITH TABLE t;
--error ER_PARTITION_EXCHANGE_PART_TABLE
ALTER TABLE tsp EXCHANGE PARTITION sp0 WITH TABLE tp;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SHOW CREATE TABLE tsp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
--echo # Test exchange partition
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
--echo # Test exchange subpartition
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tsp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ENGINE = InnoDB;
ALTER TABLE tp ENGINE = InnoDB;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
--echo # test different engines
ALTER TABLE t ENGINE = MyISAM;
ALTER TABLE tp ENGINE = InnoDB;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--error ER_MIX_HANDLER_ERROR
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--echo # Test different charsets
ALTER TABLE t ENGINE = MyISAM;
CREATE TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
RENAME TABLE t TO tmp2, tmp TO t;
ALTER TABLE tp ENGINE = MyISAM;
ALTER TABLE t CHARACTER SET = koi8r COLLATE koi8r_general_ci;
--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t;
--echo # Test multiple different table options
CREATE TABLE t (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a))
ENGINE = MyISAM MAX_ROWS = 100000 MIN_ROWS = 1000;
INSERT INTO t SELECT * FROM tmp2;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
DROP TABLE t;
RENAME TABLE tmp2 TO t;
# test different keys
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE tp ADD KEY ba_key (b, a);
ALTER TABLE tsp ADD KEY ba_key (b, a);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t DROP KEY ba_key;
--error ER_TABLES_DIFFERENT_METADATA
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t ADD KEY b_key (b);
--error ER_TABLES_DIFFERENT_METADATA
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE t DROP KEY b_key;
# test different index types
# test different columns
ALTER TABLE t CHANGE a c INT;
--error ER_TABLES_DIFFERENT_METADATA
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t CHANGE c a INT;
# test different data/index dir
# test different options (row_format, max/min_rows, comments, tablespace,
#                         pack_keys, delay_key_write, checksum etc.
# test foreign keys
--echo # test temporary table
ALTER TABLE t ENGINE = MyISAM;
ALTER TABLE tp ENGINE = MyISAM;
CREATE TEMPORARY TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
ALTER TABLE t RENAME TO tmp2;
ALTER TABLE tmp RENAME TO t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--error ER_PARTITION_EXCHANGE_TEMP_TABLE
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
DROP TEMPORARY TABLE t;
ALTER TABLE tmp2 RENAME TO t;
--echo # Test non partitioned table
ALTER TABLE tp REMOVE PARTITIONING;
--error ER_PARTITION_MGMT_ON_NONPARTITIONED
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;

# TODO:
# Verify that it is possible to read a table that is going to be exchanged
# (but not write)
# Verify that it is possible to both read and write to the partition that is
# going to be exchanged
# test mdl locking (i.e. together with transactions and other ddl)
# Add test in lc_0-2 to make sure renameing operators is ok with different lc
# Add test to exchange between databases, also check grants.
# Add test for privileges
# check if correct error whithout partitioning support
DROP TABLE t, tp, tsp;


--echo # Test with general_log
use mysql;
SET @old_general_log_state = @@global.general_log;
SET GLOBAL general_log = 0;
ALTER TABLE general_log ENGINE = MyISAM;
CREATE TABLE t LIKE general_log;
ALTER TABLE t PARTITION BY RANGE (UNIX_TIMESTAMP(event_time) DIV 1)
(PARTITION p0 VALUES LESS THAN (123456789),
 PARTITION pMAX VALUES LESS THAN MAXVALUE);
--error ER_BAD_LOG_STATEMENT
ALTER TABLE t EXCHANGE PARTITION p0 WITH TABLE general_log;
ALTER TABLE general_log ENGINE = CSV;
SET @@global.general_log = @old_general_log_state;
DROP TABLE t;
use test;

--echo # Test with LOCK TABLE
# Test with only one table locked at a time, both table locked + read, write

CREATE TABLE tp
(a VARCHAR(24),
 b DATETIME,
 PRIMARY KEY (a,b))
PARTITION BY RANGE COLUMNS (a, b)
(PARTITION p0 VALUES LESS THAN ("Middle", '0000-00-00'),
 PARTITION p1 VALUES LESS THAN (MAXVALUE, '9999-12-31 23:59:59'));
CREATE TABLE t LIKE tp;
ALTER TABLE t REMOVE PARTITIONING;
CREATE TABLE t2 LIKE t;
INSERT INTO tp VALUES ("First in tp", '2000-01-02 03:04:25'), ("Zebra in tp", '0000-00-00 00:00:00'), ("Second in tp", '2010-01-01 05:12:24');
INSERT INTO t VALUES ("First in t", '2000-01-02 03:04:25'), ("a test in t", '0000-00-00 00:00:00'), ("Echo in t", '2010-01-01 05:12:24');
# 3 different kind of locks (none, READ, WRITE) for three different tables.
# 3^3 = 18. The variant with no locks does not need testing -> 17
let $count = 17;
while ($count)
{
let $t_lock = `SELECT (CASE ($count % 3) WHEN 0 THEN 0 WHEN 1 THEN 'WRITE' WHEN 2 THEN 'READ' END)`;
let $tp_lock = `SELECT (CASE ((($count + 2) DIV 3) % 3) WHEN 0 THEN 0 WHEN 1 THEN 'WRITE' WHEN 2 THEN 'READ' END)`;
let $t2_lock = `SELECT (CASE ((($count + 8) DIV 9) % 3) WHEN 0 THEN 0 WHEN 1 THEN 'WRITE' WHEN 2 THEN 'READ' END)`;
--echo # tp_lock '$tp_lock' t_lock '$t_lock' t2_lock '$t2_lock' count '$count'
let $lock_cmd = LOCK TABLE;
let $take_lock = 0;
if ($t_lock)
{
  let $lock_cmd = $lock_cmd t $t_lock;
  let $take_lock = 1;
}
if ($tp_lock)
{
  if ($take_lock)
  {
    let $lock_cmd = $lock_cmd, tp $tp_lock;
  }
  if (!$take_lock)
  {
    let $lock_cmd = $lock_cmd tp $tp_lock;
  }
  let $take_lock = 1;
}
if ($t2_lock)
{
  if ($take_lock)
  {
    let $lock_cmd = $lock_cmd, t2 $t2_lock;
  }
  if (!$take_lock)
  {
    let $lock_cmd = $lock_cmd t2 $t2_lock;
  }
  let $take_lock = 1;
}
if ($take_lock)
{
  eval $lock_cmd;
}
--error 0, ER_TABLE_NOT_LOCKED, ER_TABLE_NOT_LOCKED_FOR_WRITE
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
--error 0, ER_TABLE_NOT_LOCKED, ER_TABLE_NOT_LOCKED_FOR_WRITE
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t2;
SHOW WARNINGS;
UNLOCK TABLES;
dec $count;
}
DROP TABLE t, t2, tp;

--echo #
--echo # Assertion `!part_elem->tablespace_name && !table_create_info->tablespace' 
--echo #                failed during EXCHANGE PARTITION with different TABLESPACE.
--echo #
CREATE TABLE t1 (a VARCHAR(200)) PARTITION BY KEY(a) partitions 10;
ALTER TABLE t1 ADD PARTITION (PARTITION pm TABLESPACE = `innodb_file_per_table`);
CREATE TABLE t2 like t1;
ALTER TABLE t2 REMOVE PARTITIONING;
--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE t1 EXCHANGE PARTITION pm WITH TABLE t2;
DROP TABLE t1, t2;


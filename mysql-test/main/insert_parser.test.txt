#
# Syntax check for INSERT...RETURNING
#

--echo # RETURNING * and RETURNING <COLUMN_NAME> should work. 
--echo # Other cases with RETURNING should output syntax error.

--disable_warnings
drop table if exists t1,t2;
--enable_warnings

CREATE TABLE t1(id1 INT, val1 VARCHAR(1));
--echo Table t1 created successfully. Fields: id1 INT, val1 VARCHAR(1);

CREATE TABLE t2(id2 INT, val2 VARCHAR(1));
--echo Table t2 created successfully. Fields: id2 INT, val2 VARCHAR(1);

#
#Simple insert statement
#
--echo #Simple insert statement
INSERT INTO t1 (id1, val1) VALUES (1, 'a');
INSERT INTO t1 (id1, val1) VALUES (2, 'b') RETURNING *;
INSERT INTO t1 (id1, val1) VALUES (3, 'c') RETURNING id1, val1;
SELECT * FROM t1;
TRUNCATE TABLE t1;
SELECT * FROM t1;

#
#multiple values in one insert statement
#
--echo #multiple values in one insert statement
INSERT INTO t1 VALUES (1,'a'),(2,'b');
INSERT INTO t1 VALUES (3,'c'),(4,'d') RETURNING *;
INSERT INTO t1 VALUES (13,'i'),(14,'j') RETURNING id2, val2;


#
#INSERT...ON DULPICATE KEY UPDATE
#
--echo # INSERT...ON DULPICATE KEY UPDATE
CREATE TABLE ins_duplicate (id INT PRIMARY KEY, val VARCHAR(1));
INSERT INTO ins_duplicate VALUES (1,'a');
INSERT INTO ins_duplicate VALUES (2,'b') ON DUPLICATE KEY UPDATE val='b' RETURNING id,val;
INSERT INTO ins_duplicate VALUES (2,'b') ON DUPLICATE KEY UPDATE val='c' RETURNING *;

#
# INSERT...SET
#

--echo # INSERT...SET
INSERT INTO  t1 SET id1 = 1, val1 = 'a'; 
INSERT INTO  t1 SET id1 = 2, val1 = 'b' RETURNING *;
INSERT INTO  t1 SET id1 = 3, val1 = 'c' RETURNING id1,val1;

DROP TABLE t1; 
DROP TABLE t2;
DROP TABLE ins_duplicate;

#
--echo #End of test case 
#
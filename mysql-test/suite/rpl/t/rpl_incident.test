#
# This include file is used by more than one test suite
# (currently rpl and binlog_encryption).
# Please check all dependent tests after modifying it
#

--source include/have_debug.inc
--source include/master-slave.inc

SET @old_binlog_checksum=@@binlog_checksum;
SET GLOBAL BINLOG_CHECKSUM=none;
connection slave;
SET @old_binlog_checksum=@@binlog_checksum;
SET GLOBAL BINLOG_CHECKSUM=none;
connection master;

--echo **** On Master ****
CREATE TABLE t1 (a INT);

INSERT INTO t1 VALUES (1),(2),(3);
SELECT * FROM t1;

set @saved_dbug = @@global.debug_dbug;
SET GLOBAL debug_dbug= '+d,incident_database_resync_on_replace,*';

# This will generate an incident log event and store it in the binary
# log before the replace statement.
REPLACE INTO t1 VALUES (4);
--save_master_pos
SELECT * FROM t1;

set @@global.debug_dbug = @saved_dbug;

connection slave;
# Wait until SQL thread stops with error LOST_EVENT on master
call mtr.add_suppression("Slave SQL.*The incident LOST_EVENTS occurred on the master.* 1590");
let $slave_sql_errno= 1590;
let $show_slave_sql_error= 1;
source include/wait_for_slave_sql_error.inc;

# The 4 should not be inserted into the table, since the incident log
# event should have stop the slave.
--echo **** On Slave ****
SELECT * FROM t1;

SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1;
START SLAVE;
--sync_with_master

# Now, we should have inserted the row into the table and the slave
# should be running. We should also have rotated to a new binary log.

SELECT * FROM t1;
source include/check_slave_is_running.inc;

connection master;
SET GLOBAL BINLOG_CHECKSUM=@old_binlog_checksum;
DROP TABLE t1;
--sync_slave_with_master
SET GLOBAL BINLOG_CHECKSUM=@old_binlog_checksum;


--echo #
--echo # MDEV-33268: IO Thread Can Write Gtid_list_log_event Mid-transaction
--echo #             into Relay Log
--connection master
create table t33268 (a int);
--sync_slave_with_master

--connection slave
--source include/stop_slave.inc
CHANGE MASTER TO IGNORE_DOMAIN_IDS=(2), MASTER_USE_GTID=Slave_Pos;
set @old_dbug= @@GLOBAL.debug_dbug;
set @@GLOBAL.debug_dbug= "+d,pause_io_thread_after_queueing_insertion_event";
START SLAVE IO_THREAD;
START SLAVE SQL_THREAD;

--connection master
set statement gtid_domain_id=2 for insert into t33268 values (1);
insert into t33268 values (2);

--connection slave
--echo # Waiting for debug_sync io_thread_queued_insertion_event signal..
set debug_sync="now wait_for io_thread_queued_insertion_event";

--connection slave1
--send stop slave io_thread;

--connection slave
--echo # Wait for stop slave to be recognized
--let $wait_condition= SELECT count(*)=1 FROM information_schema.processlist WHERE state LIKE '%Killing slave%';
--source include/wait_condition.inc

--connection slave
set debug_sync="now signal continue_io_thread";

--connection slave1
--reap

--connection slave
--source include/stop_slave_sql.inc

--source include/rpl_end.inc

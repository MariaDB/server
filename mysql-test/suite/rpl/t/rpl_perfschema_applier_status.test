# ==== Purpose ====
#
# This test script serves as the functionality testing for the table
# performance_schema.replication_applier_status. Test for ddl and dml
# operations is a part of the perfschema suite. The ddl/dml tests are named:
# 1) ddl_replication_applier_status.test and
# 2) dml_replication_applier_status.test.
#
# The follwing scenarios are tested in this script:
#
#  - Verify that output is same as SSS on a fresh slave.
#  - Verify that the value of this field is correct after STOP SLAVE.
#  - Remaining delay is not tested.
#  - Count_trnsaction is partially tested here making sure it can be queried.
#    More testing in rpl/include/rpl_deadlock.test
#
#  ==== Related Worklog ====
#
# MDEV-16437: merge 5.7 P_S replication instrumentation and tables
#

source include/have_perfschema.inc;
source include/have_binlog_format_mixed.inc;
source include/master-slave.inc;

let $assert_text= On master, the table should return an empty set.;
let $assert_cond= count(*) = 0 from performance_schema.replication_applier_status;
source include/assert.inc;

--connection slave

--echo
--echo # Verify that SELECT works and produces an output similar to
--echo # the corresponding field in SHOW SLAVE STATUS(SSS) in all scenarios.
--echo

--echo
--echo # Verify that output is same as SSS on a fresh slave.
--echo

let $sss_value= query_get_value(SHOW SLAVE STATUS, Slave_SQL_Running, 1);
let $ps_value= query_get_value(select Service_State from performance_schema.replication_applier_status, Service_State, 1);
let $assert_text= SSS shows Slave_SQL_Running as "Yes". So, Service_State from this PS table should be "ON".;
let $assert_cond= "$sss_value" = "Yes" AND "$ps_value"= "ON";
source include/assert.inc;

let $ss_value= query_get_value(SHOW STATUS LIKE 'Slave_retried_transactions', Value, 1);
let $ps_value= query_get_value(select count_transactions_retries from performance_schema.replication_applier_status, count_transactions_retries, 1);
let $assert_text= COUNT_TRANSACTION_RETRIES should be equal to Slave_retried_transactions.;
let $assert_cond= "$ps_value"= "$ss_value";
source include/assert.inc;

--echo
--echo # Verify that the fields show the correct values after STOP SLAVE.
--echo

source include/stop_slave.inc;

let $sss_value= query_get_value(SHOW SLAVE STATUS, Slave_SQL_Running, 1);
let $ps_value= query_get_value(select Service_State from performance_schema.replication_applier_status, Service_State, 1);
let $assert_text= SSS shows Slave_SQL_Running as "No". So, Service_State from this PS table should be "OFF".;
let $assert_cond= "$sss_value" = "No" AND "$ps_value"= "OFF";
source include/assert.inc;

let $ss_value= query_get_value(SHOW STATUS LIKE 'Slave_retried_transactions', Value, 1);
let $ps_value= query_get_value(select count_transactions_retries from performance_schema.replication_applier_status, count_transactions_retries, 1);
let $assert_text= COUNT_TRANSACTION_RETRIES should be equal to Slave_retried_transactions.;
let $assert_cond= "$ps_value"= "$ss_value";
source include/assert.inc;

source include/start_slave.inc;
source include/rpl_end.inc;


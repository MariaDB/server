#
# Test that BF abort through MDL aborts InnoDB transaction which
# is registering.
#

--source include/galera_cluster.inc
--source include/have_innodb.inc
--source include/have_debug_sync.inc

CREATE TABLE t1 (f1 INTEGER PRIMARY KEY) ENGINE=InnoDB;

--let $debug_dbug_orig = `SELECT VARIABLE_VALUE FROM information_schema.global_variables WHERE VARIABLE_NAME = 'debug_dbug'`

--connection node_1
SET SESSION wsrep_retry_autocommit = 0;
# Stop execution in trans_register_ha()
SET SESSION DEBUG_SYNC = "wsrep_after_trans_register_ha SIGNAL reached WAIT_FOR continue";
--send INSERT INTO t1 VALUES (1)

--connect node_1_ctrl, 127.0.0.1, root, , test, $NODE_MYPORT_1
SET DEBUG_SYNC = "now WAIT_FOR reached";

# Stop APPLIER execution in wsrep_abort_transaction_read_only after
# finding that victim is read only.
SET GLOBAL DEBUG_DBUG = "+d,sync.wsrep_abort_transaction_read_only";

--connection node_2
ALTER TABLE t1 ADD COLUMN f2 INT;

--connection node_1_ctrl
# Wait for BF thread to arrive in sync point
SET DEBUG_SYNC = "now WAIT_FOR sync.wsrep_abort_transaction_read_only_reached";
# Let the local INSERT continue
SET DEBUG_SYNC = "now SIGNAL continue";
SET DEBUG_SYNC = "now SIGNAL signal.wsrep_abort_transaction_read_only";
--connection node_1
--error ER_LOCK_DEADLOCK
--reap

SET DEBUG_SYNC = "RESET";
--disable_query_log
--eval SET GLOBAL DEBUG_DBUG = "$debug_dbug_orig"
--enable_query_log

DROP TABLE t1;

#
# Test the case where a Galera slave to async replication goes non-prim while
# a stream of replication events including filtered events is arriving
#

--source include/have_innodb.inc
--source include/have_log_bin.inc
--source include/big_test.inc

# As node #1 is not a Galera node, we connect to node #2 in order to run include/galera_cluster.inc
--connect node_2a, 127.0.0.1, root, , test, $NODE_MYPORT_2
--source include/galera_cluster.inc

--connection node_1
SET GLOBAL wsrep_on=OFF;
RESET MASTER;
SET GLOBAL wsrep_on=ON;

--connect node_3, 127.0.0.1, root, , test, $NODE_MYPORT_3
--connection node_3
SET global wsrep_on=OFF;
RESET MASTER;
SET global wsrep_on=ON;

--connection node_2
SET global wsrep_on=OFF;
RESET MASTER;
SET global wsrep_on=ON;

--connection node_2
--disable_query_log
--eval CHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_PORT=$NODE_MYPORT_1;
--enable_query_log
START SLAVE USER='root';

--connection node_1
CREATE SCHEMA test1;
CREATE SCHEMA test2;
USE test1;
CREATE TABLE t1 (f1 INTEGER) ENGINE=InnoDB;
USE test2;
CREATE TABLE t1 (f1 INTEGER) ENGINE=InnoDB;

INSERT INTO test1.t1 (f1) VALUES (1);
INSERT INTO test2.t1 (f1) VALUES (1);

INSERT INTO test1.t1 (f1) VALUES (2);
INSERT INTO test2.t1 (f1) VALUES (2);

--connection node_2
--let $wait_condition = SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 't1';
--source include/wait_condition.inc

--let $wait_condition = SELECT COUNT(*) = 2 FROM test1.t1;
--source include/wait_condition.inc

SET GLOBAL wsrep_provider_options='gmcast.isolate=1';

--connection node_1
INSERT INTO test1.t1 (f1) VALUES (3);
INSERT INTO test2.t1 (f1) VALUES (3);
INSERT INTO test1.t1 (f1) VALUES (3);
INSERT INTO test2.t1 (f1) VALUES (3);
INSERT INTO test1.t1 (f1) VALUES (3);
INSERT INTO test2.t1 (f1) VALUES (3);
INSERT INTO test1.t1 (f1) VALUES (3);
INSERT INTO test2.t1 (f1) VALUES (3);

--connection node_2
SET SESSION wsrep_on=OFF;
--let $wait_condition = SELECT VARIABLE_VALUE = 'non-Primary' FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE variable_name = 'wsrep_cluster_status';
--source include/wait_condition.inc

--let $slave_sql_errno = 1047
--source include/wait_for_slave_sql_error.inc

--connection node_1
INSERT INTO test1.t1 (f1) VALUES (4);
INSERT INTO test2.t1 (f1) VALUES (4);
INSERT INTO test1.t1 (f1) VALUES (4);
INSERT INTO test2.t1 (f1) VALUES (4);
INSERT INTO test1.t1 (f1) VALUES (4);
INSERT INTO test2.t1 (f1) VALUES (4);
INSERT INTO test1.t1 (f1) VALUES (4);
INSERT INTO test2.t1 (f1) VALUES (4);
INSERT INTO test1.t1 (f1) VALUES (4);
INSERT INTO test2.t1 (f1) VALUES (4);

--connection node_2
SET GLOBAL wsrep_provider_options='gmcast.isolate=0';

--connection node_1
INSERT INTO test1.t1 (f1) VALUES (5);
INSERT INTO test2.t1 (f1) VALUES (5);

--connection node_2
--let $wait_condition = SELECT VARIABLE_VALUE = 'Primary' FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE variable_name = 'wsrep_cluster_status';
--source include/wait_condition.inc
SET SESSION wsrep_on=ON;
--let $wait_condition = SELECT VARIABLE_VALUE = 'ON' FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE variable_name = 'wsrep_ready';
--source include/wait_condition.inc

--connection node_1
INSERT INTO test1.t1 (f1) VALUES (6);
INSERT INTO test2.t1 (f1) VALUES (6);

--connection node_2
START SLAVE;

#
# Consistency checks
#

--sleep 2
--connection node_2
--let $wait_condition = SELECT COUNT(DISTINCT f1) = 6 FROM test1.t1;
--source include/wait_condition.inc

--connection node_3
--let $wait_condition = SELECT COUNT(DISTINCT f1) = 6 FROM test1.t1;
--source include/wait_condition.inc

--connection node_2
--let $gtid_executed_node2 = `SELECT @@global.gtid_executed;`

--let $effective_uuid_1 = `SELECT SUBSTRING_INDEX(@@global.gtid_executed, ':', 1)`
--let $effective_uuid_2 = `SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(@@global.gtid_executed, '\n', -1), ':', 1)`

--replace_result $effective_uuid_1 <effective_uuid_1> $effective_uuid_2 <effective_uuid_2>
--replace_regex /xid=[0-9]+/xid=###/ /table_id: [0-9]+/table_id: ###/
SHOW BINLOG EVENTS IN 'mysqld-bin.000001' FROM 120;

--error 1049
USE test2;

--connection node_3

--disable_query_log
--eval SELECT '$gtid_executed_node2' = @@global.gtid_executed AS gtid_executed_equal;
--enable_query_log

--error 1049
USE test2;

--replace_result $effective_uuid_1 <effective_uuid_1> $effective_uuid_2 <effective_uuid_2>
--replace_regex /xid=[0-9]+/xid=###/ /table_id: [0-9]+/table_id: ###/
SHOW BINLOG EVENTS IN 'mysqld-bin.000001' FROM 120;

#
# Cleanup
#

--connection node_1
DROP SCHEMA test1;
DROP SCHEMA test2;

--sleep 1

--connection node_3
--let $wait_condition = SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 't1';
--source include/wait_condition.inc

--connection node_2
--let $wait_condition = SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 't1';
--source include/wait_condition.inc

--connection node_2
STOP SLAVE;
RESET SLAVE ALL;
CALL mtr.add_suppression("GTID replication failed");
CALL mtr.add_suppression("Slave SQL: Error in Xid_log_event: Commit could not be completed");
CALL mtr.add_suppression("Slave SQL: Node has dropped from cluster, Error_code: 1047");
CALL mtr.add_suppression("TO isolation failed for");
CALL mtr.add_suppression("Slave SQL: Error 'Deadlock found when trying to get lock; try restarting transaction' on query");
CALL mtr.add_suppression("Slave SQL: Error 'WSREP has not yet prepared node for application use' on query");
CALL mtr.add_suppression("Slave: WSREP has not yet prepared node for application use Error_code: 1047");

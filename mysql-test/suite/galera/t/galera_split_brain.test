#
# Confirm that with two nodes, killing one causes the other to stop accepting connections
# The pc.ignore_sb=true wsrep_provider option is tested in the galera_kill_* tests.
#

--source include/galera_cluster.inc
--source include/have_innodb.inc

call mtr.add_suppression("WSREP: TO isolation failed for: ");

--connection node_1
--let $wsrep_cluster_address_orig = `SELECT @@wsrep_cluster_address`

# Save original auto_increment_offset values.
--connection node_1
let $auto_increment_offset_node_1 = `SELECT @@global.auto_increment_offset`;
--connection node_2
let $auto_increment_offset_node_2 = `SELECT @@global.auto_increment_offset`;

--connection node_2
--source include/kill_galera.inc

--connection node_1
--error ER_LOCK_DEADLOCK
CREATE TABLE t1 (f1 INTEGER) ENGINE=InnoDB;

# Reset the master and restart the slave so that post-test checks can run

SET GLOBAL wsrep_cluster_address = '';
--disable_query_log
--eval SET GLOBAL wsrep_cluster_address = '$wsrep_cluster_address_orig';
--enable_query_log

--source include/start_mysqld.inc
--sleep 5
--source include/wait_until_connected_again.inc

--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

--sleep 5

--connect node_2a, 127.0.0.1, root, , test, $NODE_MYPORT_2
--source include/wait_until_connected_again.inc

# Restore original auto_increment_offset values.
--disable_query_log
--connection node_1
--eval SET @@global.auto_increment_offset = $auto_increment_offset_node_1;
--connection node_2a
--eval SET @@global.auto_increment_offset = $auto_increment_offset_node_2;
--enable_query_log


#
# Test that a LOCK TABLE on the slave will cause all applier threads to block,
# Even though the two INSERTS are independent transactions, the fact that t1 is locked
# prevents the applier thread from committing the insert against t2, as commits are done
# in order.
#

--source include/galera_cluster.inc
--source include/have_innodb.inc

CREATE TABLE t1 (id INT PRIMARY KEY) ENGINE=InnoDB;
CREATE TABLE t2 (id INT PRIMARY KEY) ENGINE=InnoDB;

--connection node_2

--let $wsrep_slave_threads_orig = `SELECT @@wsrep_slave_threads`
--let $wsrep_sync_wait_orig = `SELECT @@wsrep_sync_wait`

SET GLOBAL wsrep_slave_threads = 2;
LOCK TABLE t1 READ;

--connection node_1
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1);

# We use a separate connection here so that we can SELECT from both tables
# without running into "table t2 was not locked" error.

--let $galera_connection_name = node_2a
--let $galera_server_number = 2
--source include/galera_connect.inc
--connection node_2a
--sleep 1
SET SESSION wsrep_sync_wait=0;
SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE LIKE '%applied write set%';
SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE LIKE 'Waiting for table metadata lock';
SELECT COUNT(*) = 0 FROM t1;
SELECT COUNT(*) = 0 FROM t2;

--connection node_2
UNLOCK TABLES;

--connection node_2a
--eval SET SESSION wsrep_sync_wait = $wsrep_sync_wait_orig;
SELECT COUNT(*) = 1 FROM t1;
SELECT COUNT(*) = 1 FROM t2;
SELECT COUNT(*) = 2  FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE LIKE 'committed%';

--eval SET GLOBAL wsrep_slave_threads = $wsrep_slave_threads_orig;
DROP TABLE t1;
DROP TABLE t2;

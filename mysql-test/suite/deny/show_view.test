--source include/not_embedded.inc

let $REGEX_VERSION_ID=/$mysql_get_server_version/VERSION_ID/;

--echo #
--echo # This test checks the implementation of denies with regards to show view
--echo # commands and I_S tables.
--echo #
create database some_db;
use some_db;
create user foo;


create table t1 (id int);
create view v1 as select * from t1;
create definer = foo
sql security definer view v2 as select 1;

grant insert(id) on some_db.t1 to foo;
grant show view on some_db.* to foo;
grant show view on some_db.v1 to foo;
grant select on some_db.* to foo;
grant select on some_db.v1 to foo;
grant select(id) on some_db.v1 to foo;

show grants for foo;
--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
show create view some_db.v1;
show create view some_db.v2;
disconnect con1;

connection default;
deny select on *.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v1;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v2;
disconnect con1;

connection default;
deny show view on *.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v1;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v2;
disconnect con1;

connection default;
revoke deny show view on *.* from foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v1;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v2;
disconnect con1;

connection default;
revoke deny select on *.* from foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
show create view some_db.v1;
show create view some_db.v2;
disconnect con1;

connection default;
deny show view on *.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v1;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v2;
disconnect con1;

connection default;
grant select on *.* to foo;
grant show view on *.* to foo;
grant show view on some_db.* to foo;

revoke deny show view on *.* from foo;

show grants for foo;

--connect (con1,localhost,foo,,)
--echo #################################################
--echo # Begin testing show view with database denies. #
--echo #################################################

select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
show create view some_db.v1;
show create view some_db.v2;
disconnect con1;
connection default;

--replace_regex $REGEX_VERSION_ID
select user, host, JSON_EXTRACT(priv, '$.deny') from mysql.global_priv where user = 'foo';

deny select on some_db.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v1;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v2;
disconnect con1;

connection default;
revoke deny select on some_db.* from foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
show create view some_db.v1;
show create view some_db.v2;
disconnect con1;

connection default;

deny show view on some_db.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v1;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v2;
disconnect con1;

connection default;
deny insert on some_db.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v1;
--error ER_TABLEACCESS_DENIED_ERROR
show create view some_db.v2;
disconnect con1;

--echo #
--echo # Deny all available rights, views should not be visible any more.
--echo #
connection default;
deny select on some_db.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views
where table_name='v1' or table_name='v2' order by table_name;
disconnect con1;

connection default;
drop view v1, v2;
drop table t1;
drop user foo;
drop database some_db;

--echo #
--echo # Test showing / not showing view body with SHOW VIEW and SELECT
--echo # privilege denies.
--echo #
connection default;
create user foo;
create database some_db;
create table some_db.t1 (a int, b int);

create view some_db.v1 as (select * from some_db.t1);

grant select, show view on *.* to foo;
grant select, show view on some_db.* to foo;
grant select, show view on some_db.v1 to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views where table_schema = 'some_db';
disconnect con1;

--echo #
--echo #  Table level denies.
--echo #
connection default;
deny show view on some_db.v1 to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views where table_schema = 'some_db';
disconnect con1;

connection default;
revoke deny show view on some_db.v1 from foo;
deny select on some_db.v1 to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views where table_schema = 'some_db';
disconnect con1;

--echo #
--echo #  Database level denies.
--echo #
connection default;
revoke deny select on some_db.v1 from foo;
deny select on some_db.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views where table_schema = 'some_db';
disconnect con1;

connection default;
revoke deny select on some_db.* from foo;
deny show view on some_db.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views where table_schema = 'some_db';
disconnect con1;

--echo #
--echo #  Global level denies.
--echo #
connection default;
revoke deny show view on some_db.* from foo;
deny show view on *.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views where table_schema = 'some_db';
disconnect con1;

connection default;
revoke deny show view on *.* from foo;
deny select on *.* to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views where table_schema = 'some_db';
disconnect con1;

--echo #
--echo #  Column level denies.
--echo #

connection default;
revoke deny select on *.* from foo;

--echo #
--echo # All denies have been revoked from the user, back to regular
--echo # privilege checking.
--echo #

--connect (con1,localhost,foo,,)
select * from information_schema.views where table_schema = 'some_db';
disconnect con1;

connection default;
--echo #
--echo # Here because we have column level denies, a user is not allowed
--echo # to see the view.
--echo #
deny select (a) on some_db.v1 to foo;

--connect (con1,localhost,foo,,)
select * from information_schema.views where table_schema = 'some_db';
disconnect con1;

connection default;
drop user foo;
drop database some_db;

#
# This test checks that denies take part in SHOW commands properly.
#
create user foo;
create database some_db;
create table some_db.t1 (id int);
connect  con1,localhost,foo,,;
show tables from some_db;
ERROR 42000: Access denied for user 'foo'@'%' to database 'some_db'
disconnect con1;
connection default;
grant insert on some_db.t1 to foo;
connect  con1,localhost,foo,,;
show tables from some_db;
Tables_in_some_db
t1
disconnect con1;
connection default;
deny insert on some_db.* to foo;
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
test
show tables from some_db;
ERROR 42000: Access denied for user 'foo'@'%' to database 'some_db'
disconnect con1;
connection default;
#
# Test that dropping a user does not give access to connections that
# previously had elements denied.
#
# We will use two users, foo which will receive denies, bar which will
# not. This will showcase the difference in behaviour.
#
create user bar;
#
# This global grant is cached in sctx->master_access on connection.
#
grant select on *.* to foo;
grant select on *.* to bar;
connect  con1,localhost,foo,,;
show tables from some_db;
Tables_in_some_db
t1
disconnect con1;
connection default;
#
# Here we add a mask for some_db, it should no longer be visible to foo.
#
deny select on some_db.* to foo;
connect  con1,localhost,foo,,;
use some_db;
ERROR 42000: Access denied for user 'foo'@'%' to database 'some_db'
show tables from some_db;
ERROR 42000: Access denied for user 'foo'@'%' to database 'some_db'
#
# bar user has access to the database (no denies present)
#
connect  con2,localhost,bar,,;
use some_db;
show tables from some_db;
Tables_in_some_db
t1
#
# Do not disconnect foo & bar, but drop the users.
#
connection default;
drop user foo;
drop user bar;
#
# Our current running connection, because it featured denies previously
# now doesn't have access.
#
connection con1;
use some_db;
ERROR 42000: Access denied for user 'foo'@'%' to database 'some_db'
show tables from some_db;
ERROR 42000: Access denied for user 'foo'@'%' to database 'some_db'
disconnect con1;
#
# However, bar does not have any denies active. In this case we can keep
# the previous MariaDB behaviour of using the "cache" within
# sctx->master_access to grant access.
#
connection con2;
use some_db;
show tables from some_db;
Tables_in_some_db
t1
disconnect con2;
connection default;
drop database some_db;

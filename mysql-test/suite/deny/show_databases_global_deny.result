create user foo;
create database some_db;
create table some_db.t1 (a int, secret int);
show databases;
Database
information_schema
mtr
mysql
performance_schema
some_db
sys
test
grant select on *.* to foo;
show grants for foo;
Grants for foo@%
GRANT SELECT ON *.* TO `foo`@`%`
#############################
# Test global level denies. #
#############################
#
# Test masking global level denies.
#
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
mtr
mysql
performance_schema
some_db
sys
test
disconnect con1;
connection default;
#
# Mask all rigths.
#
deny select on *.* to foo;
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
test
disconnect con1;
connection default;
#
# Not all rights masked.
#
grant insert on *.* to foo;
#
# some_db should now show up in the list because insert is not masked.
#
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
mtr
mysql
performance_schema
some_db
sys
test
disconnect con1;
connection default;
deny insert on *.* to foo;
#
# some_db should not be present now.
#
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
test
disconnect con1;
connection default;
grant show databases on *.* to foo;
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
mtr
mysql
performance_schema
some_db
sys
test
disconnect con1;
connection default;
deny show databases on *.* to foo;
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
test
disconnect con1;
connection default;
#
# Test masking database level grants with global denies.
#
grant select on some_db.* to foo;
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
test
disconnect con1;
connection default;
grant update on some_db.* to foo;
connect  con1,localhost,foo,,;
#
# Update not masked via global deny, some_db should show up.
#
show databases;
Database
information_schema
some_db
test
disconnect con1;
connection default;
deny update on *.* to foo;
connect  con1,localhost,foo,,;
#
# Now it should show up.
#
show databases;
Database
information_schema
test
disconnect con1;
connection default;
#
# Test masking table level grants with global denies.
#
connection default;
grant insert on some_db.t1 to foo;
show grants for foo;
Grants for foo@%
GRANT SELECT, INSERT, SHOW DATABASES ON *.* TO `foo`@`%`
GRANT SELECT, UPDATE ON `some_db`.* TO `foo`@`%`
GRANT INSERT ON `some_db`.`t1` TO `foo`@`%`
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
test
disconnect con1;
connection default;
grant delete on some_db.t1 to foo;
show grants for foo;
Grants for foo@%
GRANT SELECT, INSERT, SHOW DATABASES ON *.* TO `foo`@`%`
GRANT SELECT, UPDATE ON `some_db`.* TO `foo`@`%`
GRANT INSERT, DELETE ON `some_db`.`t1` TO `foo`@`%`
connect  con1,localhost,foo,,;
#
# some_db should show up because we have delete rights on t1.
#
show databases;
Database
information_schema
some_db
test
disconnect con1;
connection default;
deny delete on *.* to foo;
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
test
disconnect con1;
connection default;
#
# Test masking column level grants with global denies.
#
grant references (a) on some_db.t1 to foo;
show grants for foo;
Grants for foo@%
GRANT SELECT, INSERT, SHOW DATABASES ON *.* TO `foo`@`%`
GRANT SELECT, UPDATE ON `some_db`.* TO `foo`@`%`
GRANT INSERT, DELETE, REFERENCES (a) ON `some_db`.`t1` TO `foo`@`%`
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
some_db
test
disconnect con1;
connection default;
deny references on *.* to foo;
show grants for foo;
Grants for foo@%
GRANT SELECT, INSERT, SHOW DATABASES ON *.* TO `foo`@`%`
GRANT SELECT, UPDATE ON `some_db`.* TO `foo`@`%`
GRANT INSERT, DELETE, REFERENCES (a) ON `some_db`.`t1` TO `foo`@`%`
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
test
disconnect con1;
connection default;
#
# Test masking procedure / function / package level grants with global
# denies.
#
create procedure some_db.proc_1()
begin
select 1;
end|
create function some_db.func_1() returns int
begin
return 3;
end|
set @old_sql_mode=@@sql_mode|
set sql_mode=ORACLE|
create package some_db.util_functions as
function f1(id int) return int;
end|
create package body some_db.util_functions as
function f1(id int) return int as result int;
begin
return 10;
end;
end|
grant execute on procedure some_db.proc_1 to foo;
grant execute on function some_db.func_1 to foo;
grant execute on package some_db.util_functions to foo;
set sql_mode=@old_sql_mode;
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
some_db
test
disconnect con1;
connection default;
deny execute on *.* to foo;
connect  con1,localhost,foo,,;
show databases;
Database
information_schema
test
disconnect con1;
connection default;
drop user foo;
drop database some_db;

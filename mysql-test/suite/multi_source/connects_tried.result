include/master-slave.inc [rpl_server_count=3]
[connection master]
include/rpl_stop_server.inc [server_number=1]
include/rpl_stop_server.inc [server_number=3]
connection slave;
CHANGE MASTER TO master_connect_retry=1;
CHANGE MASTER 'named' TO master_host='127.0.0.1', master_port=SERVER_MYPORT_3, master_user='root', master_ssl_verify_server_cert=0, master_connect_retry=2;
# `Connects_Tried` is 0 before connections begin.
SELECT Connection_name, Connects_Tried FROM information_schema.SLAVE_STATUS;
Connection_name	Connects_Tried
	0
named	0
START ALL SLAVES;
SET @@SESSION.default_master_connection= 'named';
include/wait_for_slave_io_error.inc [errno=2003]
SET @@SESSION.default_master_connection= '';
include/wait_for_slave_io_error.inc [errno=2003]
CREATE TEMPORARY TABLE status_begin AS
SELECT Connection_name, Connects_Tried FROM information_schema.SLAVE_STATUS;
# `Connects_Tried` is 1 immediately after connections begin.
SELECT Connection_name, Connects_Tried
FROM status_begin
WHERE Connects_Tried <= 0;
Connection_name	Connects_Tried
DO SLEEP(3);
# `Connects_Tried` increments (at least) 3 for connection '' and 1 for 'named'.
CREATE TEMPORARY TABLE status_sleep AS
SELECT Connection_name, Connects_Tried FROM information_schema.SLAVE_STATUS;
SELECT *
FROM status_begin JOIN status_sleep USING(Connection_name)
WHERE status_sleep.Connects_Tried - status_begin.Connects_Tried <
IF(LENGTH(Connection_name), 1, 3);
Connection_name	Connects_Tried	Connects_Tried
# Boot replication up and assert final count
include/rpl_start_server.inc [server_number=1]
include/rpl_start_server.inc [server_number=3]
connection slave;
SET @@SESSION.default_master_connection= 'named';
include/wait_for_slave_param.inc [Slave_IO_Running]
SET @@SESSION.default_master_connection= '';
include/wait_for_slave_param.inc [Slave_IO_Running]
CREATE TEMPORARY TABLE status_end AS
SELECT Connection_name, Connects_Tried FROM information_schema.SLAVE_STATUS;
# `Connects_Tried` increments (at least) 1 for each connection.
SELECT *
FROM status_sleep JOIN status_end USING(Connection_name)
WHERE status_end.Connects_Tried <= status_sleep.Connects_Tried;
Connection_name	Connects_Tried	Connects_Tried
DO SLEEP(2);
# `Connects_Tried` does not increment after connection establishes.
CREATE TEMPORARY TABLE status_after AS
SELECT Connection_name, Connects_Tried FROM information_schema.SLAVE_STATUS;
SELECT *
FROM status_end JOIN status_after USING(Connection_name)
WHERE status_after.Connects_Tried <> status_end.Connects_Tried;
Connection_name	Connects_Tried	Connects_Tried
# Conventional views
SELECT * FROM status_end;
Connection_name	Connects_Tried
	connects_tried
named	connects_tried_named
SELECT * FROM status_end;
Connection_name	Connects_Tried
	connects_tried
named	connects_tried_named
STOP ALL SLAVES;
SET @@SESSION.default_master_connection= 'named';
include/wait_for_slave_to_stop.inc
SET @@SESSION.default_master_connection= '';
include/wait_for_slave_to_stop.inc
# STOP SLAVE does not reset `Connects_Tried`.
CREATE TEMPORARY TABLE status_stop AS
SELECT Connection_name, Connects_Tried FROM information_schema.SLAVE_STATUS;
SELECT *
FROM status_after JOIN status_stop USING(Connection_name)
WHERE status_stop.Connects_Tried <> status_after.Connects_Tried;
Connection_name	Connects_Tried	Connects_Tried
START SLAVE;
include/wait_for_slave_to_start.inc
# START SLAVE recounts `Connects_Tried` from 1 (for the restarted connection only).
CREATE TEMPORARY TABLE status_restart AS
SELECT Connection_name, Connects_Tried FROM information_schema.SLAVE_STATUS;
SELECT *
FROM status_restart JOIN status_stop USING(Connection_name)
WHERE status_restart.Connects_Tried NOT BETWEEN IF(
LENGTH(Connection_name), status_stop.Connects_Tried, 1
) AND status_stop.Connects_Tried;
Connection_name	Connects_Tried	Connects_Tried
STOP SLAVE;
include/wait_for_slave_to_stop.inc
RESET SLAVE;
# RESET SLAVE resets `Connects_Tried` to 0 (for the resetted connection only).
CREATE TEMPORARY TABLE status_reset AS
SELECT Connection_name, Connects_Tried FROM information_schema.SLAVE_STATUS;
SELECT *
FROM status_reset JOIN status_restart USING(Connection_name)
WHERE status_reset.Connects_Tried <>
IF(LENGTH(Connection_name), status_restart.Connects_Tried, 0);
Connection_name	Connects_Tried	Connects_Tried
# Cleanup
RESET SLAVE 'named' ALL;
include/rpl_end.inc

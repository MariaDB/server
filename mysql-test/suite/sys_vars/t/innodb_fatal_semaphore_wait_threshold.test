--source include/have_debug.inc
--source include/have_debug_sync.inc

# Can't test this with embedded server
--source include/not_embedded.inc

# Don't test this with valgrind
--source include/not_valgrind.inc

# Only test for innodb
--source include/have_innodb.inc

connect (con1,localhost,root,,);
CREATE TABLE t1 (a INT PRIMARY KEY) ENGINE=InnoDB;

SET DEBUG_SYNC='create_table SIGNAL stuck WAIT_FOR ever';
send CREATE TABLE t2 (a INT PRIMARY KEY) ENGINE=InnoDB;

connect (con2,localhost,root,,);
SET DEBUG_SYNC='now WAIT_FOR stuck';
FLUSH TABLES;

# The following query will be blocked on the dict_sys.mutex held by con1
send SELECT * FROM t1;

connection default;

--disable_result_log
--disable_query_log

# Since this test generates lot of errors in log, suppress checking errors
call mtr.add_suppression(".*");

# The crash is expected
exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect;

--echo # Waiting for mariadbd to crash

# It may take 20 seconds to detect the long semaphore and mysqld to abort.
# This test will be treated as pass as long as mysqld crash/restart is detected
# in 80 seconds.
let $counter= 80;
let $mysql_errno= 0;
while (!$mysql_errno)
{
  --error 0,ER_SERVER_SHUTDOWN,ER_CONNECTION_KILLED,2002,2006,2013,5014,2026
  show status;

  dec $counter;
  if (!$counter)
  {
    # This will fail this test.
    --die Server failed to disappear
  }
  --sleep 1
}

--echo # Crash was detected

enable_reconnect;
connection default;

--exec echo "restart:--log-error=$error_log" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect

# Call script that will poll the server waiting for it to be back online again
source include/wait_until_connected_again.inc;

# We only have to do drop t1, as t2 as been automatically deleted by ddl recovery
DROP TABLE t1;

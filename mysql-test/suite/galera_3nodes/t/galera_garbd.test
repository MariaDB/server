#
# A very basic test for the galera arbitrator. We shut down node #3 and use its port allocation to start garbd.
# As MTR does not allow multiple servers to be down at the same time, we are limited as to what we can test.
#

--source include/galera_cluster.inc
--source include/have_innodb.inc
--source include/big_test.inc

# Save galera ports
--connection node_1
--source suite/galera/include/galera_base_port.inc
--let $NODE_GALERAPORT_1 = $_NODE_GALERAPORT

--connection node_2
--source suite/galera/include/galera_base_port.inc
--let $NODE_GALERAPORT_2 = $_NODE_GALERAPORT

--connect node_3, 127.0.0.1, root, , test, $NODE_MYPORT_3
--source suite/galera/include/galera_base_port.inc
--let $NODE_GALERAPORT_3 = $_NODE_GALERAPORT

--connection node_3
--echo Killing node #3 to free ports for garbd ...
--source include/shutdown_mysqld.inc

--connection node_1
--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

--echo Starting garbd ...
--perl
use strict;
use File::Basename;
my $provider_dirname = dirname($ENV{WSREP_PROVIDER});
# Array of possible garbd executable paths to be checked
# base is $provider_dirname
my @garbd_executable_search = (
  # WSREP_PROVIDER is set in galera repository
  ${provider_dirname}."/garb/garbd",
  # MariaDB (PR #1147)
  ${provider_dirname}."/../../bin/garb/garbd"
);
my $garbd_executable = '';
foreach my $garbd (@garbd_executable_search) {
  if (-f $garbd) {
    $garbd_executable= $garbd;
  }
}
if ($garbd_executable eq '') {
  die("Didn't locate garbd\n"); 
}
die unless open(FILE, ">$ENV{MYSQLTEST_VARDIR}/tmp/garbd.inc");
print FILE "--exec $garbd_executable --address \"gcomm://127.0.0.1:\$NODE_GALERAPORT_1\" --group my_wsrep_cluster --options 'base_port=\$NODE_GALERAPORT_3' > \$MYSQL_TMP_DIR/garbd.log 2>&1 &\n";
close(FILE);
EOF
--source $MYSQLTEST_VARDIR/tmp/garbd.inc
--remove_file $MYSQLTEST_VARDIR/tmp/garbd.inc

--sleep 5

--let $wait_condition = SELECT VARIABLE_VALUE = 3 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

CREATE TABLE t1 (f1 INTEGER);
INSERT INTO t1 VALUES (1);

--connection node_2
SELECT COUNT(*) = 1 FROM t1;

--echo Killing garbd ...
# FreeBSD's /bin/pkill only supports short versions of the options:
# -o Select only the oldest (least recently started)
# -f Match against full argument lists
--exec pkill -o -f garbd.*$NODE_GALERAPORT_3

--sleep 5

--connection node_1
--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

INSERT INTO t1 VALUES (2);

--connection node_2
SELECT COUNT(*) = 2 FROM t1;

DROP TABLE t1;

--echo Restarting node #3 to satisfy MTR's end-of-test checks
--connection node_3
--source include/start_mysqld.inc


# Workaround for galera#101

--connection node_1
CALL mtr.add_suppression("WSREP: Protocol violation\. JOIN message sender 1\.0 \(.*\) is not in state transfer \(SYNCED\)");

--connection node_2
CALL mtr.add_suppression("WSREP: Protocol violation\. JOIN message sender 1\.0 \(.*\) is not in state transfer \(SYNCED\)");

--connection node_3
CALL mtr.add_suppression("WSREP: Protocol violation\. JOIN message sender 1\.0 \(.*\) is not in state transfer \(SYNCED\)");

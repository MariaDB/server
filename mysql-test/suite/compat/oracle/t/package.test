
SET sql_mode=ORACLE;


--echo #
--echo # Creating a body of a non-existing package
--echo #
DELIMITER $$;
--error ER_BAD_DB_ERROR
CREATE PACKAGE BODY test2 AS
  FUNCTION f1 RETURN INT AS BEGIN RETURN 10; END;
END;
$$
DELIMITER ;$$

--echo #
--echo # Dropping a non-existing package
--echo #
--error ER_UNKNOWN_ERROR
DROP PACKAGE test2;
DROP PACKAGE IF EXISTS test2;
--error ER_UNKNOWN_ERROR
DROP PACKAGE BODY test2;


--echo #
--echo # PACKAGE and PS
--echo #

--error ER_UNSUPPORTED_PS
PREPARE stmt FROM 'CREATE PACKAGE test2 AS FUNCTION f1 RETURN INT; END test2';
--error ER_UNSUPPORTED_PS
PREPARE stmt FROM 'CREATE PACKAGE BODY test2 AS'
                  '  FUNCTION f1 RETURN INT AS BEGIN RETURN 10; END;'
                  'END test2';


--echo #
--echo # Package and READ ONLY transactions
--echo #

SET SESSION TRANSACTION READ ONLY;

DELIMITER $$;
--error ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION
CREATE PACKAGE test2 AS
  FUNCTION f1 RETURN INT;
  PROCEDURE p1;
END
$$
DELIMITER ;$$

DELIMITER $$;
--error ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION
CREATE PACKAGE BODY test2 AS
  FUNCTION f1 RETURN INT AS BEGIN RETURN 10; END;
  FUNCTION f2 RETURN INT AS BEGIN RETURN f1(); END;
  PROCEDURE p1 AS
  BEGIN
    SELECT f2();
  END;
END;
$$
DELIMITER ;$$

--error ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION
DROP PACKAGE test2;
--error ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION
DROP PACKAGE BODY test2;

SET SESSION TRANSACTION READ WRITE;


--echo #
--echo # DROP PACKAGE and DROP PACKAGE BODY works only on empty databases
--echo #

CREATE DATABASE test2;
CREATE TABLE test2.t1 (a INT);
--error ER_UNKNOWN_ERROR
DROP PACKAGE BODY test2;
--error ER_UNKNOWN_ERROR
DROP PACKAGE test2;
DROP DATABASE test2;

CREATE DATABASE test2;
CREATE TABLE test2.t1 (a INT);
--error ER_UNKNOWN_ERROR
DROP PACKAGE BODY test2;
--error ER_UNKNOWN_ERROR
DROP PACKAGE test2;
DROP TABLE test2.t1;
DROP PACKAGE BODY test2;
DROP PACKAGE test2;

CREATE DATABASE test2;
CREATE VIEW test2.v1 AS SELECT 1 AS a;
--error ER_UNKNOWN_ERROR
DROP PACKAGE BODY test2;
--error ER_UNKNOWN_ERROR
DROP PACKAGE test2;
DROP DATABASE test2;

CREATE DATABASE test2;
CREATE VIEW test2.v1 AS SELECT 1 AS a;
--error ER_UNKNOWN_ERROR
DROP PACKAGE BODY test2;
--error ER_UNKNOWN_ERROR
DROP PACKAGE test2;
DROP VIEW test2.v1;
DROP PACKAGE BODY test2;
DROP PACKAGE test2;


--echo #
--echo # Syntax error inside a CREATE PACKAGE, inside a routine definition
--echo #

DELIMITER $$;
--error ER_PARSE_ERROR
CREATE PACKAGE test2 AS
  FUNCTION f1 RETURN INT;
  FUNCTION f2 RETURN INT;
  FUNCTION f3;
  FUNCTION f4 RETURN INT;
END
$$
DELIMITER ;$$


--echo #
--echo # Syntax error inside a CREATE PACKAGE, outside of a routine definition
--echo #

# The definition "FUNCTION f3 RETURN INT AS BEGIN RETURN 10; END;"
# is valid in CREATE PACKAGE BODY, but not in CREATE PACKAGE.
# Syntax error happens after parsing "FUNCTION f3 RETURN INT".

DELIMITER $$;
--error ER_PARSE_ERROR
CREATE PACKAGE test2 AS
  FUNCTION f1 RETURN INT;
  FUNCTION f2 RETURN INT;
  FUNCTION f3 RETURN INT AS BEGIN RETURN 10; END;
  FUNCTION f4 RETURN INT;
END
$$
DELIMITER ;$$


--echo #
--echo # Syntax error inside a CREATE PACKAGE BODY, inside a routine definition
--echo #

DELIMITER $$;
--error ER_PARSE_ERROR
CREATE PACKAGE BODY test2 AS
  FUNCTION f1 RETURN INT AS BEGIN RETURN 10; END;
  FUNCTION f2 RETURN INT; -- Missing "AS BEGIN..END;"
END
$$
DELIMITER ;$$


--echo #
--echo # Syntax error inside a CREATE PACKAGE BODY, outside a routine definition
--echo #

DELIMITER $$;
--error ER_PARSE_ERROR
CREATE PACKAGE BODY test2 AS
  FUNCTION f1 RETURN INT AS BEGIN RETURN 10; END;
  SOME SYNTAX ERROR;
  FUNCTION f2 RETURN INT AS BEGIN RETURN 10; END;
END
$$
DELIMITER ;$$


--echo #
--echo # Creating a new package
--echo #

DELIMITER $$;
CREATE PACKAGE test2 AS
  FUNCTION f1 RETURN INT DETERMINISTIC;
  FUNCTION f2 RETURN INT;
  FUNCTION concat RETURN INT;
  PROCEDURE p1;
END
$$
DELIMITER ;$$


DELIMITER $$;
CREATE PACKAGE IF NOT EXISTS test2 AS
  FUNCTION f1 RETURN INT;
END test2
$$
DELIMITER ;$$


DELIMITER $$;
CREATE PACKAGE BODY test2 AS
  FUNCTION f1 RETURN INT AS BEGIN RETURN 10; END;
  FUNCTION f2 RETURN INT AS BEGIN RETURN f1(); END;
  PROCEDURE p1 AS
  BEGIN
    SELECT f2();
  END;
END;
$$
DELIMITER ;$$
SELECT test2.f1();
SELECT test2.f2();
CALL test2.p1();

DROP PACKAGE BODY test2;
--error ER_SP_DOES_NOT_EXIST
SELECT test2.f1();
--error ER_SP_DOES_NOT_EXIST
SELECT test2.f2();
--error ER_SP_DOES_NOT_EXIST
CALL test2.p1();

--error ER_PARSE_ERROR
DROP PACKAGE BODY IF EXISTS test2;

--echo # "DROP PACKAGE BODY" now does sp_drop_db_routines.
--echo # So dropping a body which was already dropped before returns no errors.

DROP PACKAGE BODY test2;


DROP PACKAGE test2;

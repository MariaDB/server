create table t1(
x int unsigned,
y int unsigned,
sys_trx_start SYS_DATATYPE as row start invisible,
sys_trx_end SYS_DATATYPE as row end invisible,
period for system_time (sys_trx_start, sys_trx_end))
with system versioning;
insert into t1(x, y) values (1, 1000), (2, 2000), (3, 3000), (4, 4000), (5, 5000), (6, 6000), (7, 7000), (8, 8000), (9, 9000);
select x, y from t1 order by x, y;
x	y
1	1000
2	2000
3	3000
4	4000
5	5000
6	6000
7	7000
8	8000
9	9000
update t1 set y = y + 1 where x > 7;
select x, y from t1 order by x, y;
x	y
1	1000
2	2000
3	3000
4	4000
5	5000
6	6000
7	7000
8	8001
9	9001
select x, y from t1 for system_time all order by sys_trx_end, x, y;
x	y
8	8000
9	9000
1	1000
2	2000
3	3000
4	4000
5	5000
6	6000
7	7000
8	8001
9	9001
drop table t1;
create table t1 (
id bigint primary key,
x int,
y int without system versioning,
sys_trx_start SYS_DATATYPE as row start invisible,
sys_trx_end SYS_DATATYPE as row end invisible,
period for system_time (sys_trx_start, sys_trx_end))
with system versioning;
insert into t1 values(1, 1, 1);
set @ins_t= now(6);
select sys_trx_start into @tmp1 from t1;
update t1 set x= 11, y= 11 where id = 1;
select @tmp1 < sys_trx_start as A1, x, y from t1;
A1	x	y
1	11	11
select sys_trx_start into @tmp1 from t1;
update t1 set y= 1 where id = 1;
select @tmp1 = sys_trx_start as A2, x from t1;
A2	x
1	11
drop table t1;
create table t1 (
x int,
y int,
sys_trx_start SYS_DATATYPE as row start invisible,
sys_trx_end SYS_DATATYPE as row end invisible,
period for system_time (sys_trx_start, sys_trx_end)
) with system versioning;
insert into t1 (x, y) values (1, 1), (2, 1), (3, 1), (4, 1), (5, 1);
start transaction;
update t1 set y= y + 1 where x = 3;
update t1 set y= y + 1 where x = 2;
update t1 set y= y + 1 where x = 3;
update t1 set y= y + 1 where x > 3;
update t1 set y= y + 1 where x > 4;
commit;
select x, y, sys_trx_end = MAXVAL as current from t1 for system_time all order by sys_trx_end, x, y;
x	y	current
3	1	0
2	1	0
3	2	0
4	1	0
5	1	0
5	2	0
1	1	1
2	2	1
3	3	1
4	2	1
5	3	1
drop table t1;
create table t1 (
id int primary key auto_increment,
x int,
sys_trx_start SYS_DATATYPE as row start invisible,
sys_trx_end SYS_DATATYPE as row end invisible,
period for system_time (sys_trx_start, sys_trx_end))
with system versioning;
set @t0= now(6);
insert into t1 (x) values (1);
set @t1= now(6);
update t1 set x= 2 where id = 1;
set @t2= now(6);
update t1 set x= 3 where id = 1;
select x from t1 for system_time as of timestamp @t0;
x
select x from t1 for system_time as of timestamp @t1;
x
1
select x from t1 for system_time as of timestamp @t2;
x
2
select x from t1 for system_time as of timestamp now(6);
x
3
drop table t1;
create table t1(
x int unsigned,
sys_trx_end SYS_DATATYPE as row end invisible,
sys_trx_start SYS_DATATYPE as row start invisible,
y int unsigned,
period for system_time (sys_trx_start, sys_trx_end),
primary key(x, y))
with system versioning;
insert into t1(x, y) values (1, 1000), (3, 3000), (4, 4000), (5, 5000);
insert into t1(x, y) values(3, 3000) on duplicate key update y = y+1;
insert into t1(x, y) values(4, 4444) on duplicate key update y = y+1;
select x, y from t1 for system_time all order by sys_trx_end, x, y;
x	y
3	3000
1	1000
3	3001
4	4000
4	4444
5	5000
select x, y from t1 order by x, y;
x	y
1	1000
3	3001
4	4000
4	4444
5	5000
drop table t1;
create table t1 (
x int unsigned,
y int unsigned,
sys_trx_start SYS_DATATYPE as row start invisible,
sys_trx_end SYS_DATATYPE as row end invisible,
period for system_time (sys_trx_start, sys_trx_end))
with system versioning;
create table t2 like t1;
insert into t1(x, y) values (1, 1000), (2, 2000), (3, 3000), (4, 4000), (5, 5000), (6, 6000), (7, 7000), (8, 8000), (9, 9000);
insert into t2(x, y) values (1, 1010), (2, 2010), (3, 3010), (4, 4010), (5, 5010), (6, 6010), (7, 7010), (8, 8010), (9, 9010);
update t1, t2 set t1.y = t1.x + t1.y, t2.y = t2.x + t2.y where t1.x > 7 and t2.x < 7;
select x, y from t1 for system_time all order by sys_trx_end, x, y;
x	y
8	8000
9	9000
1	1000
2	2000
3	3000
4	4000
5	5000
6	6000
7	7000
8	8008
9	9009
select x, y from t1 order by x, y;
x	y
1	1000
2	2000
3	3000
4	4000
5	5000
6	6000
7	7000
8	8008
9	9009
select x, y from t2 for system_time all order by sys_trx_end, x, y;
x	y
1	1010
2	2010
3	3010
4	4010
5	5010
6	6010
1	1011
2	2012
3	3013
4	4014
5	5015
6	6016
7	7010
8	8010
9	9010
select x, y from t2 order by x, y;
x	y
1	1011
2	2012
3	3013
4	4014
5	5015
6	6016
7	7010
8	8010
9	9010
drop table t1;
drop table t2;
create table t1 (
id bigint primary key without system versioning,
name varchar(128),
salary bigint without system versioning,
sys_trx_start SYS_DATATYPE as row start invisible,
sys_trx_end SYS_DATATYPE as row end invisible,
period for system_time (sys_trx_start, sys_trx_end))
with system versioning;
create table t2 like t1;
insert into t1 values (1, "Jeremy", 3000);
insert into t2 values (1, "Jeremy", 4000);
select sys_trx_start into @tmp1 from t1;
select sys_trx_start into @tmp2 from t2;
update t1, t2 set t1.name= "Jerry", t2.name= "Jerry" where t1.id = t2.id and t1.name = "Jeremy";
select @tmp1 < sys_trx_start as A1, name from t1;
A1	name
1	Jerry
select @tmp2 < sys_trx_start as A2, name from t2;
A2	name
1	Jerry
select sys_trx_start into @tmp1 from t1;
select sys_trx_start into @tmp2 from t2;
update t1, t2 set t1.salary= 2500, t2.salary= 2500 where t1.id = t2.id and t1.name = "Jerry";
select @tmp1 = sys_trx_start as B1, salary from t1;
B1	salary
1	2500
select @tmp2 = sys_trx_start as B2, salary from t2;
B2	salary
1	2500
drop table t1;
drop table t2;
# Ensure FTS retains correct history
create table t1 (
x int, y text, fulltext (y),
row_start SYS_DATATYPE as row start invisible,
row_end SYS_DATATYPE as row end invisible,
period for system_time (row_start, row_end))
with system versioning engine innodb;
insert into t1 values (1, repeat('LONG', 2048));
update t1 set x= x + 1;
select x, left(y, 4), length(y), check_row(row_start, row_end) from t1 for system_time all order by x, y;
x	left(y, 4)	length(y)	check_row(row_start, row_end)
1	LONG	8192	HISTORICAL ROW
2	LONG	8192	CURRENT ROW
update t1 set y= 'SHORT';
select x, left(y, 4), length(y), check_row(row_start, row_end) from t1 for system_time all order by x, y;
x	left(y, 4)	length(y)	check_row(row_start, row_end)
1	LONG	8192	HISTORICAL ROW
2	LONG	8192	HISTORICAL ROW
2	SHOR	5	CURRENT ROW
drop tables t1;
### Issue tempesta-tech/mariadb#365, bug 7 (duplicate of historical row)
create or replace table t1 (a int primary key, b int)
with system versioning engine myisam;
insert into t1 (a) values (1);
replace t1 values (1,2),(1,3),(2,4);
#
# MDEV-14829 Assertion `0' failed in Protocol::end_statement upon concurrent UPDATE
#
set @old_lock_wait_timeout= @@innodb_lock_wait_timeout;
set @@innodb_lock_wait_timeout= 1073741824;
create or replace table t1 (pk int, a char(3), b char(3), primary key(pk))
engine=innodb with system versioning;
insert into t1 (pk) values (1);
connect  con1,localhost,root,,test;
start transaction;
select * from t1 for update;
pk	a	b
1	NULL	NULL
connection default;
update t1 set b = 'foo';
connection con1;
update t1 set a = 'bar';
ERROR 40001: Deadlock found when trying to get lock; try restarting transaction
disconnect con1;
connection default;
drop table t1;
set @@innodb_lock_wait_timeout= @old_lock_wait_timeout;
#
# MDEV-19406 Assertion on updating view of join with versioned table
#
create or replace table t1 (pk int primary key, a date, b int, index(b)) engine=innodb with system versioning;
create or replace table t2 (c int);
create or replace view v as select * from t1 join t2;
insert into t1 (pk) values (1);
update t1 set a= '2012-12-12';
update v set a= '2000-01-01' order by b limit 1;
drop view v;
drop table t1, t2;
#
# MDEV-20441 ER_CRASHED_ON_USAGE upon update on versioned Aria table
#
create or replace table t1 (a varchar(8))
engine=aria row_format=fixed
with system versioning;
insert into t1 (a) values ('foo');
update t1 set a = 'bar';
drop table t1;
#
# MDEV-21147 Assertion `marked_for_read()' upon UPDATE on versioned table via view
#
create or replace table t1 (
pk int, a char(8), b char(8),
primary key (pk)
) with system versioning;
create or replace view v1 as select * from t1;
insert into t1 values  (1, null, 'd') ,  (2, null, 'i') ;
update v1 set a= null where b = '';
create or replace table t1 (id int, k int, primary key (id)) engine=innodb with system versioning;
insert into t1 values (1,1),(2,2);
create or replace view v1 as select * from t1;
update v1 set id= 2 where k = 0;
create or replace table t1 (a int) with system versioning;
create or replace view v1 as select * from t1;
create or replace procedure sp() update v1 set xx = 1;
call sp;
ERROR 42S22: Unknown column 'xx' in 'field list'
call sp;
ERROR 42S22: Unknown column 'xx' in 'field list'
drop procedure sp;
drop view v1;
drop table t1;
#
# MDEV-21342 Assertion in set_ok_status() upon spatial field error on system-versioned table
#
create or replace table t1 (f point, key(f)) with system versioning engine=myisam;
update t1 set f = null where f = 'foo';
ERROR 22003: Cannot get geometry object from data you send to the GEOMETRY field
drop table t1;
#
# MDEV-22061 InnoDB: Assertion of missing row in sec index row_start upon REPLACE on a system-versioned table
#
create or replace table t1 (
a int,
b int,
row_start bigint(20) unsigned generated always as row start,
row_end bigint(20) unsigned generated always as row end,
unique key (b,row_end),
key (row_start),
period for system_time (row_start,row_end)
) engine=innodb with system versioning;
insert into t1 (a, b) values (1, 2);
replace into t1 (a, b) values (3, 2);
replace into t1 (a, b) values (4, 2);
drop table t1;
#
# MDEV-20661 Virtual fields are not recalculated on system fields value assignment
#
create table t1 (
a int,
row_start SYS_DATATYPE as row start invisible,
row_end SYS_DATATYPE as row end invisible,
period for system_time (row_start, row_end),
v1 bigint unsigned as (a ^ row_start) unique,
v2 bigint unsigned as (a ^ row_end) unique
) engine=innodb with system versioning;
insert into t1 (a) values (1), (2);
update ignore t1 set a= 3;
delete history from t1;
drop table t1;
#
# MDEV-23446 UPDATE does not insert history row if the row is not changed
#
create table t1 (
a int,
row_start SYS_DATATYPE as row start invisible,
row_end SYS_DATATYPE as row end invisible,
period for system_time (row_start, row_end)) with system versioning;
insert into t1 values (1);
update t1 set a= 1;
select *, check_row(row_start, row_end) from t1 for system_time all order by row_end;
a	check_row(row_start, row_end)
1	HISTORICAL ROW
1	CURRENT ROW
# multi-update
create or replace table t2 like t1;
create or replace table t3 like t1;
insert into t2 values (1);
insert into t3 values (1);
update t2, t3 set t2.a= 1, t3.a= 1 where t2.a = t3.a;
select *, check_row(row_start, row_end) from t2 for system_time all order by row_end;
a	check_row(row_start, row_end)
1	HISTORICAL ROW
1	CURRENT ROW
select *, check_row(row_start, row_end) from t2 for system_time all order by row_end;
a	check_row(row_start, row_end)
1	HISTORICAL ROW
1	CURRENT ROW
drop tables t1, t2, t3;
#
# MDEV-24522 Assertion `inited==NONE' fails upon UPDATE on versioned table with unique blob

create table t1 (a int, b int, c text, unique(c), key (b)) engine=myisam with system versioning;
insert into t1 values (1, 1, 'foo'), (2, 11, 'bar');
update t1 set a = 3 where b <= 9;
update t1 set a = 3 where b <= 10;
drop table t1;
create table t1 (a int, b int, c text, unique(c), key (b)) engine=myisam with system versioning;
create table t2 (a int, b int, c text, unique(c), key (b)) engine=myisam with system versioning;
insert into t1 values (1, 1, 'foo'), (2, 11, 'bar');
insert into t2 values (1, 1, 'foo'), (2, 11, 'bar');
update t1 set a = 3 where b <= 9;
update t2 set a = 3 where b <= 9;
update t1, t2 set t1.a = 3, t2.a = 3 where t1.b <= 10 and t2.b <= 10 and t1.b = t2.b;
drop tables t1, t2;

# Exercise the code path for INFORMATION_SCHEMA.INNODB_BUFFER_POOL_STATS
# and INFORMATION_SCHEMA.INNODB_BUFFER_PAGE

# This test assumes that buffer pool is idle
# with key rotation threads buffer pages gets evicted this
# testcase gets flaky
-- source include/not_encrypted.inc

-- source include/have_innodb.inc

--replace_regex /([0-9]*\.)?[0-9]+/#/
SELECT * FROM INFORMATION_SCHEMA.INNODB_BUFFER_POOL_STATS;

# Create a table and check its page info behave correctly in the pool
CREATE TABLE infoschema_buffer_test (col1 INT) ENGINE = INNODB;

INSERT INTO infoschema_buffer_test VALUES(9);

# We should be able to see this table in the buffer pool if we check
# right away
--sorted_result
--replace_column 2 # 3 # 7 FIX 8 AHI 9 LSN 10 LSN 11 TIME 18 IO_FIX 19 OLD 20 #
SELECT * FROM INFORMATION_SCHEMA.INNODB_BUFFER_PAGE
WHERE TABLE_NAME LIKE '%infoschema_buffer_test%' AND PAGE_TYPE='index';

# The NUMBER_RECORDS and DATA_SIZE should check with each insertion
INSERT INTO infoschema_buffer_test VALUES(19);

CREATE INDEX idx ON infoschema_buffer_test(col1);

--sorted_result
--replace_column 2 # 3 # 7 FIX 8 AHI 9 LSN 10 LSN 11 TIME 18 IO_FIX 19 OLD 20 #
SELECT * FROM INFORMATION_SCHEMA.INNODB_BUFFER_PAGE
WHERE TABLE_NAME LIKE '%infoschema_buffer_test%' AND PAGE_TYPE='index';

# Check the buffer after dropping the table
DROP TABLE infoschema_buffer_test;

SELECT * FROM INFORMATION_SCHEMA.INNODB_BUFFER_PAGE
WHERE TABLE_NAME LIKE '%infoschema_buffer_test%';

CREATE TABLE infoschema_parent (id INT NOT NULL, PRIMARY KEY (id))
ENGINE=INNODB;

CREATE TABLE infoschema_child (id INT, parent_id INT, INDEX par_ind (parent_id),
			       FOREIGN KEY (parent_id)
			       REFERENCES infoschema_parent(id)
			       ON DELETE CASCADE)
ENGINE=INNODB;

--sorted_result
--replace_column 2 # 3 # 7 FIX 8 AHI 9 LSN 10 LSN 11 TIME 18 IO_FIX 19 OLD 20 #
SELECT * FROM INFORMATION_SCHEMA.INNODB_BUFFER_PAGE
WHERE TABLE_NAME LIKE '%infoschema_child%';

DROP TABLE infoschema_child;
DROP TABLE infoschema_parent;

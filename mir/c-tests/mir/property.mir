# should work only for bb generator
M0: module
# fixnum has the least bit equal 1
pr_proto: proto u64:p, ...
   import printf
op1: i64 1
op2: i64 3
main: func i64
  local i64:v1, i64:v2, i64:v3
  mov v1,op1
  mov v2,op2
  mov v1,i64:(v1)
  mov v2,i64:(v2)
  or v2,v1,v2
  and v3,v2,1
  bf float,v3
# both are integer
  add v2,v1,v2
  sub v2,v2,1
  call pr_proto,printf, "fixnum %ld\n", v2
  prset v2,1
  jmp l2
float:
  call pr_proto,printf, "non-fixnum\n"
  prset v2,2
l2:
  prbeq fixnum,v2,1
  call pr_proto,printf, "the message should be not here\n"
  ret 1
fixnum:
  call pr_proto,printf, "ok\n"
  ret 0
  endfunc
endmodule

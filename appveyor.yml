version: build-{build}~branch-{branch}

skip_branch_with_pr: true

before_build:
  - ps: |
      $pullRequestNr = $env:APPVEYOR_PULL_REQUEST_NUMBER
      $branch = $env:APPVEYOR_REPO_BRANCH
      $commit = $env:APPVEYOR_REPO_COMMIT
      $repo = $env:APPVEYOR_REPO_NAME
      $prRepo = $env:APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME

      $isPrFromFork = $pullRequestNr -and ($repo -ne $prRepo)
      Write-Host "pullRequestNr=$pullRequestNr, isPRFromFork=$isPrFromFork, branch=$branch, commit=$commit, repo=$repo"

      if ($pullRequestNr -and (-not $isPrFromFork)) {
        $branch = $env:APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH
        $commit = $env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT
        Write-Host "real branch name of this pull request is $branch, real commit $commit"
      }

      if ($isPrFromFork) {
        Write-Host "pull request from a fork detected,  always build."
      } elseif ($branch -eq "main" -or $branch -match '^\d+\.\d+$') {
        Write-Host "main branch detected, always build."
      } else {
        Write-Host "Checking if this is the latest commit on branch '$branch'..."
        $remoteHead = git ls-remote https://github.com/$repo.git refs/heads/$branch |
                      ForEach-Object { ($_ -split "`t")[0] }
        Write-Host "latest commit=$remoteHead"
        if ($remoteHead -ne $commit) {
          Write-Host "Not the latest commit on branch '$branch' â€” skipping build."
          Exit-AppveyorBuild
        }
      }

clone_depth: 10

build_script:
  # dump some system info
  - echo  processor='%PROCESSOR_IDENTIFIER%' , processor count= %NUMBER_OF_PROCESSORS%
  - cd %APPVEYOR_BUILD_FOLDER%
  # Disable unneeded submodules for the faster build
  - git config submodule.storage/columnstore/columnstore.update none
  - git config submodule.storage/maria/libmarias3.update none
  - git config submodule.storage/rocksdb/rocksdb.update none
  - git config submodule.wsrep-lib.update none
  # Build minimal configuration
  - mkdir _build
  - cd _build
  - set BUILD_TYPE=MinSizeRel
  - set GENERATOR=-GNinja
  - call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
  - cmake -E time cmake %GENERATOR% .. -DCMAKE_BUILD_TYPE=%BUILD_TYPE% -DMYSQL_MAINTAINER_MODE=ERR -DFAST_BUILD=1 -DBISON_EXECUTABLE=C:\cygwin64\bin\bison.exe -DPLUGIN_PERFSCHEMA=NO -DPLUGIN_FEEDBACK=NO
  - set /A jobs=2*%NUMBER_OF_PROCESSORS%
  - cmake -E time cmake --build . -j %jobs% --config %BUILD_TYPE% --target minbuild

test_script:
  - set PATH=C:\Strawberry\perl\bin;%PATH%;C:\Program Files (x86)\Windows Kits\10\Debuggers\x64
  - cd %APPVEYOR_BUILD_FOLDER%\_build\mysql-test
  - set /A parallel=4*%NUMBER_OF_PROCESSORS%
  - perl mysql-test-run.pl --force --max-test-fail=10 --retry=2 --parallel=%parallel% --testcase-timeout=4 --suite=main  --skip-test-list=%APPVEYOR_BUILD_FOLDER%\win\appveyor_skip_tests.txt --mysqld=--loose-innodb-flush-log-at-trx-commit=2

skip_commits:
  files:
    - debian/
    - '**/*.sh'

branches:
  only:
    - /bb-/
    - /\d+\.\d+$/

image: Visual Studio 2022

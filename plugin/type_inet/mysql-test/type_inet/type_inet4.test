--echo #
--echo # Start of 10.10 tests
--echo #

--echo #
--echo # MDEV-23287 The INET4 data type
--echo #

--echo #
--echo # Basic CREATE functionality, defaults, metadata
--echo #

--error ER_WRONG_FIELD_SPEC
CREATE TABLE t1 (a INET4 AUTO_INCREMENT);

CREATE TABLE t1 (a INET4);
SHOW CREATE TABLE t1;
DESCRIBE t1;
--vertical_results
--replace_column 19 #
SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema='test' AND table_name='t1';
--horizontal_results
DROP TABLE t1;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('0.0.0.1');
--enable_metadata
SELECT * FROM t1;
SELECT CAST('0.0.0.1' AS INET4) AS a;
--disable_metadata
DROP TABLE t1;


CREATE TABLE t1 (
  c1 INET4 DEFAULT 0x00000000,
  c2 INET4 DEFAULT 0xFFFFFFFF,
  c3 INET4 DEFAULT '0.0.0.255',
  c4 INET4 DEFAULT '255.0.0.255',
  c5 INET4 DEFAULT CAST(X'FFFF00FF' AS INET4)
);
SHOW CREATE TABLE t1;
DESCRIBE t1;
--vertical_results
--replace_column 19 #
SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema='test' AND table_name='t1';
--horizontal_results
DROP TABLE t1;

--error ER_INVALID_DEFAULT
CREATE TABLE t1 (c1 INET4 DEFAULT 0x00);
--error ER_INVALID_DEFAULT
CREATE TABLE t1 (c1 INET4 DEFAULT '');


CREATE TABLE t1 (a INET4);
--error ER_TRUNCATED_WRONG_VALUE
INSERT INTO t1 VALUES ('x');
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
INSERT INTO t1 VALUES (1);
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
INSERT INTO t1 VALUES (TIME'10:20:30');
--error ER_TRUNCATED_WRONG_VALUE
INSERT INTO t1 VALUES (0x00);
DROP TABLE t1;

--echo #
--echo # CAST
--echo #

SELECT CAST('garbage' AS INET4);
SELECT CAST(0x01 AS INET4);
SELECT CAST(REPEAT(0x00,16) AS INET4);
SELECT CAST(REPEAT(0x11,16) AS INET4);

CREATE TABLE t1 AS SELECT CAST('0.0.0.0' AS INET4);
SHOW CREATE TABLE t1;
DROP TABLE t1;


--echo #
--echo # Text and binary formats, comparison operators
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES (0x00000000);
INSERT INTO t1 VALUES (0x00000001);
INSERT INTO t1 VALUES (0xFF000001);
INSERT INTO t1 VALUES (0xFF000002);
SELECT * FROM t1 ORDER BY a;
SELECT * FROM t1 ORDER BY a DESC;
SELECT HEX(a),a FROM t1 ORDER BY a;
SELECT * FROM t1 WHERE a='0.0.0.0';
SELECT * FROM t1 WHERE a='0.0.0.1';
SELECT * FROM t1 WHERE a='255.0.0.1';
SELECT * FROM t1 WHERE a='255.0.0.2';
SELECT * FROM t1 WHERE a='255.000.000.002';
SELECT * FROM t1 WHERE a=0x00000000;
SELECT * FROM t1 WHERE a=0x00000001;
SELECT * FROM t1 WHERE a=0xff000001;
SELECT * FROM t1 WHERE a=0xff000002;
SELECT * FROM t1 WHERE a<'0.0.0.0';
SELECT * FROM t1 WHERE a<='0.0.0.0';
SELECT * FROM t1 WHERE a>='255.0.0.2';
SELECT * FROM t1 WHERE a>'255.0.0.2';
SELECT * FROM t1 WHERE a IN ('0.0.0.0', '255.0.0.1') ORDER BY a;
SELECT * FROM t1 WHERE a IN ('0.0.0.0', 0xff000002) ORDER BY a;

SELECT * FROM t1 WHERE a<'garbage';
SELECT * FROM t1 WHERE a<='garbage';
SELECT * FROM t1 WHERE a='garbage';
SELECT * FROM t1 WHERE a>='garbage';
SELECT * FROM t1 WHERE a>'garbage';

SELECT * FROM t1 WHERE a<0x01;
SELECT * FROM t1 WHERE a<=0x01;
SELECT * FROM t1 WHERE a=0x01;
SELECT * FROM t1 WHERE a>=0x01;
SELECT * FROM t1 WHERE a>0x01;

SELECT * FROM t1 WHERE a='0.0.0.00';
SELECT * FROM t1 WHERE a='0.0.0.000';
SELECT * FROM t1 WHERE a='0.0.00.000';

SELECT * FROM t1 WHERE a='0.0.0.01';
SELECT * FROM t1 WHERE a='0.0.0.001';
SELECT * FROM t1 WHERE a='0.0.00.001';

SELECT * FROM t1 WHERE a='0.0.0.0000';

--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT * FROM t1 WHERE a=0;
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT * FROM t1 WHERE a=0.0;
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT * FROM t1 WHERE a=0e0;
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT * FROM t1 WHERE a=TIME'10:20:30';
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT * FROM t1 WHERE a IN ('0.0.0.0', 10);

DROP TABLE t1;

--echo #
--echo # cmp_item_fbt: IN for non-constants
--echo #

CREATE TABLE t1 (a INET4, b INET4);
INSERT INTO t1 VALUES ('0.0.0.1', '0.0.0.2');
SELECT * FROM t1 WHERE '0.0.0.0' IN (a, b);
SELECT * FROM t1 WHERE '0.0.0.1' IN (a, b);
SELECT * FROM t1 WHERE '0.0.0.1' IN (a, b);
SELECT * FROM t1 WHERE '0.0.0.01' IN (a, b);
SELECT * FROM t1 WHERE '0.0.0.001' IN (a, b);
SELECT * FROM t1 WHERE '0.0.0.0001' IN (a, b);
DROP TABLE t1;


--echo #
--echo # CASE abbreviations
--echo #

CREATE TABLE t1 (
  c INET4,
  c_char CHAR(32),
  c_varchar VARCHAR(32),
  c_tinytext TINYTEXT,
  c_text TEXT,
  c_mediumtext TEXT,
  c_longtext LONGTEXT
);
CREATE TABLE t2 AS SELECT
  COALESCE(c, c_char),
  COALESCE(c, c_varchar),
  COALESCE(c, c_tinytext),
  COALESCE(c, c_text),
  COALESCE(c, c_mediumtext),
  COALESCE(c, c_longtext)
FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;
CREATE TABLE t2 AS SELECT
  LEAST(c, c_char),
  LEAST(c, c_varchar),
  LEAST(c, c_tinytext),
  LEAST(c, c_text),
  LEAST(c, c_mediumtext),
  LEAST(c, c_longtext)
FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;
DROP TABLE t1;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES (NULL),('0.0.0.1'),('0.0.0.2');
SELECT COALESCE(a, '0.0.0.0') FROM t1 ORDER BY a;
SELECT a, LEAST(a,'0.0.0.0'), LEAST(a,'0.0.0.255') FROM t1 ORDER BY a;
SELECT a, GREATEST(a,'0.0.0.0'), GREATEST(a,'0.0.0.255') FROM t1 ORDER BY a;

CREATE TABLE t2 AS SELECT
  COALESCE(a, '0.0.0.0'),
  LEAST(a,'0.0.0.0'),
  GREATEST(a,'0.0.0.0')
FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;

SELECT COALESCE(a, 0x00000000) FROM t1 ORDER BY a;

SELECT a,
  LEAST(a, 0x00000000),
  LEAST(a, 0x0000000f)
FROM t1 ORDER BY a;
SELECT a,
  GREATEST(a, 0x00000000),
  GREATEST(a, 0x0000000f)
FROM t1 ORDER BY a;

CREATE TABLE t2 AS SELECT
  COALESCE(a, 0x00000000),
  LEAST(a,0x00000000),
  GREATEST(a,0x00000000)
FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;

--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT COALESCE(a, 10) FROM t1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT LEAST(a, 10) FROM t1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT GREATEST(a, 10) FROM t1;
DROP TABLE t1;

SELECT COALESCE('garbage', CAST('0.0.0.1' AS INET4));
SELECT COALESCE(0x01, CAST('0.0.0.1' AS INET4));


--echo #
--echo # Uniqueness
--echo #

CREATE TABLE t1 (a INET4 NOT NULL PRIMARY KEY);
INSERT INTO t1 VALUES ('65.0.0.1'),('97.0.0.1');
--error ER_DUP_ENTRY
INSERT INTO t1 VALUES ('97.0.0.1');
SELECT * FROM t1;
DROP TABLE t1;


--echo #
--echo # Indexes
--echo #

--error ER_WRONG_SUB_KEY
CREATE TABLE t1 (a INET4, KEY(a(1)));


--echo #
--echo # Explicit CAST on INSERT
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES (CAST('1.0.0.1' AS INET4));
INSERT INTO t1 VALUES (CAST('1.0.0.2' AS INET4));
INSERT INTO t1 VALUES (CAST('1.0.0.3' AS INET4));
INSERT INTO t1 VALUES (CAST(CONCAT('2','0.0.0.1') AS INET4));
INSERT INTO t1 VALUES (CAST(CONCAT('2','0.0.0.2') AS INET4));
INSERT INTO t1 VALUES (CAST(CONCAT('2','0.0.0.3') AS INET4));
SELECT * FROM t1 ORDER BY a;
DROP TABLE t1;


--echo #
--echo # Explicit CAST and implicit CAST on ALTER
--echo #

CREATE TABLE t1 (a VARCHAR(64));
INSERT INTO t1 VALUES ('garbage'),('0.0.0.0'),('0.0.0.1'),('255.0.0.1'),('255.0.0.2');
SELECT a, CAST(a AS INET4) FROM t1 ORDER BY a;
SELECT a, CAST(a AS INET4) FROM t1 ORDER BY CAST(a AS INET4);
--error ER_TRUNCATED_WRONG_VALUE
ALTER TABLE t1 MODIFY a INET4;
SET sql_mode='';
ALTER TABLE t1 MODIFY a INET4;
SET sql_mode=DEFAULT;
SELECT * FROM t1 ORDER BY a;
DROP TABLE t1;


CREATE TABLE t1 (a BINARY(4));
INSERT INTO t1 VALUES (0x00000000);
INSERT INTO t1 VALUES (0x00000001);
INSERT INTO t1 VALUES (0xff000001);
INSERT INTO t1 VALUES (0xff000002);
SELECT HEX(a), CAST(a AS INET4) FROM t1 ORDER BY a;
ALTER TABLE t1 MODIFY a INET4;
SELECT * FROM t1 ORDER BY a;
DROP TABLE t1;


--echo #
--echo # INSERT..SELECT, same data types
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('0.0.0.0'),('0.0.0.1'),('0.0.0.2');
CREATE TABLE t2 (a INET4);
INSERT INTO t2 SELECT a FROM t1;
SELECT * FROM t2;
DROP TABLE t1,t2;


--echo #
--echo # Implicit CAST on INSERT..SELECT, text format
--echo #

CREATE TABLE t1 (a VARCHAR(64));
INSERT INTO t1 VALUES ('garbage'),('0.0.0.0'),('0.0.0.1'),('255.0.0.1'),('255.0.0.2');

CREATE TABLE t2 (a INET4);
--error ER_TRUNCATED_WRONG_VALUE
INSERT INTO t2 SELECT a FROM t1;
SET sql_mode='';
INSERT INTO t2 SELECT a FROM t1;
SELECT * FROM t2 ORDER BY a;
SET sql_mode=DEFAULT;
DROP TABLE t2;

CREATE TABLE t2 (a INET4 NOT NULL);
--error ER_TRUNCATED_WRONG_VALUE
INSERT INTO t2 SELECT a FROM t1;
SET sql_mode='';
INSERT INTO t2 SELECT a FROM t1;
SELECT * FROM t2 ORDER BY a;
SET sql_mode=DEFAULT;
DROP TABLE t2;

DROP TABLE t1;


--echo #
--echo # Implicit CAST on INSERT..SELECT, binary format
--echo #

CREATE TABLE t1 (a BINARY(4));
INSERT INTO t1 VALUES (0x00000000);
INSERT INTO t1 VALUES (0x00000001);
INSERT INTO t1 VALUES (0xff000001);
INSERT INTO t1 VALUES (0xff000002);
CREATE TABLE t2 (a INET4);
INSERT INTO t2 SELECT a FROM t1;
SELECT a FROM t2 ORDER BY a;
DROP TABLE t1,t2;


--echo #
--echo # CAST to other data types
--echo #

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT CAST(CAST('0.0.0.0' AS INET4) AS DOUBLE);

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT CAST(CAST('0.0.0.0' AS INET4) AS FLOAT);

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT CAST(CAST('0.0.0.0' AS INET4) AS DECIMAL);

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT CAST(CAST('0.0.0.0' AS INET4) AS SIGNED);

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT CAST(CAST('0.0.0.0' AS INET4) AS UNSIGNED);

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT CAST(CAST('0.0.0.0' AS INET4) AS TIME);

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT CAST(CAST('0.0.0.0' AS INET4) AS DATE);

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT CAST(CAST('0.0.0.0' AS INET4) AS DATETIME);

SELECT CAST(CAST('0.0.0.0' AS INET4) AS CHAR);
CREATE TABLE t1 AS SELECT CAST(CAST('0.0.0.0' AS INET4) AS CHAR) AS a;
SHOW CREATE TABLE t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('255.0.0.255');
CREATE TABLE t2 AS SELECT
  CAST(a AS CHAR),
  CAST(a AS CHAR(15)),
  CAST(a AS CHAR(530)),
  CAST(a AS CHAR(65535)),
  CAST(a AS CHAR(66000)),
  CAST(a AS CHAR(16777215)),
  CAST(a AS CHAR(16777216))
FROM t1;
SHOW CREATE TABLE t2;
--vertical_results
SELECT * FROM t2;
--horizontal_results
DROP TABLE t2;
DROP TABLE t1;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('255.0.0.255');
CREATE TABLE t2 AS SELECT
  CAST(a AS BINARY(4)) AS cb4,
  CAST(a AS BINARY) AS cb,
  CAST(a AS BINARY(16)) AS cb16,
  CAST(a AS BINARY(32)) AS cb32,
  CAST(a AS BINARY(530)) AS cb530,
  CAST(a AS BINARY(65535)) AS cb65535,
  CAST(a AS BINARY(66000)) AS cb66000,
  CAST(a AS BINARY(16777215)) AS cb16777215,
  CAST(a AS BINARY(16777216)) AS cb16777216
FROM t1 LIMIT 0;
SHOW CREATE TABLE t2;
DROP TABLE t2;

CREATE TABLE t2 AS SELECT
  CAST(a AS BINARY(4)) AS cb4,
  CAST(a AS BINARY) AS cb,
  CAST(a AS BINARY(16)) AS cb16,
  CAST(a AS BINARY(32)) AS cb32,
  CAST(a AS BINARY(530)) AS cb530,
  CAST(a AS BINARY(65535)) AS cb65535
FROM t1;
SHOW CREATE TABLE t2;
--vertical_results
SELECT
  HEX(cb4),
  HEX(cb),
  HEX(cb16),
  HEX(cb32),
  LENGTH(cb530),
  LENGTH(cb65535)
FROM t2;
--horizontal_results
DROP TABLE t2;
DROP TABLE t1;

--echo #
--echo # Implicit conversion to other types in INSERT
--echo #

CREATE TABLE t1 (a INT);
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
INSERT INTO t1 VALUES (CAST('0.0.0.0' AS INET4));
DROP TABLE t1;

CREATE TABLE t1 (a DOUBLE);
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
INSERT INTO t1 VALUES (CAST('0.0.0.0' AS INET4));
DROP TABLE t1;

CREATE TABLE t1 (a DECIMAL(32,0));
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
INSERT INTO t1 VALUES (CAST('0.0.0.0' AS INET4));
DROP TABLE t1;

CREATE TABLE t1 (a VARCHAR(64));
INSERT INTO t1 VALUES (CAST('0.0.0.0' AS INET4));
SELECT * FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a TEXT);
INSERT INTO t1 VALUES (CAST('0.0.0.0' AS INET4));
SELECT * FROM t1;
DROP TABLE t1;



--echo #
--echo # Boolean context
--echo #

SELECT
  CAST('0.0.0.0' AS INET4) IS TRUE, 
  CAST('0.0.0.0' AS INET4) IS FALSE,
  CAST('0.0.0.1' AS INET4) IS TRUE,
  CAST('0.0.0.1' AS INET4) IS FALSE;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('0.0.0.0'),('0.0.0.1');
SELECT a, a IS TRUE, a IS FALSE FROM t1 ORDER BY a;
DROP TABLE t1;

##
## TODO: Error looks like a bug. This should return rows where a<>'0.0.0.0'.
## The same problem is repeatable with GEOMETRY.
##
#CREATE TABLE t1 (a INET4);
#INSERT INTO t1 VALUES ('0.0.0.0'),('0.0.0.1'),('0.0.0.2');
#--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
#SELECT * FROM t1 WHERE a;
#DROP TABLE t1;


--echo #
--echo # GROUP BY
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('0.0.0.0'),('0.0.0.0');
INSERT INTO t1 VALUES ('0.0.0.1'),('0.0.0.01'),('0.0.0.001');
INSERT INTO t1 VALUES ('0.0.0.2'),('0.0.0.2'),('0.0.0.2'),('0.0.0.2');
SELECT a, COUNT(*) FROM t1 GROUP BY a;
DROP TABLE t1;

--echo #
--echo # Aggregate functions
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('0.0.0.0'),('0.0.0.0');
INSERT INTO t1 VALUES ('0.0.0.1'),('0.0.0.01'),('0.0.0.001');
INSERT INTO t1 VALUES ('0.0.0.2'),('0.0.0.2'),('0.0.0.2'),('0.0.0.2');
SELECT MIN(a),MAX(a) FROM t1;

CREATE TABLE t2 AS SELECT MIN(a), MAX(a) FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT AVG(a) FROM t1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT AVG(DISTINCT a) FROM t1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT SUM(a) FROM t1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT SUM(DISTINCT a) FROM t1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT STDDEV(a) FROM t1;
SELECT GROUP_CONCAT(a ORDER BY a) FROM t1;
SELECT a, GROUP_CONCAT(a ORDER BY a) FROM t1 GROUP BY a;
DROP TABLE t1;

--echo #
--echo # MDEV-21765 Possibly inconsistent behavior of BIT_xx functions with INET4 field
--echo #

CREATE TABLE t1 (a INET4);
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT BIT_AND(a) FROM t1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT BIT_OR(a) FROM t1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT BIT_XOR(a) FROM t1;
DROP TABLE t1;


--echo #
--echo # Window functions
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('0.0.0.1'),('0.0.0.2'),('0.0.0.3'),('0.0.0.004');
SELECT
  a,
  LAG(a) OVER (ORDER BY a),
  LEAD(a) OVER (ORDER BY a)
FROM t1 ORDER BY a;

SELECT
  a,
  FIRST_VALUE(a) OVER (ORDER BY a ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
  LAST_VALUE(a) OVER (ORDER BY a ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM t1 ORDER BY a;
DROP TABLE t1;


--echo #
--echo # Prepared statements
--echo #

EXECUTE IMMEDIATE 'CREATE TABLE t1 AS SELECT ? AS a' USING CAST('0.0.0.0' AS INET4);
SHOW CREATE TABLE t1;
EXECUTE IMMEDIATE 'INSERT INTO t1 VALUES (?)' USING '0.0.0.1';
EXECUTE IMMEDIATE 'INSERT INTO t1 VALUES (?)' USING CAST('0.0.0.2' AS INET4);
EXECUTE IMMEDIATE 'INSERT INTO t1 VALUES (?)' USING 0x00000003;
EXECUTE IMMEDIATE 'INSERT INTO t1 VALUES (?)' USING CAST(0x00000004 AS INET4);
SELECT a FROM t1 ORDER BY a;
EXECUTE IMMEDIATE 'SELECT * FROM t1 WHERE a=?' USING '0.0.0.1';
EXECUTE IMMEDIATE 'SELECT * FROM t1 WHERE a=?' USING CAST('0.0.0.2' AS INET4);
EXECUTE IMMEDIATE 'SELECT * FROM t1 WHERE a=?' USING 0x00000003;
EXECUTE IMMEDIATE 'SELECT * FROM t1 WHERE a=?' USING CAST(0x00000004 AS INET4);
DROP TABLE t1;


--echo #
--echo # Character set and collation aggregation
--echo #

CREATE TABLE t1 (a INET4);

CREATE TABLE t2 AS SELECT
  CONCAT(a) AS c1,
  CONCAT(CAST('0.0.0.0' AS INET4)) AS c2
FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;

CREATE TABLE t2 AS SELECT
  CONCAT(_utf8'1', a) AS c1,
  CONCAT(_utf8'1', CAST('0.0.0.1' AS INET4)) AS c2,
  CONCAT(_utf8'1', COALESCE(a)) AS c3
FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;

CREATE TABLE t2 AS SELECT
  CONCAT(_latin1'1', a) AS c1,
  CONCAT(_latin1'1', CAST('0.0.0.1' AS INET4)) AS c2,
  CONCAT(_latin1'1', COALESCE(a)) AS c3
FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;

DROP TABLE t1;


--echo #
--echo # UNION
--echo #

CREATE TABLE t1 AS SELECT CAST('0.0.0.0' AS INET4) AS c UNION SELECT CAST('0.0.0.1' AS INET4);
SHOW CREATE TABLE t1;
DROP TABLE t1;

CREATE TABLE t1 AS SELECT CAST('0.0.0.0' AS INET4) AS c UNION SELECT '0.0.0.1';
SHOW CREATE TABLE t1;
DROP TABLE t1;

CREATE TABLE t1 AS SELECT '0.0.0.0' AS c UNION SELECT CAST('0.0.0.1' AS INET4);
SHOW CREATE TABLE t1;
DROP TABLE t1;

CREATE TABLE t1 AS SELECT CAST('0.0.0.0' AS INET4) AS c UNION SELECT 0x00000001;
SELECT * FROM t1;
DROP TABLE t1;

--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
CREATE TABLE t1 AS SELECT CAST('0.0.0.0' AS INET4) AS c UNION SELECT 1;


--echo #
--echo # Unary operators
--echo #

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT -CAST('0.0.0.0' AS INET4);

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT ABS(CAST('0.0.0.0' AS INET4));

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT ROUND(CAST('0.0.0.0' AS INET4));

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT CEILING(CAST('0.0.0.0' AS INET4));

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT FLOOR(CAST('0.0.0.0' AS INET4));


--echo #
--echo # Arithmetic operators
--echo #

--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT CAST('0.0.0.0' AS INET4) + 1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT CAST('0.0.0.0' AS INET4) - 1;

--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT CAST('0.0.0.0' AS INET4) * 1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT CAST('0.0.0.0' AS INET4) / 1;

--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT CAST('0.0.0.0' AS INET4) MOD 1;


--echo #
--echo # Misc
--echo #

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT RAND(CAST('0.0.0.0' AS INET4));

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT FROM_UNIXTIME(CAST('0.0.0.0' AS INET4));

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT HOUR(CAST('0.0.0.0' AS INET4));

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT YEAR(CAST('0.0.0.0' AS INET4));

--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT RELEASE_LOCK(CAST('0.0.0.0' AS INET4));

# QQ
#SELECT JSON_LENGTH(CAST('0.0.0.0' AS INET4));

--echo #
--echo # Virtual columns
--echo #

--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
CREATE TABLE t1 (
  a INT,
  b INET4 GENERATED ALWAYS AS (CAST(CONCAT(RAND(),a) AS INET4)), INDEX(b)
);

CREATE TABLE t1 (
  a INT,
  b INET4 GENERATED ALWAYS AS (CAST(CONCAT('0.0.0.',a) AS INET4)), INDEX(b)
);
INSERT INTO t1 (a) VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15);
SELECT * FROM t1;
DROP TABLE t1;

--echo #
--echo # VIEW
--echo #

CREATE TABLE t1 (a INT DEFAULT 0);
INSERT INTO t1 (a) VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15);
SELECT * FROM t1 ORDER BY a;
CREATE VIEW v1 AS SELECT (CAST(CONCAT('0.0.0.',a) AS INET4)) AS c FROM t1;
SELECT * FROM v1 ORDER BY c;
DROP VIEW v1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4 DEFAULT '0.0.0.0');
CREATE VIEW v1 AS SELECT * FROM t1;
SHOW CREATE VIEW v1;
DESCRIBE v1;
INSERT INTO v1 VALUES ('0.0.0.0'),('0.0.0.1'),('0.0.0.2');
SELECT * FROM t1;
DROP VIEW v1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4 DEFAULT CAST('0.0.0.0' AS INET4));
CREATE VIEW v1 AS SELECT * FROM t1;
SHOW CREATE VIEW v1;
DESCRIBE v1;
INSERT INTO v1 VALUES ('0.0.0.0'),('0.0.0.1'),('0.0.0.2');
SELECT * FROM t1;
DROP VIEW v1;
DROP TABLE t1;


--echo #
--echo # Subqueries
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('0.0.0.0'),('0.0.0.1'),('0.0.0.2');
SELECT * FROM t1 WHERE a=(SELECT MIN(a) FROM t1) ORDER BY a;
SELECT * FROM t1 WHERE a=(SELECT MAX(a) FROM t1) ORDER BY a;
SELECT * FROM t1 WHERE a IN (SELECT a FROM t1 WHERE a>'0.0.0.0') ORDER BY a;
DROP TABLE t1;

--echo #
--echo # Stored routines
--echo #

DELIMITER $$;
CREATE PROCEDURE p1(a INET4)
BEGIN
  DECLARE b INET4 DEFAULT CONCAT('1', a);
  SELECT a, b;
END;
$$
DELIMITER ;$$
CALL p1('0.0.0.1');
CALL p1(CAST('0.0.0.2' AS INET4));
DROP PROCEDURE p1;

DELIMITER $$;
CREATE FUNCTION f1(a INET4) RETURNS INET4
BEGIN
  RETURN CONCAT('1',a);
END;
$$
DELIMITER ;$$
SELECT f1('0.0.0.1');
SELECT f1(CAST('0.0.0.1' AS INET4));
DROP FUNCTION f1;

--echo #
--echo # Anchored data types in SP variables
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('0.0.0.1');
DELIMITER $$;
CREATE PROCEDURE p1()
BEGIN
  DECLARE va TYPE OF t1.a;
  SELECT MAX(a) INTO va FROM t1;
  SELECT va;
END;
$$
DELIMITER ;$$
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1;


CREATE TABLE t1 (a INET4, b INET4);
INSERT INTO t1 VALUES ('0.0.0.12', '0.0.0.111');
DELIMITER $$;
CREATE PROCEDURE p1()
BEGIN
  DECLARE va ROW TYPE OF t1;
  SELECT MAX(a), MAX(b) INTO va FROM t1;
  SELECT va.a, va.b;
END;
$$
DELIMITER ;$$
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1;


--echo #
--echo # Optimizer: make_const_item_for_comparison
--echo #

CREATE TABLE t1 (id INT, a INET4);
INSERT INTO t1 VALUES (1,'0.0.0.1'),(2,'0.0.0.2');
EXPLAIN EXTENDED SELECT * FROM t1 WHERE a=COALESCE(CAST('0.0.0.1' AS INET4)) AND id>0;
DROP TABLE t1;

--echo #
--echo # Optimizer: equal field propagation
--echo #

CREATE TABLE t1 (id INT, a INET4);
INSERT INTO t1 VALUES (1,'0.0.0.1'),(2,'0.0.0.2');
EXPLAIN EXTENDED SELECT * FROM t1
WHERE a=COALESCE(CAST('0.0.0.1' AS INET4))
  AND LENGTH(CONCAT(a,RAND()))>1;
EXPLAIN EXTENDED SELECT * FROM t1
WHERE a=COALESCE(CAST('0.0.0.1' AS INET4))
  AND LENGTH(a)>1;
DROP TABLE t1;


--echo #
--echo # Optimizer: equal expression propagation
--echo #


CREATE TABLE t1 (id INT, a INET4);
INSERT INTO t1 VALUES (1,'0.0.0.1'),(2,'0.0.0.2');
EXPLAIN EXTENDED SELECT * FROM t1
WHERE COALESCE(a)='0.0.0.1' AND COALESCE(a)=CONCAT(a);
DROP TABLE t1;

--echo #
--echo # Subquery materialization
--echo #

CREATE TABLE t1 (a INET4, b VARCHAR(32), KEY (a), KEY(b)) ;
INSERT INTO t1 VALUES ('0.0.0.10','0.0.0.11'),('0.0.0.10','0.0.0.11');
SET @@optimizer_switch='semijoin=off,materialization=on,in_to_exists=off,subquery_cache=off';
EXPLAIN SELECT * FROM t1 WHERE a IN (SELECT a AS a_inner FROM t1 GROUP BY a_inner);
EXPLAIN SELECT * FROM t1 WHERE b IN (SELECT a AS a_inner FROM t1 GROUP BY a_inner);
SET @@optimizer_switch=DEFAULT;
DROP TABLE t1;

--echo #
--echo # ALTER from INET4 to INET4
--echo #

CREATE TABLE t1 (a INET4, b INT);
INSERT INTO t1 VALUES ('10.11.12.13', 1);
ALTER TABLE t1 MODIFY b DECIMAL(10,2);
SELECT * FROM t1;
DROP TABLE t1;

--echo #
--echo # ALTER to character string data types
--echo #

CREATE OR REPLACE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
SELECT CAST(a AS CHAR(15)) FROM t1;
ALTER TABLE t1 MODIFY a CHAR(15);
SELECT * FROM t1;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a VARCHAR(15);
SELECT * FROM t1;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a TINYTEXT;
SELECT * FROM t1;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a TEXT;
SELECT * FROM t1;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a MEDIUMTEXT;
SELECT * FROM t1;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a LONGTEXT;
SELECT * FROM t1;
DROP TABLE t1;


--echo #
--echo # ALTER from character string data types
--echo #

CREATE OR REPLACE TABLE t1 (a CHAR(64));
INSERT INTO t1 VALUES ('10.11.12.13');
SELECT CAST(a AS INET4) FROM t1;
ALTER TABLE t1 MODIFY a INET4;
SELECT * FROM t1;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a VARCHAR(64));
INSERT INTO t1 VALUES ('10.11.12.13');
SELECT CAST(a AS INET4) FROM t1;
ALTER TABLE t1 MODIFY a INET4;
SELECT * FROM t1;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a TINYTEXT);
INSERT INTO t1 VALUES ('10.11.12.13');
SELECT CAST(a AS INET4) FROM t1;
ALTER TABLE t1 MODIFY a INET4;
SELECT * FROM t1;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a TEXT);
INSERT INTO t1 VALUES ('10.11.12.13');
SELECT CAST(a AS INET4) FROM t1;
ALTER TABLE t1 MODIFY a INET4;
SELECT * FROM t1;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a MEDIUMTEXT);
INSERT INTO t1 VALUES ('10.11.12.13');
SELECT CAST(a AS INET4) FROM t1;
ALTER TABLE t1 MODIFY a INET4;
SELECT * FROM t1;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a LONGTEXT);
INSERT INTO t1 VALUES ('10.11.12.13');
SELECT CAST(a AS INET4) FROM t1;
ALTER TABLE t1 MODIFY a INET4;
SELECT * FROM t1;
DROP TABLE t1;


--echo #
--echo # ALTER to binary string data types
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a BINARY(4);
SELECT HEX(a) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a BINARY(5);
SELECT HEX(a) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
--error ER_DATA_TOO_LONG
ALTER TABLE t1 MODIFY a BINARY(3);
DROP TABLE t1;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a TINYBLOB;
SELECT HEX(a) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a BLOB;
SELECT HEX(a) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a MEDIUMBLOB;
SELECT HEX(a) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a LONGBLOB;
SELECT HEX(a) FROM t1;
DROP TABLE t1;


--echo #
--echo # ALTER from binary string data types
--echo #

CREATE TABLE t1 (a BINARY(4));
INSERT INTO t1 VALUES (X'11121314');
ALTER TABLE t1 MODIFY a INET4;
SELECT a FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a BINARY(17));
INSERT INTO t1 VALUES (X'1112131400');
--error ER_TRUNCATED_WRONG_VALUE
ALTER TABLE t1 MODIFY a INET4;
DROP TABLE t1;

CREATE TABLE t1 (a BINARY(3));
INSERT INTO t1 VALUES (X'111213');
--error ER_TRUNCATED_WRONG_VALUE
ALTER TABLE t1 MODIFY a INET4;
DROP TABLE t1;

CREATE TABLE t1 (a TINYBLOB);
INSERT INTO t1 VALUES (X'11121314');
ALTER TABLE t1 MODIFY a INET4;
SELECT a FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a BLOB);
INSERT INTO t1 VALUES (X'11121314');
ALTER TABLE t1 MODIFY a INET4;
SELECT a FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a MEDIUMBLOB);
INSERT INTO t1 VALUES (X'11121314');
ALTER TABLE t1 MODIFY a INET4;
SELECT a FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a BLOB);
INSERT INTO t1 VALUES (X'11121314');
ALTER TABLE t1 MODIFY a INET4;
SELECT a FROM t1;
DROP TABLE t1;


--echo #
--echo # SET from INET4 to INET4
--echo #

CREATE TABLE t1 (a INET4, b INET4);
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

--echo #
--echo # SET from INET4 to character string
--echo #

CREATE TABLE t1 (a INET4, b CHAR(15));
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4, b VARCHAR(15));
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4, b TEXT);
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4, b ENUM('255.0.0.255'));
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4, b SET('255.0.0.255'));
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;


--echo #
--echo # SET from character string to INET4
--echo #

CREATE TABLE t1 (a CHAR(15), b INET4);
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a VARCHAR(15), b INET4);
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a TEXT, b INET4);
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a ENUM('255.0.0.255'), b INET4);
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a SET('255.0.0.255'), b INET4);
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;


--echo #
--echo # SET from INET4 to binary
--echo #

CREATE TABLE t1 (a INET4, b BINARY(4));
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT HEX(b) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4, b VARBINARY(4));
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT HEX(b) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a INET4, b BLOB);
INSERT INTO t1 VALUES ('255.0.0.255', NULL);
UPDATE t1 SET b=a;
SELECT HEX(b) FROM t1;
DROP TABLE t1;


--echo #
--echo # SET from binary to INET4
--echo #

CREATE TABLE t1 (a BINARY(4), b INET4);
INSERT INTO t1 VALUES (CONCAT(0xFF,REPEAT(0x00,2),0xFF), NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a VARBINARY(4), b INET4);
INSERT INTO t1 VALUES (CONCAT(0xFF,REPEAT(0x00,2),0xFF), NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a BLOB, b INET4);
INSERT INTO t1 VALUES (CONCAT(0xFF,REPEAT(0x00,2),0xFF), NULL);
UPDATE t1 SET b=a;
SELECT b FROM t1;
DROP TABLE t1;


# QQ
#--echo #
#--echo # Limit clause parameter
#--echo # TODO: this should fail.
#--echo # The test for a valid data type should be moved
#--echo # from parse time to fix_fields() time, and performed
#--echo # for both Item_splocal and Item_param.
#--echo #
#
#EXECUTE IMMEDIATE 'SELECT 1 FROM DUAL LIMIT ?' USING CAST('0.0.0.0' AS INET4);

# QQ
### TODO:
### - Add hooks to run mysql_client_test with pluggable data types
###
### - This should fail with the "illegal data type" error:
###SELECT CAST('0.0.0.0' AS INET4) DIV 1;
###
### - This should fail with the "illegal data type" error:
### EXTRACT(MINUTE...)
###


--echo #
--echo # MDEV-20785 Converting INET6 to CHAR(39) produces garbage without a warning
--echo #

CREATE OR REPLACE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
SELECT CAST(a AS CHAR(15)) FROM t1;
ALTER TABLE t1 MODIFY a CHAR(15);
SELECT * FROM t1;
DROP TABLE t1;

--echo #
--echo # MDEV-20783 INET6 cannot be converted to BINARY(16) (requires clarification in documentation)
--echo #

CREATE OR REPLACE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
ALTER TABLE t1 MODIFY a BINARY(4);
SELECT HEX(a) FROM t1;
DROP TABLE t1;

--echo #
--echo # MDEV-20795 CAST(inet6 AS BINARY) returns wrong result
--echo #

CREATE OR REPLACE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('10.11.12.13');
SELECT HEX(CAST(a AS BINARY)) FROM t1;
SELECT HEX(CAST(a AS BINARY(4))) FROM t1;
DROP TABLE t1;

--echo #
--echo # MDEV-20808 CAST from INET6 to FLOAT does not produce an error
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('0.0.0.0');
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT CAST(a AS FLOAT) FROM t1;
DROP TABLE t1;

--echo #
--echo # MDEV-20798 Conversion from INET6 to other types performed without errors or warnings
--echo #

CREATE TABLE t1 (a INET4, b INT);
INSERT INTO t1 (a) VALUES ('0.0.0.0');
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
UPDATE t1 SET b=a;
SELECT * FROM t1;
DROP TABLE t1;

SET timestamp=UNIX_TIMESTAMP('2001-01-01 10:20:30');
CREATE TABLE t1 (a INET4, b TIMESTAMP);
INSERT INTO t1 (a) VALUES ('0.0.0.0');
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
UPDATE t1 SET b=a;
SELECT * FROM t1;
DROP TABLE t1;
SET timestamp=DEFAULT;

CREATE OR REPLACE TABLE t1 (a INET4);
INSERT INTO t1 (a) VALUES ('0.0.0.0');
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
ALTER TABLE t1 MODIFY a DATE;
DROP TABLE t1;

--echo #
--echo # MDEV-20818 ER_CRASHED_ON_USAGE or Assertion `length <= column->length' failed in write_block_record on temporary table
--echo #

CREATE TABLE t1 (a INET4);
--enable_metadata
SELECT
  CAST(a AS BINARY(0)),
  CAST(a AS BINARY(1)),
  CAST(a AS BINARY(16)),
  CAST(a AS BINARY(255)),
  CAST(a AS BINARY(256)),
  CAST(a AS BINARY(512)),
  CAST(a AS BINARY(513)),
  CAST(a AS BINARY(65532)),
  CAST(a AS BINARY(65533)),
  CAST(a AS BINARY(65534)),
  CAST(a AS BINARY(65535)),
  CAST(a AS BINARY(65536)),
  CAST(a AS BINARY(16777215)),
  CAST(a AS BINARY(16777216))
FROM t1;
--disable_metadata
DROP TABLE t1;

--echo #
--echo # MDEV-20826 Wrong result of MIN(inet6) with GROUP BY
--echo #

CREATE TABLE t1 (id INT, a INET4) ENGINE=MyISAM;
INSERT INTO t1 VALUES (1, '255.0.0.0'),(1, '128.0.0.0');
SELECT MIN(a), MAX(a) FROM t1 GROUP BY id;
DROP TABLE t1;


--echo #
--echo # MDEV-20809 EXTRACT from INET4 value does not produce any warnings
--echo #

CREATE TABLE t1 (a INET4);
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT EXTRACT(DAY FROM a) FROM t1;
DROP TABLE t1;
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT EXTRACT(DAY FROM CAST('0.0.0.0' AS INET4));


--echo #
--echo # MDEV-22764 Crash with a stored aggregate function returning INET4
--echo #

DELIMITER $$;
CREATE OR REPLACE AGGREGATE FUNCTION aggregate_min_inet4(x INET4) RETURNS INET4
BEGIN
  DECLARE res INET4 DEFAULT NULL;
  DECLARE CONTINUE HANDLER FOR NOT FOUND
    RETURN res;
  LOOP
    FETCH GROUP NEXT ROW;
    IF (res IS NULL) OR (res > x) THEN
      SET res= x;
    END IF;
  END LOOP;
END;
$$
DELIMITER ;$$

CREATE OR REPLACE TABLE t1 (name CHAR(30), val INET4);
INSERT INTO t1 VALUES ('a', '0.0.0.5');
INSERT INTO t1 VALUES ('a', '0.0.0.3');
INSERT INTO t1 VALUES ('b', '0.0.0.1');
INSERT INTO t1 VALUES ('b', '0.0.0.2');
INSERT INTO t1 VALUES ('b', '0.0.0.5');
SELECT name, aggregate_min_inet4(val) pc FROM t1 GROUP BY name;

CREATE OR REPLACE TABLE t2 (name CHAR(30), val INET4);
INSERT INTO t2 SELECT name, aggregate_min_inet4(val) pc FROM t1 GROUP BY name;
SELECT * FROM t2;
DROP TABLE t2;

DROP TABLE t1;
DROP FUNCTION aggregate_min_inet4;


--echo #
--echo # MDEV-20280 PERCENTILE_DISC() rejects temporal and string input
--echo #

CREATE TABLE t1 (name CHAR(30), star_rating INET4);
INSERT INTO t1 VALUES ('Lord of the Ladybirds', '0.0.0.5');
INSERT INTO t1 VALUES ('Lord of the Ladybirds', '0.0.0.3');
INSERT INTO t1 VALUES ('Lady of the Flies', '0.0.0.1');
INSERT INTO t1 VALUES ('Lady of the Flies', '0.0.0.2');
INSERT INTO t1 VALUES ('Lady of the Flies', '0.0.0.5');
SELECT name, PERCENTILE_DISC(0.5)
  WITHIN GROUP (ORDER BY star_rating)
  OVER (PARTITION BY name) AS pc FROM t1;
SELECT name, PERCENTILE_DISC(0)
  WITHIN GROUP (ORDER BY star_rating)
  OVER (PARTITION BY name) AS pc FROM t1;
SELECT name, PERCENTILE_DISC(1)
  WITHIN GROUP (ORDER BY star_rating)
  OVER (PARTITION BY name) AS pc FROM t1;
DROP TABLE t1;


--echo #
--echo # MDEV-22758 Assertion `!item->null_value' failed in Type_handler_inet6::make_sort_key_part
--echo #

CREATE TABLE t1 (a VARCHAR(8) NOT NULL, b INET4 NOT NULL);
INSERT INTO t1 VALUES ('foo','0.0.0.0'),('bar','1.0.0.1');
SELECT * FROM t1 ORDER BY CASE WHEN a THEN b ELSE a END;
DROP TABLE t1;

CREATE OR REPLACE TABLE t1 (a VARCHAR(8) NOT NULL);
INSERT INTO t1 VALUES ('foo'),('bar');
SELECT * FROM t1 ORDER BY CAST(a AS INET4);
DROP TABLE t1;

CREATE TABLE t1 (a INET4 NOT NULL, b VARCHAR(32) NOT NULL);
CREATE TABLE t2 AS SELECT CAST(a AS INET4) AS ca, CAST(b AS INET4) AS cb FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;

CREATE TABLE t2 AS SELECT COALESCE(a,a), COALESCE(a,b) FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;

CREATE TABLE t2 AS SELECT a AS ca,a AS cb FROM t1 UNION SELECT a,b FROM t1;
SHOW CREATE TABLE t2;
DROP TABLE t2;

DROP TABLE t1;

--echo #
--echo # MDEV-22758 Assertion `!item->null_value' failed in Type_handler_inet6::make_sort_key_part
--echo #

CREATE TABLE t1 (c INET4);
INSERT INTO t1 VALUES ('0.0.0.0'),(NULL);
SELECT * FROM t1 ORDER BY IFNULL(c, 'foo');
DROP TABLE t1;

CREATE TABLE t1 (c INET4);
INSERT INTO t1 VALUES ('0.0.0.0'),(NULL);

# Expect a NULL column
CREATE TABLE t2 AS SELECT IFNULL(c, 'foo') FROM t1;
SHOW CREATE TABLE t2;
SELECT * FROM t2;
DROP TABLE t2;

# Expect a NOT NULL column
CREATE TABLE t2 AS SELECT IFNULL(c, '0.0.0.1') FROM t1;
SHOW CREATE TABLE t2;
SELECT * FROM t2;
DROP TABLE t2;

DROP TABLE t1;

--echo #
--echo # MDEV-26732 Assertion `0' failed in Item::val_native
--echo #
#
# This tests Item_copy_fbt::val_native()
SELECT CAST(CONCAT('0.0.0.0', REPEAT('',RAND())) AS INET4) AS f, var_pop('x') FROM dual HAVING f > '';
SELECT CAST(CONCAT('0.0.0.0', REPEAT('',RAND())) AS INET4) AS f, var_pop(1) FROM dual HAVING f >= '0.0.0.0';

# This tests Item_copy_fbt::save_in_field()
CREATE TABLE t1(id INET4 NOT NULL PRIMARY KEY, dsc INET4);
INSERT INTO t1 VALUES ('0.0.0.1', '1.0.0.1'),('0.0.0.3', '1.0.0.3'),('1.0.0.4', NULL);
CREATE TABLE t2 SELECT COALESCE(t1.dsc), COUNT(*) FROM t1 GROUP BY t1.id;
SELECT * FROM t2 ORDER BY 1,2;
DROP TABLE t1, t2;

--echo #
--echo # MDEV-24619 Wrong result or Assertion `0' in Item::val_native / Type_handler_inet6::Item_val_native_with_conversion
--echo #

CREATE TABLE t1 (a INET4);
INSERT INTO t1 VALUES ('0.0.0.0'),('0.0.0.0');
SELECT IF(1, '0.0.0.0', a) AS f FROM t1 GROUP BY 'foo' HAVING f != '';
SELECT IF(1, '0.0.0.0', a) AS f FROM t1 GROUP BY 'foo' HAVING f != '0.0.0.0';
SELECT IF(1, '0.0.0.0', a) AS f FROM t1 GROUP BY 'foo' HAVING f != '0.0.0.1';
DROP TABLE t1;

--echo #
--echo # End of 10.10 tests
--echo #

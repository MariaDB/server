source include/not_valgrind.inc;
source include/have_memcached_plugin.inc;
source include/not_windows.inc;
source include/have_innodb.inc;

--disable_query_log
CALL mtr.add_suppression("daemon-memcached-w-batch-size': unsigned");
CALL mtr.add_suppression("Could not obtain server's UPN to be used as target service name");
CALL mtr.add_suppression("InnoDB: Warning: MySQL is trying to drop");
--enable_query_log

--enable_connect_log
SET @tx_isolation= @@global.tx_isolation;
SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

# Create the memcached tables
--disable_query_log
source include/memcached_config.inc;
call mtr.add_suppression("Plugin daemon_memcached");
--enable_query_log


--echo #
--echo #Bug 20400373 INNODB MEMCACHE CRASH WHEN RETRIEVING EXPIRED
--echo #	     RECORD WITH @@ TABLE MAPPING


# describe table for memcache
--replace_result $DAEMON_MEMCACHED_PORT_0 DAEMON_MEMCACHED_PORT_0
eval INSERT INTO containers VALUES ("tcp://127.0.0.1:$DAEMON_MEMCACHED_PORT_0", "test", "t1",
			       "c1", "c2",  "c3", "c4", "c5", "PRIMARY", "|");

--replace_result $DAEMON_MEMCACHED_PORT_0 DAEMON_MEMCACHED_PORT_0
eval INSERT INTO containers VALUES ('bb','test','demo','c1','c1,c22','c3',
			       'c4','c5','PRIMARY', "|");

USE test;

--disable_warnings
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS demo;
--enable_warnings

CREATE TABLE t1        (c1 VARCHAR(32),
			c2 VARCHAR(1024),
			c3 INT, c4 BIGINT UNSIGNED, c5 INT, primary key(c1))
ENGINE = INNODB;

INSERT INTO t1 VALUES ('D', 'Darmstadt', 0, 0, 0);

CREATE TABLE demo	(c1 VARCHAR(32) PRIMARY KEY NOT NULL,
			 c21 VARCHAR(1024),
			 c22 VARCHAR(1024),
			 c3 INT(11), c4 BIGINT(20) UNSIGNED, c5 INT(11))
ENGINE = INNODB;

INSERT INTO demo VALUES('b','aa','aa',0,2,unix_timestamp()-60);

# Tables must exist before plugin can be started!
INSTALL PLUGIN daemon_memcached SONAME 'daemon_memcached.so';

# The following select is writing all to memcache otherwisw memcache is empty.
--sorted_result
SELECT c1,c2 FROM t1;
SELECT c1,c21 FROM demo;

SELECT SLEEP(2);

perl;
use DBI;
use Cache::Memcached;
my $memd = new Cache::Memcached {
  'servers' => [ "127.0.0.1:$ENV{DAEMON_MEMCACHED_PORT_0}" ],
  'connect_timeout' => 20,
  'select_timeout' => 20
};
$val = $memd->get("@@bb");
$val = $memd->get("b");
if ($val) { print "$val\n"; }
$memd->disconnect_all;
EOF

DROP TABLE t1;
DROP TABLE demo;

UNINSTALL PLUGIN daemon_memcached;
DROP DATABASE daemon_memcached;

SET @@global.tx_isolation= @tx_isolation;

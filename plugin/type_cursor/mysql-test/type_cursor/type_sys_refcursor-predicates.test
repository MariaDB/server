--source include/have_sequence.inc

--echo #
--echo # MDEV-20034 Add support for the pre-defined weak SYS_REFCURSOR
--echo #

DELIMITER /;
CREATE FUNCTION f1(task VARCHAR(32)) RETURNS BOOLEAN
BEGIN
  DECLARE c0 SYS_REFCURSOR;
  DECLARE c1 SYS_REFCURSOR;
  DECLARE c2 SYS_REFCURSOR;
  OPEN c0 FOR SELECT 1;
  OPEN c1 FOR SELECT 2;
  SET c2= c0;
  CASE task
    WHEN 'in'           THEN RETURN c0 IN (c1, c2);
    WHEN 'between'      THEN RETURN c0 BETWEEN c1 AND c2;
    WHEN 'is true'      THEN RETURN c0 IS TRUE;
    WHEN 'is false'     THEN RETURN c0 IS FALSE;
    WHEN 'is null'      THEN RETURN c0 IS NULL;
    WHEN 'is not true'  THEN RETURN c0 IS NOT TRUE;
    WHEN 'is not false' THEN RETURN c0 IS NOT FALSE;
    WHEN 'is not null'  THEN RETURN c0 IS NOT NULL;
    WHEN 'like'         THEN RETURN c0 LIKE c1;
    WHEN 'rlike'        THEN RETURN c0 RLIKE c1;
    WHEN '='            THEN RETURN c0 = c1;
    WHEN '<=>'          THEN RETURN c0 = c1;
    WHEN 'row ='        THEN RETURN (c0,c1) = (c1,c2);
    WHEN 'row <=>'      THEN RETURN (c0,c1) = (c1,c2);
    WHEN 'row in'       THEN RETURN (c0,c1) IN ((c1,c2),(c0,c2));
  END CASE;
  RETURN 'unknown';
END;
/
DELIMITER ;/
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT f1('in');
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT f1('between');
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT f1('is true');
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT f1('is false');
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT f1('is not true');
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT f1('is not false');
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT f1('like');
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
SELECT f1('rlike');
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT f1('=');
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT f1('<=>');

--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT f1('row =');
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT f1('row <=>');
--error ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION
SELECT f1('row in');

SELECT f1('is null');
SELECT f1('is not null');

DROP FUNCTION f1;


--echo #
--echo # IS [NOT] NULL
--echo #

DELIMITER /;
CREATE PROCEDURE p1()
BEGIN
  DECLARE c0 SYS_REFCURSOR;
  DECLARE c1 SYS_REFCURSOR;
  OPEN c0 FOR SELECT 1;
  SELECT
    c0,
    c0 IS NULL AS nl_0,
    c0 IS NOT NULL AS nnl_0,
    c1,
    c1 IS NULL AS nl_1,
    c1 IS NOT NULL AS nnl_1
  FROM seq_1_to_5;
END;
/
DELIMITER ;/
CALL p1;
DROP PROCEDURE p1;


DELIMITER /;
CREATE PROCEDURE p1()
BEGIN
  DECLARE c0 SYS_REFCURSOR;
  DECLARE c1 SYS_REFCURSOR;
  OPEN c0 FOR SELECT 1;
  SELECT
    c0,
    COALESCE(c0) IS NULL AS nl_0,
    COALESCE(c0) IS NOT NULL AS nnl_0,
    c1,
    COALESCE(c1) IS NULL AS nl_1,
    COALESCE(c1) IS NOT NULL AS nnl_1
  FROM seq_1_to_5;
END;
/
DELIMITER ;/
CALL p1;
DROP PROCEDURE p1;


DELIMITER /;
CREATE FUNCTION f1() RETURNS SYS_REFCURSOR
BEGIN
  DECLARE f1c0 SYS_REFCURSOR;
  OPEN f1c0 FOR SELECT 1;
  RETURN f1c0;
END;
/
CREATE FUNCTION f2() RETURNS SYS_REFCURSOR
BEGIN
  DECLARE f2c0 SYS_REFCURSOR;
  RETURN f2c0;
END;
/
CREATE PROCEDURE p1()
BEGIN
  SELECT
    f1() IS NULL AS nl_0,
    f1() IS NOT NULL AS nnl_0,
    f2() IS NULL AS nl_1,
    f2() IS NOT NULL AS nnl_1
  FROM seq_1_to_5;
END;
/
DELIMITER ;/
CALL p1;
DROP PROCEDURE p1;
DROP FUNCTION f1;
DROP FUNCTION f2;

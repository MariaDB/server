--source include/have_debug.inc
--source include/have_sequence.inc

--disable_query_log
--disable_result_log
--source type_sys_refcursor-helper_routines-debug-create.inc
--enable_result_log
--enable_query_log

--echo #
--echo # MDEV-20034 Add support for the pre-defined weak SYS_REFCURSOR
--echo #

--echo #
--echo # Testing a case when Item_param is the only Item with
--echo # a complex data type (with a side effec) inside EXECUTE IMMEDIATE.
--echo # It makes sure that the item_with_t::COMPLEX_DATA_TYPE flag
--echo # gets properly added from Item_param
--echo # to Query_arena::with_flags_bit_or_for_complex_data_types
--echo #

DELIMITER /;
CREATE PROCEDURE p1()
BEGIN
  DECLARE p1c0 SYS_REFCURSOR;
  OPEN p1c0 FOR SELECT 1;

  SELECT 'p1-1' AS stage, refs(0,3) AS refs;

  EXECUTE IMMEDIATE 'SELECT
    ''stmt1'' AS stage, refs(0,3) AS refs
  FROM seq_1_to_5
  WHERE ? IS NOT NULL' USING p1c0;

  SELECT 'p1-2' AS stage, refs(0,3);
END;
/
DELIMITER ;/
--disable_column_names
CALL p1;
--enable_column_names
DROP PROCEDURE p1;


--echo #
--echo # Passing a variable as an IN and an OUT parameter at the same time
--echo #

DELIMITER /;
CREATE PROCEDURE p1(c0 SYS_REFCURSOR, OUT c1 SYS_REFCURSOR)
BEGIN
  SELECT 'p1-1' AS stage, refs(0,3) AS refs;
  SET c1=c0;
  SELECT 'p1-2' AS stage, refs(0,3) AS refs;
END;
/
CREATE PROCEDURE p2()
BEGIN
  DECLARE c0 SYS_REFCURSOR;
  OPEN c0 FOR SELECT 1;
  PREPARE stmt FROM 'CALL p1(?,?)';
  SELECT 'p2-1' AS stage, refs(0,3) AS refs;
  FOR i IN 1..4 DO
    EXECUTE IMMEDIATE 'CALL p1(?,?)' USING c0,c0;
    SELECT 'p2-i1' AS stage, refs(0,3) AS refs;
    EXECUTE stmt USING c0,c0;
    SELECT 'p2-i2' AS stage, refs(0,3) AS refs;
  END FOR;
END;
/
DELIMITER ;/
--disable_column_names
CALL p2;
SELECT '/p2' AS stage, refs(0,3) AS refs;
--enable_column_names
DROP PROCEDURE p2;
DROP PROCEDURE p1;


--disable_query_log
--disable_result_log
--source type_sys_refcursor-helper_routines-debug-drop.inc
--enable_result_log
--enable_query_log

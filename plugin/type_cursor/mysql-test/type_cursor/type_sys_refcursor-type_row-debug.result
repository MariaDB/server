#
# Helper routines
#
#
# MDEV-20034 Add support for the pre-defined weak SYS_REFCURSOR
#
#
# Make sure a ROW variable with SYS_REFCURSOR members destructs
# its members properly when leaving a BEGIN..END block.
#
CREATE PROCEDURE p1()
BEGIN
BEGIN
DECLARE r0 ROW(m0 SYS_REFCURSOR, m1 SYS_REFCURSOR);
BEGIN
DECLARE c0 SYS_REFCURSOR;
DECLARE c1 SYS_REFCURSOR;
OPEN c0 FOR SELECT 10;
OPEN c1 FOR SELECT 11;
SET r0= ROW(c0, c1);
END; -- c0, c1 should be freed by a "destruct sys_refcursor" instruction
SELECT 'p1-1' AS stage, r0.m0, r0.m1, refs(0,4) AS refs;
END; -- r0.m0, r0.m1 should be freed here by a "destruct row" instruction
BEGIN
DECLARE v0 INT;
DECLARE v1 INT;
DECLARE c0 SYS_REFCURSOR;
DECLARE c1 SYS_REFCURSOR;
OPEN c0 FOR SELECT 20; -- Expect to reuse m_statement_cursors.at(0)
OPEN c1 FOR SELECT 21; -- Expect to reuse m_statement_cursors.at(1)
FETCH c0 INTO v0;
FETCH c1 INTO v1;
SELECT 'p1-2' AS stage, c0, c1, refs(0,4) AS refs, v0, v1;
END;
END;
/
SHOW PROCEDURE CODE p1;
Pos	Instruction
0	set r0@0 NULL
1	set c0@1 NULL
2	set c1@2 NULL
3	copen STMT.cursor[c0@1]
4	copen STMT.cursor[c1@2]
5	set r0@0 (c0@1,c1@2)
6	destruct sys_refcursor c1@2
7	destruct sys_refcursor c0@1
8	stmt 0 "SELECT 'p1-1' AS stage, r0.m0, r0.m1,..."
9	destruct row r0@0
10	set v0@3 NULL
11	set v1@4 NULL
12	set c0@5 NULL
13	set c1@6 NULL
14	copen STMT.cursor[c0@5]
15	copen STMT.cursor[c1@6]
16	cfetch STMT.cursor[c0@5] v0@3
17	cfetch STMT.cursor[c1@6] v1@4
18	stmt 0 "SELECT 'p1-2' AS stage, c0, c1, refs(..."
19	destruct sys_refcursor c1@6
20	destruct sys_refcursor c0@5
CALL p1;
p1-1	0	1	[1	1	NULL	NULL	NULL]
p1-2	0	1	[1	1	NULL	NULL	NULL]	20	21
DROP PROCEDURE p1;
CREATE PROCEDURE p1()
BEGIN
DECLARE c0 SYS_REFCURSOR;
DECLARE c1 SYS_REFCURSOR;
OPEN c0 FOR SELECT 0;
OPEN c1 FOR SELECT 1;
BEGIN
DECLARE r0 ROW(m0 SYS_REFCURSOR, m1 SYS_REFCURSOR);
DECLARE r1 ROW(m0 SYS_REFCURSOR, m1 SYS_REFCURSOR);
SELECT 'p1-1' AS stage, refs(0,5) AS refs;
SET r0=ROW(c0, c1);
SELECT 'p1-2' AS stage, refs(0,5) AS refs;
SET r1=ROW(ff0(), ff0());
SELECT 'p1-3' AS stage, refs(0,5) AS refs;
END;
SELECT 'p1-4' AS stage, refs(0,5) AS refs;
END;
/
SHOW PROCEDURE CODE p1;
Pos	Instruction
0	set c0@0 NULL
1	set c1@1 NULL
2	copen STMT.cursor[c0@0]
3	copen STMT.cursor[c1@1]
4	set r0@2 NULL
5	set r1@3 NULL
6	stmt 0 "SELECT 'p1-1' AS stage, refs(0,5) AS ..."
7	set r0@2 (c0@0,c1@1)
8	stmt 0 "SELECT 'p1-2' AS stage, refs(0,5) AS ..."
9	set r1@3 (`ff0`(),`ff0`())
10	stmt 0 "SELECT 'p1-3' AS stage, refs(0,5) AS ..."
11	destruct row r1@3
12	destruct row r0@2
13	stmt 0 "SELECT 'p1-4' AS stage, refs(0,5) AS ..."
14	destruct sys_refcursor c1@1
15	destruct sys_refcursor c0@0
CALL p1;
p1-1	[1	1	NULL	NULL	NULL	NULL]
p1-2	[2	2	NULL	NULL	NULL	NULL]
p1-3	[2	2	1	1	NULL	NULL]
p1-4	[1	1	0	0	NULL	NULL]
SELECT 'p1-e' AS stage, refs(0,5) AS refs;
p1-e	[NULL	NULL	NULL	NULL	NULL	NULL]
DROP PROCEDURE p1;

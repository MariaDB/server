#
# Helper routines
#
#
# MDEV-20034 Add support for the pre-defined weak SYS_REFCURSOR
#
#
# IS [NOT] NULL
#
CREATE PROCEDURE p1()
BEGIN
DECLARE c0 SYS_REFCURSOR;
DECLARE c1 SYS_REFCURSOR;
OPEN c0 FOR SELECT 1;
SELECT
c0,
c0 IS NULL AS nl_0,
c0 IS NOT NULL AS nnl_0,
c1,
c1 IS NULL AS nl_1,
c1 IS NOT NULL AS nnl_1,
refs(0,3) AS refs
FROM seq_1_to_5;
END;
/
CALL p1;
c0	nl_0	nnl_0	c1	nl_1	nnl_1	refs
0	0	1	NULL	1	0	[1	NULL	NULL	NULL]
0	0	1	NULL	1	0	[1	NULL	NULL	NULL]
0	0	1	NULL	1	0	[1	NULL	NULL	NULL]
0	0	1	NULL	1	0	[1	NULL	NULL	NULL]
0	0	1	NULL	1	0	[1	NULL	NULL	NULL]
DROP PROCEDURE p1;
CREATE PROCEDURE p1()
BEGIN
DECLARE c0 SYS_REFCURSOR;
DECLARE c1 SYS_REFCURSOR;
OPEN c0 FOR SELECT 1;
EXECUTE IMMEDIATE 'SELECT
    ? AS c0,
    ? IS NULL AS nl_0,
    ? IS NOT NULL AS nnl_0,
    ? AS c1,
    ? IS NULL AS nl_1,
    ? IS NOT NULL AS nnl_1,
    refs(0,3) AS refs
  FROM seq_1_to_5' USING c0, c0, c0, c1, c1, c1;
END;
/
CALL p1;
c0	nl_0	nnl_0	c1	nl_1	nnl_1	refs
0	0	1	NULL	1	0	[4	NULL	NULL	NULL]
0	0	1	NULL	1	0	[4	NULL	NULL	NULL]
0	0	1	NULL	1	0	[4	NULL	NULL	NULL]
0	0	1	NULL	1	0	[4	NULL	NULL	NULL]
0	0	1	NULL	1	0	[4	NULL	NULL	NULL]
DROP PROCEDURE p1;
CREATE PROCEDURE p1()
BEGIN
DECLARE c0 SYS_REFCURSOR;
DECLARE c1 SYS_REFCURSOR;
OPEN c0 FOR SELECT 1;
SELECT
COALESCE(c0) AS c_c0,
COALESCE(c0) IS NULL AS nl_0,
COALESCE(c0) IS NOT NULL AS nnl_0,
COALESCE(c1) AS c_c1,
COALESCE(c1) IS NULL AS nl_1,
COALESCE(c1) IS NOT NULL AS nnl_1,
refs(0,3) AS refs
FROM seq_1_to_5;
END;
/
CALL p1;
c_c0	nl_0	nnl_0	c_c1	nl_1	nnl_1	refs
0	0	1	NULL	1	0	[1	NULL	NULL	NULL]
0	0	1	NULL	1	0	[1	NULL	NULL	NULL]
0	0	1	NULL	1	0	[1	NULL	NULL	NULL]
0	0	1	NULL	1	0	[1	NULL	NULL	NULL]
0	0	1	NULL	1	0	[1	NULL	NULL	NULL]
DROP PROCEDURE p1;
CREATE PROCEDURE p1()
BEGIN
DECLARE c0 SYS_REFCURSOR;
DECLARE c1 SYS_REFCURSOR;
OPEN c0 FOR SELECT 1;
EXECUTE IMMEDIATE 'SELECT
    COALESCE(?) AS c_c0,
    COALESCE(?) IS NULL AS nl_0,
    COALESCE(?) IS NOT NULL AS nnl_0,
    COALESCE(?) AS c_c1,
    COALESCE(?) IS NULL AS nl_1,
    COALESCE(?) IS NOT NULL AS nnl_1,
    refs(0,3) AS refs
  FROM seq_1_to_5' USING c0, c0, c0, c1, c1, c1;
END;
/
CALL p1;
c_c0	nl_0	nnl_0	c_c1	nl_1	nnl_1	refs
0	0	1	NULL	1	0	[4	NULL	NULL	NULL]
0	0	1	NULL	1	0	[4	NULL	NULL	NULL]
0	0	1	NULL	1	0	[4	NULL	NULL	NULL]
0	0	1	NULL	1	0	[4	NULL	NULL	NULL]
0	0	1	NULL	1	0	[4	NULL	NULL	NULL]
DROP PROCEDURE p1;
CREATE FUNCTION f1() RETURNS SYS_REFCURSOR
BEGIN
DECLARE f1c0 SYS_REFCURSOR;
OPEN f1c0 FOR SELECT 1;
RETURN f1c0;
END;
/
CREATE FUNCTION f2() RETURNS SYS_REFCURSOR
BEGIN
DECLARE f2c0 SYS_REFCURSOR;
RETURN f2c0;
END;
/
CREATE PROCEDURE p1()
BEGIN
DECLARE c0 SYS_REFCURSOR;
DECLARE c1 SYS_REFCURSOR;
OPEN c0 FOR SELECT 1;
SELECT
f1() IS NULL AS nl_0,
f1() IS NOT NULL AS nnl_0,
f2() IS NULL AS nl_1,
f2() IS NOT NULL AS nnl_1,
refs(0,3) AS refs
FROM seq_1_to_5;
END;
/
CREATE PROCEDURE p2()
BEGIN
DECLARE c0 SYS_REFCURSOR;
DECLARE c1 SYS_REFCURSOR;
OPEN c0 FOR SELECT 1;
SELECT
COALESCE(f1()) IS NULL AS nl_0,
COALESCE(f1()) IS NOT NULL AS nnl_0,
COALESCE(f2()) IS NULL AS nl_1,
COALESCE(f2()) IS NOT NULL AS nnl_1,
refs(0,3) AS refs
FROM seq_1_to_5;
END;
/
CALL p1;
nl_0	nnl_0	nl_1	nnl_1	refs
0	1	1	0	[1	1	1	NULL]
0	1	1	0	[1	1	1	NULL]
0	1	1	0	[1	1	1	NULL]
0	1	1	0	[1	1	1	NULL]
0	1	1	0	[1	1	1	NULL]
CALL p2;
nl_0	nnl_0	nl_1	nnl_1	refs
0	1	1	0	[1	0	NULL	NULL]
0	1	1	0	[1	0	NULL	NULL]
0	1	1	0	[1	0	NULL	NULL]
0	1	1	0	[1	0	NULL	NULL]
0	1	1	0	[1	0	NULL	NULL]
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP FUNCTION f1;
DROP FUNCTION f2;

SET sql_mode=ORACLE;
SET NAMES utf8mb4;
#
# MDEV-34319 DECLARE TYPE .. TABLE OF .. INDEX BY in stored routines
#
#
# Using a key expression with a different character set
# than the one specified in the INDEX BY clause.
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE latin1_swedish_ci;
assoc assoc_t:= assoc_t('√°' => 10);
BEGIN
assoc('√≥'):=20;
SELECT assoc('A') AS c1; -- should find 10
SELECT assoc('√Å') AS c1; -- should find 10
SELECT assoc('O') AS c1; -- should find 20
SELECT assoc('√ì') AS c1; -- should find 20
END;
$$
CALL p1;
c1
10
c1
10
c1
20
c1
20
DROP PROCEDURE p1;
#
# Check that methods (exists, delete, next)
# work when the passed key has a different character set
# than the key character set specified in INDEX BY
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE latin1_swedish_ci;
assoc_latin1 assoc_t:= assoc_t('√ü'=>0xDF,'√°'=>0xE1,'√©'=>0xE9,'√≥'=>0xF3,'√∫'=>0xFA);
key_utf8mb4 VARCHAR(10) COLLATE utf8mb4_uca1400_ai_ci;
BEGIN
key_utf8mb4:='√≥';
SELECT assoc_latin1.exists(key_utf8mb4);
assoc_latin1.delete(key_utf8mb4);
SELECT assoc_latin1.exists(key_utf8mb4);
CREATE TEMPORARY TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,
k VARCHAR(10) COLLATE utf8mb4_uca1400_ai_ci,
val INT);
key_utf8mb4:= assoc_latin1.first;
WHILE key_utf8mb4 IS NOT NULL
LOOP
INSERT INTO t1 (k, val) VALUES (key_utf8mb4, assoc_latin1(key_utf8mb4));
key_utf8mb4:= assoc_latin1.NEXT(key_utf8mb4);
END LOOP;
SELECT id, k, HEX(val) AS val FROM t1;
DROP TEMPORARY TABLE t1;
END;
$$
CALL p1;
assoc_latin1.exists(key_utf8mb4)
1
assoc_latin1.exists(key_utf8mb4)
0
id	k	val
1	√°	E1
2	√©	E9
3	√∫	FA
4	√ü	DF
DROP PROCEDURE p1;
#
# Assigning arrays with different key character sets and collations
# Dumping using a key variable of different characters set and collations
#
CREATE PROCEDURE p1 AS
TYPE assoc_latin1_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE latin1_swedish_ci;
TYPE assoc_utf8mb4_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE utf8mb4_uca1400_ai_ci;
assoc_latin1 assoc_latin1_t;
assoc_utf8mb4 assoc_utf8mb4_t;
key_latin1 VARCHAR(10) COLLATE latin1_swedish_ci;
key_utf8mb4 VARCHAR(10) COLLATE utf8mb4_uca1400_ai_ci;
BEGIN
SELECT '# Populating assoc_latin1' AS ``;
assoc_latin1('√ü'):=0xDF;
assoc_latin1('√°'):=0xE1;
assoc_latin1('√©'):=0xE9;
assoc_latin1('√≥'):=0xF3;
assoc_latin1('√∫'):=0xFA;
SELECT '# Copying to assoc_utf8mb4 from assoc_latin1' AS ``;
assoc_utf8mb4:=assoc_latin1;
CREATE TEMPORARY TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,
k VARCHAR(10) COLLATE utf8mb4_uca1400_ai_ci,
val INT);
SELECT '# Dumping assoc_latin1 using key_latin1. The expected order: √° √© √≥ √∫ √ü' AS ``;
key_latin1:= assoc_latin1.first;
WHILE key_latin1 IS NOT NULL
LOOP
INSERT INTO t1 (k, val) VALUES (key_latin1, assoc_latin1(key_latin1));
key_latin1:= assoc_latin1.NEXT(key_latin1);
END LOOP;
SELECT id, k, HEX(val) AS val FROM t1;
TRUNCATE TABLE t1;
SELECT '# Dumping assoc_latin1 using key_utf8mb4. The expected order: √° √© √≥ √∫ √ü' AS ``;
key_utf8mb4:= assoc_latin1.first;
WHILE key_utf8mb4 IS NOT NULL
LOOP
INSERT INTO t1 (k, val) VALUES (key_utf8mb4, assoc_latin1(key_utf8mb4));
key_utf8mb4:= assoc_latin1.NEXT(key_utf8mb4);
END LOOP;
SELECT id, k, HEX(val) AS val FROM t1;
TRUNCATE TABLE t1;
SELECT '# Dumping assoc_utf8mb4 using key_utf8mb4. The expected order: √° √© √≥ √ü √∫' AS ``;
key_utf8mb4:= assoc_utf8mb4.first;
WHILE key_utf8mb4 IS NOT NULL
LOOP
INSERT INTO t1 (k,val) VALUES (key_utf8mb4, assoc_utf8mb4(key_utf8mb4));
key_utf8mb4:= assoc_utf8mb4.NEXT(key_utf8mb4);
END LOOP;
SELECT id, k, HEX(val) AS val FROM t1;
TRUNCATE TABLE t1;
SELECT '# Dumping assoc_utf8mb4 using key_latin1. The expected order: √° √© √≥ √ü √∫' AS ``;
key_latin1:= assoc_utf8mb4.first;
WHILE key_latin1 IS NOT NULL
LOOP
INSERT INTO t1 (k,val) VALUES (key_latin1, assoc_utf8mb4(key_latin1));
key_latin1:= assoc_utf8mb4.NEXT(key_latin1);
END LOOP;
SELECT id, k, HEX(val) AS val FROM t1;
TRUNCATE TABLE t1;
DROP TEMPORARY TABLE t1;
END;
$$
CALL p1;

# Populating assoc_latin1

# Copying to assoc_utf8mb4 from assoc_latin1

# Dumping assoc_latin1 using key_latin1. The expected order: √° √© √≥ √∫ √ü
id	k	val
1	√°	E1
2	√©	E9
3	√≥	F3
4	√∫	FA
5	√ü	DF

# Dumping assoc_latin1 using key_utf8mb4. The expected order: √° √© √≥ √∫ √ü
id	k	val
1	√°	E1
2	√©	E9
3	√≥	F3
4	√∫	FA
5	√ü	DF

# Dumping assoc_utf8mb4 using key_utf8mb4. The expected order: √° √© √≥ √ü √∫
id	k	val
1	√°	E1
2	√©	E9
3	√≥	F3
4	√ü	DF
5	√∫	FA

# Dumping assoc_utf8mb4 using key_latin1. The expected order: √° √© √≥ √ü √∫
id	k	val
1	√°	E1
2	√©	E9
3	√≥	F3
4	√ü	DF
5	√∫	FA
DROP PROCEDURE p1;
#
# Assigning arrays with different key character sets and collations
# Some values can cause a collision during the assignment, e.g.:
# '√º' is not equal to 'y' in utf8mb4_uca1400_as_ci
# '√º' is     equal to 'y' in latin1_swedish_ci
# 'y' disappears after the assignment, because it sorts after '√º' in utf8mb4_uca1400_as_ci
#
CREATE PROCEDURE p1 AS
TYPE assoc_latin1_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE latin1_swedish_ci;
TYPE assoc_utf8mb4_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE utf8mb4_uca1400_as_ci;
assoc_latin1 assoc_latin1_t;
assoc_utf8mb4 assoc_utf8mb4_t:= assoc_utf8mb4_t('√•'=>0xC5,'√∂'=>0xF6,'√º'=>0xFC,
'y'=>0x79,'z'=>0x7A);
key_utf8mb4 VARCHAR(10) COLLATE utf8mb4_uca1400_ai_ci;
BEGIN
SELECT '# Copying to assoc_latin1 from assoc_utf8mb4' AS ``;
assoc_latin1:= assoc_utf8mb4;
SHOW WARNINGS;
SELECT assoc_utf8mb4.count, assoc_latin1.count;
CREATE TEMPORARY TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,
k VARCHAR(10) COLLATE utf8mb4_uca1400_ai_ci,
val INT);
SELECT '# Dumping assoc_utf8mb4 using key_utf8mb4' AS ``;
key_utf8mb4:= assoc_utf8mb4.first;
WHILE key_utf8mb4 IS NOT NULL
LOOP
INSERT INTO t1 (k, val) VALUES (key_utf8mb4, assoc_utf8mb4(key_utf8mb4));
key_utf8mb4:= assoc_utf8mb4.NEXT(key_utf8mb4);
END LOOP;
SELECT id, k, HEX(val) AS val FROM t1;
TRUNCATE TABLE t1;
SELECT '# Dumping assoc_latin1 using key_utf8mb4' AS ``;
key_utf8mb4:= assoc_latin1.first;
WHILE key_utf8mb4 IS NOT NULL
LOOP
INSERT INTO t1 (k, val) VALUES (key_utf8mb4, assoc_latin1(key_utf8mb4));
key_utf8mb4:= assoc_latin1.NEXT(key_utf8mb4);
END LOOP;
SELECT id, k, HEX(val) AS val FROM t1;
DROP TEMPORARY TABLE t1;
END;
$$
CALL p1;

# Copying to assoc_latin1 from assoc_utf8mb4
Level	Code	Message
Warning	1859	Duplicate entry for key 'y'
assoc_utf8mb4.count	assoc_latin1.count
5	4

# Dumping assoc_utf8mb4 using key_utf8mb4
id	k	val
1	√•	C5
2	√∂	F6
3	√º	FC
4	y	79
5	z	7A

# Dumping assoc_latin1 using key_utf8mb4
id	k	val
1	√º	FC
2	z	7A
3	√•	C5
4	√∂	F6
DROP PROCEDURE p1;
#
# Copying to a shorter key data type
# Oracle does not allow this: expression is of wrong type
# MariaDB allows but returns an error if some key does not fit
#
CREATE PROCEDURE p1 AS
TYPE assoc_latin1_t IS TABLE OF INT INDEX BY VARCHAR(1) COLLATE latin1_swedish_ci;
TYPE assoc_utf8mb4_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE utf8mb4_uca1400_as_ci;
assoc_latin1 assoc_latin1_t;
assoc_utf8mb4 assoc_utf8mb4_t:= assoc_utf8mb4_t('√•'=>0xC5,'√∂√∂'=>0xF6,'√º'=>0xFC,
'y'=>0x79,'zz'=>0x7A);
key_utf8mb4 VARCHAR(10) COLLATE utf8mb4_uca1400_ai_ci;
BEGIN
SELECT '# Copying to assoc_latin1 from assoc_utf8mb4' AS ``;
assoc_latin1:= assoc_utf8mb4;
END;
$$
CALL p1;

# Copying to assoc_latin1 from assoc_utf8mb4
ERROR HY000: String '√∂√∂' is too long for INDEX BY (should be no longer than 1)
DROP PROCEDURE p1;
#
# Using 2-byte characters in the key
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE uca1400_ai_ci;
assoc assoc_t:= assoc_t('√°√°√°√°√°√°√°√°√°√°' => 10);
BEGIN
SELECT assoc('AAAAAAAAAA'); -- should find
END;
$$
CALL p1;
assoc('AAAAAAAAAA')
10
DROP PROCEDURE p1;
#
# Using 3-byte characters in the key
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE uca1400_ai_ci;
assoc assoc_t:= assoc_t('·∏Å·∏Å·∏Å·∏Å·∏Å·∏Å·∏Å·∏Å·∏Å·∏Å' => 10);
BEGIN
SELECT assoc('AAAAAAAAAA'); -- should find
END;
$$
CALL p1;
assoc('AAAAAAAAAA')
10
DROP PROCEDURE p1;
#
# Using 4-byte characters in the key
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE uca1400_ai_ci;
assoc assoc_t;
BEGIN
assoc('üÖ∞üÖ∞üÖ∞üÖ∞üÖ∞üÖ∞üÖ∞üÖ∞üÖ∞üÖ∞'):=10;
SELECT assoc('AAAAAAAAAA'); -- should find
END;
$$
CALL p1;
assoc('AAAAAAAAAA')
10
DROP PROCEDURE p1;
#
# Passing a too long key
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE uca1400_ai_ci;
assoc assoc_t:= assoc_t('√°√°√°√°√°√°√°√°√°√°√°' => 10);
BEGIN
NULL;
END;
$$
CALL p1;
ERROR HY000: String '√°√°√°√°√°√°√°√°√°√°√°' is too long for INDEX BY (should be no longer than 10)
DROP PROCEDURE p1;
#
# Using a key which cannot be converted to the key character set
# The non-convertable part is inside the VARCHAR length
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE latin1_swedish_ci;
assoc assoc_t:= assoc_t('√°√°√°√°√°√°√°√°√°—è' => 10); -- Nine √° + —è
BEGIN
NULL;
END;
$$
CALL p1;
ERROR HY000: Cannot convert 'utf8mb3' character 0xD18F to 'latin1'
DROP PROCEDURE p1;
#
# Using a key which cannot be converted to the key data type
# The non-convertable part is outside the VARCHAR length
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE latin1_swedish_ci;
assoc assoc_t:= assoc_t('√°√°√°√°√°√°√°√°√°√°—è' => 10); -- Ten √° + —è
BEGIN
NULL;
END;
$$
CALL p1;
ERROR HY000: String '√°√°√°√°√°√°√°√°√°√°—è' is too long for INDEX BY (should be no longer than 10)
DROP PROCEDURE p1;
#
# A binary key re-interpretting as utf8mb4
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE uca1400_ai_ci;
assoc assoc_t;
BEGIN
assoc(0x61616161616161616161):=10;
SELECT assoc('AAAAAAAAAA') AS c1, assoc(0x41414141414141414141) AS c2;
END;
$$
CALL p1;
c1	c2
10	10
DROP PROCEDURE p1;
#
# A binary key re-interpretting as utf8mb4
# with a bad utf8mb4 sequence inside the VARCHAR length
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE uca1400_ai_ci;
assoc assoc_t;
BEGIN
assoc(0x616161616161616161FF):=10; -- Nine 0x61 + 0xFF
END;
$$
CALL p1;
ERROR HY000: Invalid utf8mb4 character string: '\xFF'
DROP PROCEDURE p1;
#
# A binary key re-interpretting as utf8mb4
# with a bad utf8mb4 sequence outside the VARCHAR length
#
CREATE PROCEDURE p1 AS
TYPE assoc_t IS TABLE OF INT INDEX BY VARCHAR(10) COLLATE uca1400_ai_ci;
assoc assoc_t;
BEGIN
assoc(0x61616161616161616161FF):=10; -- Ten 0x61 + 0xFF
END;
$$
CALL p1;
ERROR HY000: String 'aaaaaaaaaa\xFF' is too long for INDEX BY (should be no longer than 10)
DROP PROCEDURE p1;

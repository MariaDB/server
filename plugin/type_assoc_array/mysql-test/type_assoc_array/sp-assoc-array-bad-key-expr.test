--echo #
--echo # MDEV-34319 DECLARE TYPE .. TABLE OF .. INDEX BY in stored routines
--echo #

set sql_mode=oracle;
SET NAMES utf8mb4;


--echo #
--echo # Passing an expression of a wrong type as a key: POINT
--echo #

DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF VARCHAR(20) INDEX BY INT;
  marks marks_t:= marks_t(1 => 'x43', 2 => 'x99');
BEGIN
  SELECT marks(POINT(1,1));
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;

DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF NUMBER INDEX BY INTEGER;
  marks marks_t;
BEGIN
  SELECT 1 INTO marks(POINT(1,1));
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;

DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF NUMBER INDEX BY INTEGER;
  marks marks_t;
BEGIN
  marks(POINT(1,1)) := 1;
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;


--echo #
--echo # Passing an expression of a wrong type as a key: ROW
--echo #

DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF VARCHAR(20) INDEX BY INT;
  marks marks_t:= marks_t(1 => 'x43', 2 => 'x99');
BEGIN
  SELECT marks(ROW(1,1));
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;

DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF NUMBER INDEX BY INTEGER;
  marks marks_t;
BEGIN
  SELECT 1 INTO marks(ROW(1,1));
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;

DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF NUMBER INDEX BY INTEGER;
  marks marks_t;
BEGIN
  marks(ROW(1,1)) := 1;
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;


--echo #
--echo # Passing an expression of a wrong type as a key: anchored POINT
--echo #

CREATE TABLE t1 (a POINT(1,1));
DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF VARCHAR(20) INDEX BY INT;
  marks marks_t:= marks_t(1 => 'x43', 2 => 'x99');
  idx t1.a%TYPE;
BEGIN
  SELECT marks(idx);
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1;

CREATE TABLE t1 (a POINT(1,1));
DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF VARCHAR(20) INDEX BY INT;
  marks marks_t:= marks_t(1 => 'x43', 2 => 'x99');
  idx t1.a%TYPE;
BEGIN
  SELECT 1 INTO marks(idx);
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1;

CREATE TABLE t1 (a POINT(1,1));
DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF VARCHAR(20) INDEX BY INT;
  marks marks_t:= marks_t(1 => 'x43', 2 => 'x99');
  idx t1.a%TYPE;
BEGIN
  marks(idx):= 1;
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1;


--echo #
--echo # Passing an expression of a wrong type as a key: anchored ROW
--echo #

CREATE TABLE t1 (a INT, b INT);
DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF VARCHAR(20) INDEX BY INT;
  marks marks_t:= marks_t(1 => 'x43', 2 => 'x99');
  idx t1%ROWTYPE;
BEGIN
  SELECT marks(idx);
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1;

CREATE TABLE t1 (a INT, b INT);
DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF VARCHAR(20) INDEX BY INT;
  marks marks_t:= marks_t(1 => 'x43', 2 => 'x99');
  idx t1%ROWTYPE;
BEGIN
  SELECT 1 INTO marks(idx);
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1;

CREATE TABLE t1 (a INT, b INT);
DELIMITER $$;
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF VARCHAR(20) INDEX BY INT;
  marks marks_t:= marks_t(1 => 'x43', 2 => 'x99');
  idx t1%ROWTYPE;
BEGIN
  marks(idx):= 1;
END;
$$
DELIMITER ;$$
--error ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1;


--echo #
--echo # Passing a stored function as a key
--echo #

DELIMITER $$;
CREATE FUNCTION f1 RETURN INT AS
BEGIN
  RETURN 1;
END;
$$
DELIMITER ;$$

DELIMITER $$;
--error ER_NOT_ALLOWED_IN_THIS_CONTEXT
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF VARCHAR(20) INDEX BY INT;
  marks marks_t:= marks_t(1 => 'x43', 2 => 'x99');
BEGIN
  SELECT marks(f1());
END;
$$
DELIMITER ;$$

DELIMITER $$;
--error ER_NOT_ALLOWED_IN_THIS_CONTEXT
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF NUMBER INDEX BY INTEGER;
  marks marks_t;
BEGIN
  SELECT 1 INTO marks(f1());
END;
$$
DELIMITER ;$$

DELIMITER $$;
--error ER_NOT_ALLOWED_IN_THIS_CONTEXT
CREATE PROCEDURE p1 AS
  TYPE marks_t IS TABLE OF NUMBER INDEX BY INTEGER;
  marks marks_t;
BEGIN
  marks(f1()) := 1;
END;
$$
DELIMITER ;$$

DROP FUNCTION f1;
